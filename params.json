{"name":"Domgen","tagline":"A generator that will produce ActiveRecord (ruby) and Hibernate (java) persistent objects from a schema definition","body":"h1. Domgen\r\n\r\nA generator that can produce several persistent object artifacts from a common schema definition.\r\n\r\nCurrently supported output formats are:\r\n\r\n* ActiveRecord (Ruby on Rails)\r\n* Plain Ruby classes\r\n* JPA/Hibernate Beans (Java)\r\n* Plain Javabeans (Java)\r\n* SQL DDL (MS-SQL Specific)\r\n\r\nh1. Schema Definition\r\n\r\nThe common schema is defined in a common file, @schema_set.rb@.\r\n\r\nh2. Example:\r\n\r\nbc..\r\n 1.  Domgen.define_schema_set(:myapp) do |ss|\r\n 2.     ss.define_generator(:sql)\r\n 3.\r\n 4.     ss.define_schema(\"Core\") do |s|\r\n 5.       s.sql.schema = 'dbo'\r\n 6.       s.java.package = 'my.application.model'\r\n 7.\r\n 8.       s.define_generator(:jpa)\r\n 9.       s.define_generator(:active_record)\r\n10.\r\n11.       s.define_object_type(:User) do |t|\r\n12.         t.integer(:ID, :primary_key => true)\r\n13.         t.string(:Login, 20, :unique => true, :allow_nil => false, :allow_blank => false)\r\n14.         t.string(:Nickname, 1..30, :unique => true)\r\n15.         t.string(:Signature, 255)\r\n16.       end\r\n17.\r\n18.       s.define_object_type(:Post) do |t|\r\n19.         t.integer(:ID, :primary_key => true)\r\n20.         t.reference(:User, :name => :PostedBy, :inverse_traversable => false)\r\n21.         t.string(:Subject, 1..50, :allow_blank => false)\r\n22.         t.datetime(:PostedAt)\r\n23.         t.boolean(:StickyPost)\r\n24.         t.text(:Content, :allow_nil => true)\r\n25.\r\n26.         t.sql.index([:PostedAt])\r\n27.       end\r\n28.\r\n29.       s.define_object_type(:Comment) do |t|\r\n30.         t.integer(:ID, :primary_key => true)\r\n31.         t.reference(:Post, :immutable => true, :inverse_multiplicity => :one)\r\n32.         t.reference(:User, :name => :PostedBy, :inverse_traversable => false)\r\n33.         t.text(:Content, :allow_nil => true)\r\n34.      end\r\n35.\r\n36.     end\r\n37.  end\r\n\r\nh3. Example Explanation\r\n\r\n-  @Domgen.define_schema_set(:myapp) do |ss|@  (Line 1) := Defines the schema set.\r\n\r\n-  @ss.define_generator(:sql)@  (Line 2) := Tells domgen to create schema SQL DDL files for this schema set.\r\n\r\n-  @ss.define_schema(\"Core\") do |s|@  (Line 4) := Defines a schema inside the schema set. in this case, called @Core@.\r\n\r\n-  @s.sql.schema = 'dbo'@  (Line 5) := Defines the database schema for this schema.\r\n\r\n-  @s.java.package = 'my.application.model'@  (Line 6) := Defines the java package in which to generate java model classes.\r\n\r\n-  @s.define_generator(:jpa)@  (Line 8) := Tells domgen to generate JPA beans.\r\n\r\n-  @s.define_generator(:active_record)@  (Line 9) := Tells domgen to generate ActiveRecord model classes.\r\n\r\n-  @s.define_object_type(:User) do |t|@  (Line 11) := Defines a @User@ table and corresponding model object.\r\n\r\n-  @t.integer(:ID, :primary_key => true)@  (Line 12) := Column/field definition for the primary key.\r\n\r\n-  @t.string(:Login, 20, :unique => true, :allow_nil => false, :allow_blank => false)@  (Line 13) := Column/field definition for a string type, with a max length of 20, disallowing @NULL@, blank values (i.e. length less than 1) and must be unique.\r\n\r\n-  @t.string(:Nickname, 1..30, :unique => true)@  (Line 14) := Another string column. The @1..30@ defines the minimum and maximum lengths. A minumum of more than zero implies @:allow_blank => false@.\r\n\r\n-  @t.reference(:User, :name => :PostedBy, :inverse_traversable => false)@  (Line 20) := A reference to another object, in this case, back to @User@. The @:inverse_traversable => false@ indicated that the inverse relationship _back_ to @Post@ will _not_ be created on the @User@ class. @:name => :PostedBy@ gives a custom name to both the model field and the database column.\r\n\r\n- @t.sql.index[:PostedAt]@ (Line 26) := Creates an SQL index on that column.\r\n\r\n- @t.reference(:Post, :immutable => true, :inverse_multiplicity => :many)@ (Line 31) := A relationship from @Comment@ to @Post@. The @:inverse_relationship => :has_many@ creates a collection model association from @Post@ to @Comment@, i.e _Posts have many comments_ .\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}