# DO NOT EDIT: File is autogenerated
module <%= object_type.schema.ruby.module_name %>

class <%= object_type.ruby.classname %> < ActiveRecord::Base
  set_table_name "<%= sql_qualify(object_type.schema,object_type.sql.table_name).gsub('[','').gsub(']','').gsub('dbo.','') %>"
  set_primary_key "<%= object_type.primary_key.sql.column_name %>"
<% object_type.attributes.each do |a| %>
<%   if a.persistent? && a.validate?
       if !a.generated_value?
         if !a.nullable?
%>  validates_presence_of :<%= a.sql.column_name %>
<%       end
         if a.unique?
%>  validates_uniqueness_of :<%= a.sql.column_name %>
<%       end
         if a.attribute_type == :integer
%>  validates_numericality_of :<%= a.sql.column_name %>, :only_integer => true, :allow_nil => true
<%       end
         if a.attribute_type == :boolean
%>  validates_boolean :<%= a.sql.column_name %>, :allow_nil => true
<%       end
         if a.attribute_type == :string
%>  nillable_attribute :<%= a.sql.column_name %>
  validates_length_of :<%= a.sql.column_name %>, :maximum => <%= a.length %>, :allow_nil => true
<%       end
         if a.reference?
%>  belongs_to :<%= underscore(a.name) %>, :class_name => '<%= a.referenced_object.ruby.fully_qualified_name %>', :foreign_key => '<%= a.sql.column_name %>'
  validates_reference_exists :<%= a.sql.column_name %>, <%= a.referenced_object.ruby.fully_qualified_name %>, :association_name => :<%= underscore(a.name) %>, :allow_nil => true
<%       end
       end
     end
   end %>
<% object_type.referencing_attributes.each do |attribute|
    if attribute.inverse_relationship_type == :has_many
%>
  has_many :<%= pluralize(underscore(attribute.inverse_relationship_name)) %>, :class_name => '<%= attribute.object_type.ruby.fully_qualified_name %>', :foreign_key => '<%= attribute.sql.column_name %>', :dependent => :destroy
  has_count_of :<%= pluralize(underscore(attribute.inverse_relationship_name)) %>
<%
    end
    if attribute.inverse_relationship_type == :has_one
%>
  has_one :<%= underscore(attribute.inverse_relationship_name) %>, :class_name => '<%= attribute.object_type.ruby.fully_qualified_name %>', :foreign_key => '<%= attribute.sql.column_name %>'
<%
    end
  end
%>

  # Make it possible for the users to extend the model by defining an extenion class
  include <%= object_type.ruby.fully_qualified_name %>Extension rescue NameError
end

end