/* DO NOT EDIT: File is autogenerated */
package <%= schema.java.package %>;
<% set_iris_mode %>

@javax.annotation.Generated( "Domgen" )
@SuppressWarnings( { "UnusedDeclaration", "LocalCanBeFinal" } )
public class <%= schema.name %>Sync
{
  public static java.util.Map<String, Object> processSyncData( final Class<?> type, final java.util.Map original, final java.util.Map newData, final boolean conflict )
  {
    <% schema.object_types.select{|o|!o.abstract? && o.iris.generate? }.each do |object_type|
%>if( <%= j_classname(object_type.java.classname) %>.class == type )
      {
        return process<%= object_type.name %>SyncData( original, newData, conflict );
      }
      else <% end %>
      {
        throw new IllegalStateException("Unknown type " + type );
      }
   }

<% schema.object_types.select{|o|!o.abstract? && o.iris.generate? }.each do |object_type|
%>
  private static java.util.Map<String, Object> process<%= object_type.name %>SyncData( final java.util.Map original, final java.util.Map newData, final boolean conflict )
  {
    final java.util.Map<String, Object> data = new java.util.HashMap<String, Object>();
<% object_type.attributes.select{|a| !a.primary_key? && !a.iris.runtime_managed? && a.persistent? && a.iris.client_side? }.each do |attribute|
     name = attribute.java.field_name
     if attribute.persistent?
%>
      {
        Object value = newData.get( <%= j_classname(object_type.java.classname) %>.COLUMN_<%= uppercase_constantize(name) %> );
<% if object_type.name == :PhysicalUnit && (attribute.name == :Notes || attribute.name == :Status || attribute.name == :IsMemberOfPool)  
%>        if ( conflict )
        {
          value = original.get( <%= j_classname(object_type.java.classname) %>.COLUMN_<%= uppercase_constantize(name) %> );
        }<%
   end %>
        data.put( <%= j_classname(object_type.java.classname) %>.COLUMN_<%= uppercase_constantize(name) %>, value );
      }
<%
     end
   end 
%>
    return data;
  }
<% end %>
}