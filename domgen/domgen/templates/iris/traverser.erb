/* DO NOT EDIT: File is autogenerated */
package <%= schema.java.package %>.visitor;

import iris.model.visitor.traversers.FilterDelegate;
import iris.model.visitor.traversers.TraversalEntry;

@javax.annotation.Generated( "Domgen" )
public class Traverser
  extends iris.model.visitor.traversers.AbstractTraverser
{
  protected void doTraverseBean( final iris.beans.AbstractBean bean,
                       final String linkerAttributeID,
                       final iris.beans.AbstractBean linker,
                       final Filter filter,
                       final FilterDelegate delegate,
                       final <%= schema.java.package %>.visitor.Visitor visitor )
  {
    if( null == bean )
    {
      //No action
    }
<% schema.object_types.select{|o|!o.abstract? && o.iris.generate?}.reverse.each do |object_type|
  name = object_type.name
  type = j_classname(object_type.java.fully_qualified_name)
%>    else if( bean instanceof <%= type %> )
    {
      doTraverse<%= name %>( (<%= type %>)bean, linkerAttributeID, linker, filter, delegate, visitor );
    }
<% end %>
    else if( bean instanceof iris.beans.NotDeployedNode )
    {
      doTraverseNotDeployedNode( (iris.beans.NotDeployedNode) bean, linkerAttributeID, linker, filter, delegate, visitor );
    }
    else if( bean instanceof iris.beans.DummyBean )
    {
      doTraverseDummy( (iris.beans.DummyBean) bean, linkerAttributeID, linker, filter, delegate, visitor );
    }
    else
    {
      throw new IllegalStateException( "Unknown bean type " + bean.getClass() );
    }
  }

  protected void doTraverseNotDeployedNode( final iris.beans.NotDeployedNode bean,
                        final String linkerAttributeID,
                        final iris.beans.AbstractBean linker,
                        final Filter filter,
                        final FilterDelegate delegate,
                        final <%= schema.java.package %>.visitor.Visitor visitor )
  {
    final int filterType = filter.acceptNotDeployedNode( bean, delegate, linkerAttributeID, linker );

    if( filterType == Filter.REJECT )
    {
      return;
    }

    if( null != visitor && ( (filterType & Filter.VISIT_ONLY) == Filter.VISIT_ONLY ) )
    {
      visitor.startNotDeployedNode( bean, linkerAttributeID );
    }

    if ( (filterType & Filter.TRAVERSE_ONLY) == Filter.TRAVERSE_ONLY )
    {
      for( final iris.model.DeployableUnitBean other : bean.getParent().getPoolMemberSet() )
      {
        if ( iris.model.util.DeployableUnitBeanUtil.isNotDeployed( other ) )
        {
          doTraverseBean( other, iris.model.DeployableUnitBean.COLUMN_POOL_ID, bean, filter, delegate, visitor );
        }
      }
    }

    if( null != visitor && ( (filterType & Filter.VISIT_ONLY) == Filter.VISIT_ONLY ) )
    {
      visitor.endNotDeployedNode( bean, linkerAttributeID );
    }
  }

  protected void doTraverseDummy( final iris.beans.DummyBean dummy,
                        final String linkerAttributeID,
                        final iris.beans.AbstractBean linker,
                        final Filter filter,
                        final FilterDelegate delegate,
                        final <%= schema.java.package %>.visitor.Visitor visitor )
  {
    if( (filter.acceptDummy( dummy, delegate, linkerAttributeID, linker ) & Filter.VISIT_ONLY) == Filter.VISIT_ONLY )
    {
      visitor.startDummy( dummy, linkerAttributeID );
      visitor.endDummy( dummy, linkerAttributeID );
    }
  }
<% schema.object_types.select{|o|!o.abstract? && o.iris.generate?}.each do |object_type|
  name = object_type.name
  type = j_classname(object_type.java.fully_qualified_name)
%>

  @SuppressWarnings( { "LoopStatementThatDoesntLoop" } )
  protected void doTraverse<%= name %>( final <%= type %> value,
                                final String linkerAttributeID,
                                final iris.beans.AbstractBean linker,
                                final Filter filter,
                                final FilterDelegate delegate,
                                final <%= schema.java.package %>.visitor.Visitor visitor )
  {
    final int filterType = filter.accept<%= name %>( value, delegate, linkerAttributeID, linker );

    if( filterType == Filter.REJECT )
    {
      return;
    }

    if( null != visitor && ( (filterType & Filter.VISIT_ONLY) == Filter.VISIT_ONLY ) )
    {
      visitor.start<%= name %>( value, linkerAttributeID );
    }

    if ( (filterType & Filter.TRAVERSE_ONLY) == Filter.TRAVERSE_ONLY )
    {
      for ( final TraversalEntry strategy : getStrategy( value.getClass() ) )
      {
        if( strategy.isAttribute() )
        {
          switch( strategy.getElementID() )
          {
<% object_type.attributes.select{|a|a.reference?}.each do |attribute|
  ref_type = j_classname(attribute.object_type.java.fully_qualified_name)
%>
            case <%= ref_type %>.<%= uppercase_constantize(attribute.java.field_name) %>_ATTR_ID:
              doTraverseBean( value.get<%= attribute.java.field_name %>(), <%= ref_type %>.COLUMN_<%= uppercase_constantize(attribute.java.field_name) %>, value, filter, delegate, visitor );
              break;
<% end %>
            default:
              throw new IllegalStateException( "Unknown relationship " + strategy );
          }
        }
        else
        {
          switch( strategy.getElementID() )
          {
<% object_type.referencing_attributes.each do |attribute|
  ref_type = j_classname(attribute.object_type.java.fully_qualified_name)
%>
            case <%= type %>.<%= uppercase_constantize(attribute.inverse_relationship_name) %>_RELATION_ID:
              doTraverseRelationship<%= name %><%= attribute.java.field_name %>( value, filter, delegate, visitor );
              break;
<% end %>
            default:
              throw new IllegalStateException( "Unknown relationship " + strategy );
          }
        }
      }
    }

    if( null != visitor && ( (filterType & Filter.VISIT_ONLY) == Filter.VISIT_ONLY ) )
    {
      visitor.end<%= name %>( value, linkerAttributeID );
    }
  }
<% object_type.referencing_attributes.each do |attribute|
  ref_type = j_classname(attribute.object_type.java.fully_qualified_name)
%>
  protected void doTraverseRelationship<%= name %><%= attribute.java.field_name %>( final <%= type %> value,
                                final Filter filter,
                                final FilterDelegate delegate,
                                final <%= schema.java.package %>.visitor.Visitor visitor )
  {
    for( final <%= ref_type %> other : value.get<%= attribute.inverse_relationship_name %>Set() )
    {
      doTraverseBean( other, <%= ref_type %>.COLUMN_<%= uppercase_constantize(attribute.java.field_name) %>, value, filter, delegate, visitor );
    }
  }
   
<% end %>
<% end %>
}
