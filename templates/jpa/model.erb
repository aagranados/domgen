/* DO NOT EDIT: File is autogenerated */
package <%= object_type.schema.java.package %>;

import javax.annotation.Generated;
import javax.persistence.*;
import javax.validation.constraints.*;

@SuppressWarnings( { "UnusedDeclaration" } )
<% if not object_type.queries.empty? %>@NamedQueries( value = {
<%= object_type.queries.collect { |q| "  @NamedQuery( name = \"#{q.fully_qualified_name}\", query = \"#{q.query_string}\" )" }.join(",\n") %>
} )<% end %>
@Generated( "Domgen" )
@Entity
@Table( name = "<%= object_type.sql.table_name %>" )
public final class <%= object_type.java.classname %>
{
<% object_type.attributes.each do |a|
  if !a.persistent?
%>  @Transient
<%
  else
    if a.primary_key?
%>  @Id
<%    if a.sql.identity?
%>  @GeneratedValue( strategy = GenerationType.IDENTITY )
<%
      end
    end
    if a.reference?
%>  @ManyToOne
  @JoinColumn( name = "<%= q(a.sql.column_name) %>", nullable = <%= a.nullable? %>, updatable = <%= !a.immutable? %> )<%
    else
%>  @Column( name = "<%= q(a.sql.column_name) %>"<%= a.length.nil? ? '' :", length = #{a.length}"%>, nullable = <%= a.nullable? %>, updatable = <%= !a.immutable? %> )<%
    end
   end
%>
<% if !a.nullable? && !a.sql.identity? %>  @NotNull
<% end %><% if !a.length.nil? %>  @Size(max = <%= a.length %>)
<% end %>  private <%= a.java.java_type %> <%= a.java.field_name %>;

<% end
   object_type.referencing_attributes.each do |attribute|
     if attribute.inverse_relationship_type == :has_many
%>  @OneToMany
  private java.util.Set<<%= attribute.object_type.java.fully_qualified_name %>> <%= pluralize(attribute.inverse_relationship_name) %>;

<% elsif attribute.inverse_relationship_type == :has_one
%>  @OneToOne(optional = <%= !attribute.nullable? %>, mappedBy= "<%= attribute.java.field_name %>")
  private <%= attribute.object_type.java.fully_qualified_name %> <%= attribute.inverse_relationship_name %>;

<%
    end
  end
%>
<%= object_type.attributes.collect {|a| java_accessors(a.java.field_name,a.java.java_type) }.join("\n") %>
<%= object_type.referencing_attributes.collect do |a|
  if a.inverse_relationship_type == :has_many
    java_accessors(pluralize(a.inverse_relationship_name),"java.util.Set<#{a.object_type.java.fully_qualified_name}>")
   elsif a.inverse_relationship_type == :has_one
    java_accessors(a.inverse_relationship_name,a.object_type.java.fully_qualified_name)
   else
    ''
   end
end.join("\n")
%>
  @Override
  public boolean equals( final Object o )
  {
    if ( this == o )
    {
      return true;
    }
    else if ( o == null || getClass() != o.getClass() )
    {
      return false;
    }
    else
    {
      final <%= object_type.java.classname %> that = (<%= object_type.java.classname %>) o;
      return getID() != null && getID().equals( that.getID() );
    }
  }
}