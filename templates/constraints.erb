/* DO NOT EDIT: File is autogenerated */
<%
  self.object_types.each do |object_type|
    if object_type.constraints.size > 0 %><%=
    banner("Constraints for #{object_type.table_name}")
%><%
      object_type.constraints.each do |constraint|
%>
ALTER TABLE <%= object_type.table_name %>
  ADD CONSTRAINT CK_<%= s(object_type.name) %>_<%= s(constraint.name) %> CHECK ( <%= s(constraint.sql) %> )
GO
<%    end
    end
    if object_type.codependent_constraints.size > 0 %><%=
      banner("Codependent attribute constraints for #{object_type.table_name}")
%><%
      object_type.codependent_constraints.each do |c|
%>
ALTER TABLE <%= object_type.table_name %>
  ADD CONSTRAINT CK_<%= s(object_type.name) %>_<%= s(c.name) %>_CoDep CHECK ( (<%= c.attribute_names.collect {|name| "#{object_type.attribute_by_name(name).column_name} IS NOT NULL" }.join(" AND ") %>) OR (<%= c.attribute_names.collect {|name| "#{object_type.attribute_by_name(name).column_name} IS NULL" }.join(" AND ") %>) )
GO
<%    end
    end
    if object_type.incompatible_constraints.size > 0 %><%=
      banner("Incompatible attribute constraints for #{object_type.table_name}")
%><%
      object_type.incompatible_constraints.each do |c|
%>
ALTER TABLE <%= object_type.table_name %>
  ADD CONSTRAINT CK_<%= s(object_type.name) %>_<%= s(c.name) %>_Incompat CHECK ( <%=
    (0..(c.attribute_names.size)).collect do |i|
      candidate = c.attribute_names[i]
      str = c.attribute_names.collect {|name| "#{object_type.attribute_by_name(name).column_name} IS#{(candidate == name) ? ' NOT' : ''} NULL" }.join(' AND ')
      "(#{str})"
    end.join(" OR ")
%> )
GO
<%    end
    end
    if object_type.validations.size > 0 %><%=
    banner("Validations for #{object_type.table_name}")
%><%
      object_type.validations.each do |validation|
%>
CREATE TRIGGER <%= schema.in_namespace("trg#{object_type.name}#{validation.name}Validation") %> ON <%= object_type.table_name %>
AFTER INSERT,UPDATE
AS
  SET NOCOUNT ON
  DECLARE @violations INT
  SELECT @violations = COUNT(*)
  FROM (<%= validation.sql %>) v
  IF (@@error = 0 AND @violations = 0) GOTO done
  ROLLBACK
  RAISERROR ('Failed to pass validation check <%= validation.name %>', 16, 1) WITH SETERROR
done:
GO
<%    end
    end
   immutable_attributes = object_type.attributes.select {|a| a.immutable? }
   if immutable_attributes.size > 0
    pk = object_type.primary_key
%>
<%= banner("Immutability enforcement for #{object_type.table_name}") %>
CREATE TRIGGER <%= schema.in_namespace("trg#{object_type.name}Immuter") %> ON <%= object_type.table_name %>
AFTER UPDATE
AS
   SET NOCOUNT ON
   IF <%= immutable_attributes.collect {|a| "UPDATE(#{a.column_name})" }.join(" OR ") %>
   BEGIN
      DECLARE @violations INT
      SELECT @violations = COUNT(*)
      FROM inserted I, deleted D
      WHERE
        I.<%= pk.column_name %> = D.<%= pk.column_name %> AND
        (
          <%= immutable_attributes.collect {|a| "(I.#{a.column_name} != D.#{a.column_name})" }.join(" OR\n") %>
        )
      IF (@@error = 0 AND @violations = 0) GOTO done
      ROLLBACK
      RAISERROR ('Attempted to modify immutable attributes on <%= object_type.table_name %>', 16, 1) WITH SETERROR
done:
   END
GO
<% end %>
<%
  end
%>