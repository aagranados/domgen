/* DO NOT EDIT: File is autogenerated */
<% if !schema.sql.default_schema? %>
IF EXISTS ( SELECT * FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '<%= schema.sql.schema %>')
  DROP SCHEMA <%= q(schema.sql.schema) %>
GO
CREATE SCHEMA <%= q(schema.sql.schema) %>
GO
<% end %>
<%= banner("DDL for Schema '#{schema.name}'") %>
<% schema.object_types.select{|object_type| !object_type.abstract?}.each do |object_type| %>
CREATE TABLE <%= object_type.sql.qualified_table_name %>(
<% object_type.attributes.select {|a| a.persistent?}.each do |a|
%>  <%= q(a.sql.column_name) %> <%= a.sql.sql_type %> <%= a.sql.identity? ? 'IDENTITY(1,1) ' : '' %><%= a.nullable? ? '': 'NOT '%>NULL,
<% end
%>  CONSTRAINT PK_<%= object_type.name %> PRIMARY KEY <%= (object_type.sql.indexes.select{|i| i.cluster?}.size == 0) ? '' : 'NON' %>CLUSTERED (<%= q(object_type.primary_key.sql.column_name) %> ASC)
)
GO
<% object_type.attributes.select {|a| a.persistent? && !a.sql.default_value.nil?}.each do |a| %>
ALTER TABLE <%= object_type.sql.qualified_table_name %> ADD DEFAULT (<%= quote_value(a.sql.default_value) %>) FOR <%= q(a.sql.column_name) %>
GO
<% end %>
<% object_type.sql.indexes.each do |index| %>
CREATE <%= index.unique? ? 'UNIQUE ' : '' %><%= index.cluster? ? '' : 'NON' %>CLUSTERED INDEX [<%= index.name %>] ON <%= object_type.sql.qualified_table_name %>
(<%= index.attribute_names.collect {|a| "\n  #{q(object_type.attribute_by_name(a).sql.column_name)} ASC" }.join(",") %>
)<% if !index.include_attribute_names.nil? %> INCLUDE ( <%= index.include_attribute_names.collect {|a| q(object_type.attribute_by_name(a).sql.column_name) }.join(",") %> )<% end %>
<% if index.filter %>WHERE <%= index.filter %><% end %>
GO
<% end %>
<% object_type.sql.foreign_keys.each do |foreign_key| %>
ALTER TABLE <%= object_type.sql.qualified_table_name %>
  ADD CONSTRAINT [FK_<%= object_type.name %>_<%= foreign_key.name %>] FOREIGN KEY (<%= foreign_key.attribute_names.collect{|a| q(object_type.attribute_by_name(a).sql.column_name)}.join(', ') %>)
  REFERENCES <%= foreign_key.referenced_object_type.sql.qualified_table_name %> (<%= foreign_key.referenced_attribute_names.collect{|a| q(foreign_key.referenced_object_type.attribute_by_name(a).sql.column_name)}.join(', ')  %>)
<% if foreign_key.on_update != :no_action %>  ON UPDATE <%= Domgen::Sql::ForeignKey::ACTION_MAP[foreign_key.on_update] %><% end %>
<% if foreign_key.on_delete != :no_action %>  ON DELETE <%= Domgen::Sql::ForeignKey::ACTION_MAP[foreign_key.on_delete] %><% end %>
GO
<%
  end
  if object_type.sql.constraints.size > 0 %><%=
    banner("Constraints for #{object_type.sql.qualified_table_name}")
%><%
      object_type.sql.constraints.each do |constraint|
%>
ALTER TABLE <%= object_type.sql.qualified_table_name %>
  ADD CONSTRAINT CK_<%= s(object_type.name) %>_<%= s(constraint.name) %> CHECK ( <%= s(constraint.sql) %> )
GO
<%    end
    end
    if object_type.sql.triggers.size > 0 %><%=
    banner("Triggers for #{object_type.sql.qualified_table_name}")
%><%
      object_type.sql.triggers.each do |trigger|
%>
CREATE TRIGGER <%= trigger.qualified_trigger_name %> ON <%= object_type.sql.qualified_table_name %>
<% if trigger.after == :both %>AFTER INSERT, UPDATE<% elsif trigger.after == :insert %>AFTER INSERT<% elsif trigger.after == :update %>AFTER UPDATE<% end %>
AS
  SET NOCOUNT ON
<%= trigger.sql %>
GO
<%    end
    end
  end
%>
