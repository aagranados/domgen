/* DO NOT EDIT: File is auto-generated */
<%= banner("DDL for Data Module '#{data_module.name}'") %>
<% data_module.object_types.select{|object_type| !object_type.abstract?}.each do |object_type| %>

<% object_type.attributes.select {|a| a.persistent? && a.sql.identity?}.each do |a| %>CREATE SEQUENCE <%= Domgen::Sql.dialect.quote(object_type.data_module.sql.schema) %>.<%= Domgen::Sql.dialect.quote(object_type.sql.table_name.to_s + a.sql.column_name.to_s + "Seq") %> start 0 increment 1 maxvalue 2147483647 minvalue 0 cache 1;
<% end %>

CREATE TABLE <%= object_type.sql.qualified_table_name %>(
<% object_type.attributes.select {|a| a.persistent?}.each do |a|
%>  <%= a.sql.quoted_column_name %> <%= a.sql.sql_type %> <%= a.sql.identity? ? "DEFAULT nextval('#{Domgen::Sql.dialect.quote(object_type.data_module.sql.schema) + "." + Domgen::Sql.dialect.quote(object_type.sql.table_name.to_s + a.sql.column_name.to_s + "Seq") }'::text)" : '' %><%= a.nullable? ? '': 'NOT '%>NULL,
<% end
%>  CONSTRAINT PK_<%= object_type.name %> PRIMARY KEY (<%= object_type.primary_key.sql.quoted_column_name %>)
)

GO
  -- COMMENT ON DATABASE "booktown" IS 'The Book Town Database.';
GO
<% object_type.attributes.select {|a| a.persistent? && !a.sql.default_value.nil?}.each do |a| %>
ALTER TABLE <%= object_type.sql.qualified_table_name %> ADD CONSTRAINT "DF_<%= object_type.name %>_<%= a.name %>" DEFAULT (<%= a.sql.default_value %>) FOR <%= a.sql.quoted_column_name %>
GO
<% end %>
<% object_type.sql.indexes.each do |index| %>
CREATE <%= index.unique? ? 'UNIQUE ' : '' %>INDEX <%= index.quoted_name %> ON <%= object_type.sql.qualified_table_name %>
(<%= index.attribute_names.collect {|a| "\n  #{object_type.attribute_by_name(a).sql.quoted_column_name} ASC" }.join(",") %>
)<% if !index.include_attribute_names.empty? %> INCLUDE ( <%= index.include_attribute_names.collect {|a| object_type.attribute_by_name(a).sql.quoted_column_name }.join(",") %> )<% end %>
<% if index.filter %>WHERE <%= index.filter %><% end %>
<%= index.unique? ? 'ON [PRIMARY]' : '' %>
GO

<% end
%>

<%= banner("Foreign Keys for #{object_type.sql.qualified_table_name}") %>
<% object_type.sql.foreign_keys.each do |foreign_key| %>
ALTER TABLE <%= object_type.sql.qualified_table_name %>
  WITH NOCHECK ADD CONSTRAINT [<%= foreign_key.foreign_key_name %>] FOREIGN KEY (<%= foreign_key.attribute_names.collect{|a| object_type.attribute_by_name(a).sql.quoted_column_name}.join(', ') %>)
  REFERENCES <%= foreign_key.referenced_object_type.sql.qualified_table_name %> (<%= foreign_key.referenced_attribute_names.collect{|a| foreign_key.referenced_object_type.attribute_by_name(a).sql.quoted_column_name}.join(', ')  %>)
<% if foreign_key.on_update != :no_action %>  ON UPDATE <%= Domgen::Sql::ForeignKey::ACTION_MAP[foreign_key.on_update] %><% end %>
<% if foreign_key.on_delete != :no_action %>  ON DELETE <%= Domgen::Sql::ForeignKey::ACTION_MAP[foreign_key.on_delete] %><% end %>
GO
ALTER TABLE <%= object_type.sql.qualified_table_name %> NOCHECK CONSTRAINT [<%= foreign_key.foreign_key_name %>]
GO
<%
  end
  if object_type.sql.constraints.size > 0 %><%=
    banner("Constraints for #{object_type.sql.qualified_table_name}")
%><%
      object_type.sql.constraints.each do |constraint|
%>
ALTER TABLE <%= object_type.sql.qualified_table_name %>
  WITH NOCHECK ADD CONSTRAINT <%= constraint.constraint_name %> CHECK ( <%= s(constraint.sql) %> )
GO
ALTER TABLE <%= object_type.sql.qualified_table_name %> NOCHECK CONSTRAINT [<%= constraint.constraint_name %>]
GO

<%    end
   end
   if object_type.sql.function_constraints.size > 0 %><%=
    banner("Function Constraints for #{object_type.sql.qualified_table_name}")
%><%
    object_type.sql.function_constraints.each do |constraint|
%>
CREATE FUNCTION <%= data_module.sql.schema %>.<%= s(object_type.name) %>_<%= s(constraint.name) %>
(
<%= constraint.parameters.collect{|parameter_name| a = object_type.attribute_by_name(parameter_name); "  @#{a.sql.column_name} #{a.sql.sql_type}"}.join(",\n") %>
)
RETURNS BIT
AS
BEGIN
  DECLARE @Result BIT;
  SET @Result = 0;
  <%= constraint.common_table_expression %>
  SELECT @Result = 1 WHERE EXISTS (<%= constraint.positive_sql %>)
  RETURN @Result
END
GO
ALTER TABLE <%= object_type.sql.qualified_table_name %>
  WITH NOCHECK ADD CONSTRAINT
  <%= constraint.constraint_name %>
  CHECK (<%= constraint.constraint_sql %>)
GO
ALTER TABLE <%= object_type.sql.qualified_table_name %> NOCHECK CONSTRAINT [<%= constraint.constraint_name %>]
    <%
    end
   end
   if object_type.sql.triggers.size > 0 %><%=
    banner("Triggers for #{object_type.sql.qualified_table_name}")
%><%
      object_type.sql.triggers.each do |trigger|
%>
CREATE TRIGGER <%= trigger.qualified_trigger_name %> ON <%= object_type.sql.qualified_table_name %>
<%
  if trigger.after && !trigger.after.empty?
%>  AFTER <%= trigger.after.collect{|a| a.to_s.upcase }.join(", ") %>
<%
  end
  if trigger.instead_of && !trigger.instead_of.empty?
%>  INSTEAD OF <%= trigger.instead_of.collect{|a| a.to_s.upcase }.join(", ") %>
<%
  end
%>AS
  DECLARE @RowsAffected INT
  SET @RowsAffected = @@ROWCOUNT
  --no need to continue on if no rows affected
  IF @RowsAffected = 0 RETURN

  SET NOCOUNT ON; -- to avoid the rowcount messages
  SET ROWCOUNT 0; -- in case the client has modified the rowcount
<%= trigger.sql %>
GO
DISABLE TRIGGER <%= trigger.qualified_trigger_name %> ON <%= object_type.sql.qualified_table_name %>
GO
<%    end
    end
  end
%>

CREATE PROCEDURE <%= data_module.sql.schema %>.spCheckConstraints
AS
BEGIN
  SET NOCOUNT ON;
  DECLARE @Ignored INT

  DECLARE @FailedConstraintChecks TABLE
  (
    SchemaName VARCHAR(500),
    TableName VARCHAR(500),
    ConstraintName VARCHAR(500),
    ViewSQL VARCHAR(MAX) NULL
  );
<% data_module.object_types.select{|object_type| !object_type.abstract?}.each do |object_type| %>
<%
   constraints = object_type.sql.constraints + object_type.sql.function_constraints
   constraints.select{|constraint| constraint.invariant?}.each do |constraint| %>
  BEGIN TRY
    ALTER TABLE <%= object_type.sql.qualified_table_name %> WITH CHECK CHECK CONSTRAINT [<%= constraint.constraint_name %>]
  END TRY
  BEGIN CATCH
    INSERT INTO @FailedConstraintChecks(SchemaName, TableName, ConstraintName, ViewSQL)
      VALUES ('<%= data_module.sql.schema %>','<%= object_type.sql.table_name %>','<%= constraint.constraint_name %>','DBCC CHECKCONSTRAINTS(''<%= object_type.data_module.sql.schema %>.<%= constraint.constraint_name %>'') WITH ALL_ERRORMSGS, NO_INFOMSGS')
  END CATCH
<%
   end
%>
<% object_type.sql.validations.select{|validation| !validation.invariant_negative_sql.nil?}.each do |validation| %>
  ;<%= validation.common_table_expression %> SELECT @Ignored = 1 WHERE EXISTS (<%= validation.invariant_negative_sql %>)
  IF (@@ERROR != 0 OR @@ROWCOUNT != 0)
  BEGIN
    INSERT INTO @FailedConstraintChecks(SchemaName, TableName, ConstraintName, ViewSQL)
      VALUES ('<%= data_module.sql.schema %>','<%= object_type.sql.table_name %>','V_<%= validation.name %>','<%= "#{validation.common_table_expression}#{validation.invariant_negative_sql}".gsub("'","''") %>')
  END
<%
   end
  end
%>
  SELECT * FROM @FailedConstraintChecks
END
GO

