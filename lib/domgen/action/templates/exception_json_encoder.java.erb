/* DO NOT EDIT: File is auto-generated */
package <%= to_package(exception.action.qualified_json_encoder_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
<% unless exception.ee.module_local? %>public <% end %>final class <%= exception.action.json_encoder_name %>
{
  private <%= exception.action.json_encoder_name %>()
  {
  }

  @javax.annotation.Nonnull
  <% unless exception.ee.module_local? %>public <% end %>static javax.json.JsonObject encode( @javax.annotation.Nonnull final <%= exception.ee.qualified_name %> exception )
  {
    final var jsonBuilder = javax.json.Json.createObjectBuilder().add( "$type", "<%= exception.data_module.name %>.<%= exception.name %>" );
    final var message = exception.getMessage();
    if ( null != message )
    {
      jsonBuilder.add( "$message", message );
    }
    return
      jsonBuilder
<% exception.parameters.each do |parameter|
    conversion_rule =
      case
        when (parameter.enumeration? and parameter.nullable? && parameter.enumeration.numeric_values?) then Proc.new {|value, type| "null == #{value} ? javax.json.JsonValue.NULL : javax.json.Json.createValue( #{value}.ordinal() )"}
        when (parameter.enumeration? and parameter.nullable? && parameter.enumeration.textual_values?) then Proc.new {|value, type| "null == #{value} ? javax.json.JsonValue.NULL : javax.json.Json.createValue( #{value}.value() )"}
        when (parameter.enumeration? && parameter.enumeration.numeric_values?) then Proc.new {|value, type| "javax.json.Json.createValue( #{value}.ordinal() )"}
        when (parameter.enumeration? && parameter.enumeration.textual_values?) then Proc.new {|value, type| "javax.json.Json.createValue( #{value}.value() )"}
        when (parameter.struct? && parameter.nullable?) then Proc.new {|value| "null == #{value} ? javax.json.JsonValue.NULL : #{struct.action.qualified_json_encoder_name}.encode( #{value} )"}
        when parameter.struct? then Proc.new {|value| "#{parameter.referenced_struct.action.qualified_json_encoder_name}.encode( #{value} )"}
        when (parameter.date? && parameter.nullable?) then Proc.new {|value, type| "null == #{value} ? javax.json.JsonValue.NULL : iris.rose.server.service.util.RDate.fromDate( (#{type}) #{value} ).toString()"}
        when parameter.date? then Proc.new {|value| "iris.rose.server.service.util.RDate.fromDate( #{value} ).toString()"}
        when (parameter.datetime? && parameter.nullable?) then Proc.new {|value, type| "null == #{value} ? javax.json.JsonValue.NULL : javax.json.Json.createValue( ((#{type}) #{value}).getTime() )"}
        when parameter.datetime? then Proc.new {|value| "javax.json.Json.createValue( #{value}.getTime() )"}
        when parameter.nullable? then Proc.new {|value| "null == #{value} ? javax.json.JsonValue.NULL : javax.json.Json.createValue( #{value} )"}
        else Proc.new{|value| value }
      end
-%>
        .add( "<%= parameter.name %>", <%= conversion_rule.call( "exception.#{getter_prefix(parameter)}#{parameter.name}()" ) %> )
<% end -%>
        .build();
  }

  <% unless exception.ee.module_local? %>public <% end %>static void decodeAndThrow( @javax.annotation.Nonnull final javax.json.JsonObject json )<%=
        "\n    throws #{exception.ee.qualified_name}"
%>
  {
    throw new <%= exception.ee.qualified_name %>( <% exception.parameters.each do |parameter| conversion_rule =
    case
    when (parameter.enumeration? && parameter.enumeration.numeric_values?) then Proc.new {|value  | "#{parameter.enumeration.ee.qualified_name}.values()[ json.getInt( #{value} ) ]"}
    when (parameter.enumeration? && parameter.enumeration.textual_values?) then Proc.new {|value  | "#{parameter.enumeration.ee.qualified_name}.valueOf( json.getString( #{value} ) )"}
    when parameter.struct? && parameter.collection? then Proc.new {|value  | "json.getJsonArray( #{value} )
             .getValuesAs( javax.json.JsonObject.class )
             .stream()
             .map( o -> #{parameter.referenced_struct.action.qualified_json_encoder_name}.decode( o ) )
             .collect( java.util.stream.Collectors.toList() )"}
    when parameter.struct? then Proc.new {|value  | "#{parameter.referenced_struct.action.qualified_json_encoder_name}.decode( json.getJsonObject( #{value} ) )"}
    when parameter.date? && parameter.collection? then Proc.new {|value  | "json.getJsonArray( #{value} )
             .getValuesAs( javax.json.JsonString.class )
             .stream()
             .map( javax.json.JsonString::getString )
             .map( s -> iris.rose.server.service.util.RDate.toDate( iris.rose.server.service.util.RDate.parse( s ) ) )
             .collect( java.util.stream.Collectors.toList() )"}
    when parameter.date? then Proc.new {|value  | "iris.rose.server.service.util.RDate.toDate( iris.rose.server.service.util.RDate.parse( json.getString( #{value} ) ) )"}
    when parameter.datetime? && parameter.collection? then Proc.new {|value  | "json.getJsonArray( #{value} )
             .getValuesAs( javax.json.JsonNumber.class )
             .stream()
             .map( javax.json.JsonString::intValue )
             .map( i -> new java.util.Date( i ) )
             .collect( java.util.stream.Collectors.toList() )"}
    when parameter.datetime? then Proc.new {|value  | "new java.util.Date( json.getInt( #{value} ) )"}
    when (parameter.integer? || parameter.reference?) && parameter.collection? then Proc.new {|value  | "json.getJsonArray( #{value} )
             .getValuesAs( javax.json.JsonNumber.class )
             .stream()
             .map( javax.json.JsonNumber::intValue )
             .collect( java.util.stream.Collectors.toList() )"}
    when (parameter.integer? || parameter.reference?) then Proc.new {|value  | "json.getInt( #{value} )"}
    when parameter.boolean? && parameter.collection? then Proc.new {|value  | "json.getJsonArray( #{value} )
             .stream()
             .map( javax.json.JsonValue::getValueType )
             .map( v -> javax.json.JsonValue.ValueType.TRUE == v )
             .collect( java.util.stream.Collectors.toList() )"}
    when parameter.boolean? then Proc.new {|value  | "json.getBoolean( #{value} )"}
    when parameter.collection? then Proc.new {|value  | "json.getJsonArray( #{value} )
             .getValuesAs( javax.json.JsonString.class )
             .stream()
             .map( javax.json.JsonString::getString )
             .collect( java.util.stream.Collectors.toList() )"}
    else Proc.new{|value  | "json.getString( #{value} )" }
    end -%> <%= conversion_rule.call("\"#{parameter.name}\"") + "," %>
<% end -%> json.containsKey( "$message" ) ? json.getString( "$message" ) : null );
  }
}
