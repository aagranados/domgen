/* DO NOT EDIT: File is auto-generated */
package <%= to_package(entity.arez.qualified_name) %>;

@javax.annotation.Generated( "Domgen" )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "EI_EXPOSE_REP", "EI_EXPOSE_REP2", "ACEM_ABSTRACT_CLASS_EMPTY_METHODS", "SPP_EQUALS_ON_ENUM" } )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "unchecked", "JavaDoc", "PMD.IfStmtsMustUseBraces", "Arez:UnmanagedComponentReference" } )
<% unless entity.abstract? -%>
<% has_arez_elements = !entity.arez.referencing_client_side_attributes.empty? || entity.attributes.any?{|a|a.arez? && (!a.immutable? || a.reference?) } -%>
@arez.annotations.ArezComponent<% unless has_arez_elements %>( allowEmpty = true )<% end %>
<% if entity.dao.arez? -%>
@arez.annotations.Repository( extensions = {<%= entity.dao.arez.extensions.collect{|e| "#{e}.class"}.join(', ') %>} )
<% end -%>
<% end -%>
public abstract class <%= entity.arez.name %>
<%= entity.extends ? "  extends #{entity.data_module.entity_by_name(entity.extends).arez.qualified_name}\n" : '' -%>
<% if entity.arez.extensions.size > 0 -%>
  implements <%= entity.arez.extensions.join(", ") %>
<% end -%>
{
<% entity.declared_attributes.select { |a| !a.abstract? && a.arez? && a.text? && a.has_non_max_length? }.each do |attribute| -%>
  public static final int <%= Reality::Naming.uppercase_constantize(attribute.name) -%>_MAX_SIZE = <%= attribute.length -%>;
<% end -%>
<% if entity.arez.enable_entity_broker? -%>
<% entity.declared_attributes.select{ |attribute| attribute.imit? && !attribute.immutable? }.each do |attribute| -%>
  public static final String <%= Reality::Naming.uppercase_constantize( attribute.name ) %> = "<%= attribute.name %>";
<% end -%>
<% entity.referencing_attributes.select{ |attribute| attribute.imit? && !attribute.abstract? && attribute.inverse.imit? && attribute.inverse.imit.traversable?}.each do |attribute| -%>
  public static final String <%= Reality::Naming.uppercase_constantize(attribute.inverse.name) %> = "<%= attribute.inverse.name %>";
<% end -%>
<% end -%>
<% entity.declared_attributes.select{ |attribute| attribute.immutable? && !attribute.abstract? && attribute.arez? }.each do |attribute|
  if attribute.reference? -%>
  <%= annotated_type(attribute, :arez, :transport, :assume_generated => true, :private => true, :final => !attribute.updatable?) %> _<%= Reality::Naming.camelize(attribute.arez.name(:transport)) %>;
<% else -%>
  <%= annotated_type(attribute, :arez, :default, :assume_generated => true, :private => true, :final => !attribute.updatable?) %> _<%= Reality::Naming.camelize(attribute.arez.name) %>;
<%
   end
   end
-%>

  <%= entity.subtypes.empty? ? '' : 'protected ' %><%= entity.arez.name %>( <%= entity.attributes.select{|attribute| attribute.immutable? && !attribute.abstract? && attribute.arez?}.collect { |attribute| "#{annotated_type(attribute, :arez, attribute.enumeration? ? :default : :transport, :final => true, :assume_generated => true)} #{Reality::Naming.camelize(attribute.arez.name(:transport))}"}.join(', ') %>)
  {
<% if entity.extends -%>
    super( <%= entity.data_module.entity_by_name(entity.extends).attributes.select{|attribute| !attribute.abstract? && attribute.arez?}.collect {|attribute| Reality::Naming.camelize(attribute.arez.name(:transport))}.join(', ') %> );
<% end -%>
<% entity.declared_attributes.select{|attribute| attribute.immutable? && !attribute.abstract? && attribute.arez?}.each do |attribute| -%>
    _<%= Reality::Naming.camelize(attribute.arez.name(:transport)) %> = <%= supports_nullable?(attribute.arez, attribute.enumeration? ? :default : :transport, :assume_generated => true) && !attribute.nullable? ? "java.util.Objects.requireNonNull( #{Reality::Naming.camelize(attribute.arez.name(:transport))} )" : Reality::Naming.camelize(attribute.arez.name(:transport)) %>;
<% end -%>
  }
<% if entity.arez.enable_entity_broker? -%>

  @arez.annotations.PostConstruct
  final void postConstruct()
  {
    if ( isChangeEmitterEnabled() )
    {
      getChangeEmitter().entityAdded( this );
    }
  }

  @arez.annotations.PostDispose
  final void postDispose()
  {
    if ( isChangeEmitterEnabled() )
    {
      getChangeEmitter().entityRemoved( this );
    }
  }
<% end -%>
<% entity.declared_attributes.select{|attribute| attribute.arez? }.each do |attribute| -%>
<% if attribute.reference? -%>
<% if attribute.immutable? -%>

  @arez.annotations.Reference( load = arez.annotations.LinkType.<%= attribute.arez.lazy? ? 'LAZY' : 'EXPLICIT' %><% if attribute.inverse.arez.traversable? %>, inverseName = "<%= attribute.inverse.multiplicity == :many ? Reality::Naming.camelize(Reality::Naming.pluralize(attribute.inverse.name)) : Reality::Naming.camelize(attribute.inverse.name) %>", inverseMultiplicity = arez.annotations.Multiplicity.<%= attribute.inverse.multiplicity.to_s.upcase %><% end -%> )
  <%= annotated_type(attribute, :arez, :default, :public => true, :abstract => true) %> <%= getter_prefix(attribute) %><%= attribute.arez.name %>();

  @arez.annotations.ReferenceId
  <%= annotated_type(attribute, :arez, :transport, :assume_generated => true, :public => true, :final => true) %> <%= getter_prefix(attribute) %><%= attribute.arez.name(:transport) %>()
  {
    return _<%= Reality::Naming.camelize(attribute.arez.name(:transport)) %>;
  }
<% else -%>

  @arez.annotations.Reference( load = arez.annotations.LinkType.<%= attribute.arez.lazy? ? 'LAZY' : 'EXPLICIT' %><% if attribute.inverse.arez.traversable? %>, inverseName = "<%= attribute.inverse.multiplicity == :many ? Reality::Naming.camelize(Reality::Naming.pluralize(attribute.inverse.name)) : Reality::Naming.camelize(attribute.inverse.name) %>", inverseMultiplicity = arez.annotations.Multiplicity.<%= attribute.inverse.multiplicity.to_s.upcase %><% end -%> )
  <%= annotated_type(attribute, :arez, :default, :public => true, :abstract => true) %> <%= getter_prefix(attribute) %><%= attribute.arez.name %>();

  @arez.annotations.Observable( initializer = arez.annotations.Feature.ENABLE )
  @arez.annotations.ReferenceId
  <%= annotated_type(attribute, :arez, :transport, :assume_generated => true, :public => true, :abstract => true) %> <%= getter_prefix(attribute) %><%= attribute.arez.name(:transport) %>();

  abstract void set<%= attribute.arez.name(:transport) %>( <%= annotated_type(attribute, :arez, :transport, :assume_generated => true) %> <%= Reality::Naming.camelize(attribute.arez.name(:transport)) %> );
<% end -%>
<% else -%>
<% if attribute.immutable? -%>

<% if attribute.primary_key? -%>
  @arez.annotations.ComponentId
<% end -%>
  <%= annotated_type(attribute, :arez, :default, :assume_generated => true, :public => true, :final => true) %> <%= getter_prefix(attribute) %><%= attribute.arez.name %>()
  {
    return _<%= Reality::Naming.camelize(attribute.arez.name) %>;
  }
<% else -%>

  @arez.annotations.Observable( name = "<%= Reality::Naming.camelize(attribute.arez.name) %>", initializer = arez.annotations.Feature.ENABLE )
  <%= annotated_type(attribute, :arez, :default, :public => true, :abstract => true) %> <%= getter_prefix(attribute) %><%= attribute.arez.name %>();

<% if entity.arez.enable_entity_broker? -%>
  void set<%= attribute.arez.name %>( <%= annotated_type(attribute, :arez, :default, :final => true) %> <%= Reality::Naming.camelize(attribute.arez.name) %> )
  {
    if ( !java.util.Objects.equals( <%= Reality::Naming.camelize(attribute.arez.name) %>, <%= getter_prefix(attribute) %><%= attribute.arez.name %>() ) )
    {
      $set<%= attribute.arez.name %>( <%= Reality::Naming.camelize(attribute.arez.name) %> );
      if( isChangeEmitterEnabled() )
      {
        getChangeEmitter().attributeChanged( this, <%= Reality::Naming.uppercase_constantize( attribute.name ) %>, <%= Reality::Naming.camelize(attribute.arez.name) %> );
      }
    }
  }

  @arez.annotations.Observable( name = "<%= Reality::Naming.camelize(attribute.arez.name) %>" )
  abstract void $set<%= attribute.arez.name %>( <%= annotated_type(attribute, :arez, :default) %> <%= Reality::Naming.camelize(attribute.arez.name) %> );
<% else -%>
  @arez.annotations.Observable( name = "<%= Reality::Naming.camelize(attribute.arez.name) %>" )
  abstract void set<%= attribute.arez.name %>( <%= annotated_type(attribute, :arez, :default) %> <%= Reality::Naming.camelize(attribute.arez.name) %> );
<% end -%>
<% end -%>
<% end -%>
<% end -%>
<% entity.declared_attributes.select{|attribute| attribute.abstract? && attribute.arez? }.each do |attribute|
%>  <%= annotated_type(attribute, :arez, :default, :public => true, :abstract => true) %> <%= getter_prefix(attribute) %><%= attribute.arez.name %>();
<% if attribute.attribute_type == :reference
  %>  abstract <%= attribute.arez.java_type(:transport) %> <%= getter_prefix(attribute) %><%= attribute.arez.name(:transport) %>();
<% end -%>
<% unless attribute.immutable? -%>

    abstract void set<%= attribute.arez.name(:transport) %>( <%= attribute.arez.java_type(:transport) %> value );
<% end -%>
<% end -%>
<% entity.arez.referencing_client_side_attributes.each do |attribute|
        name = attribute.inverse.name
        type = attribute.entity.arez.qualified_name
        if attribute.inverse.multiplicity == :many
          name = Reality::Naming.pluralize(name) -%>

  @arez.annotations.Inverse( name = "<%= Reality::Naming.camelize(name) %>", referenceName = "<%= Reality::Naming.camelize(attribute.name) %>" )
  @javax.annotation.Nonnull
  public abstract java.util.List<<%= type %>> <%= getter_prefix(attribute) %><%= name %>();
<% else -%>

  @arez.annotations.Inverse( name = "<%= Reality::Naming.camelize(name) %>", referenceName = "<%= Reality::Naming.camelize(attribute.name) %>" )
  <%= nullability_annotation(attribute.inverse.multiplicity != :one)  %>
  public abstract <%= type %> <%= getter_prefix(attribute) %><%= name %>();
<% end -%>
<% if entity.arez.enable_entity_broker? -%>

  @arez.annotations.PreInverseRemove( name = "<%= Reality::Naming.camelize(name) %>" )
  final void pre<%= name %>Remove( @javax.annotation.Nonnull final <%= type %> other )
  {
    if( isChangeEmitterEnabled() )
    {
      getChangeEmitter().relatedRemoved( this, <%= Reality::Naming.uppercase_constantize(attribute.inverse.name) %>, other );
    }
  }

  @arez.annotations.PostInverseAdd( name = "<%= Reality::Naming.camelize(name) %>" )
  final void post<%= name %>Add( @javax.annotation.Nonnull final <%= type %> other )
  {
    if( isChangeEmitterEnabled() )
    {
      getChangeEmitter().relatedAdded( this, <%= Reality::Naming.uppercase_constantize(attribute.inverse.name) %>, other );
    }
  }
<% end -%>
<% end -%>

  @javax.annotation.Nonnull
  public <%= entity.arez.name %> self()
  {
    return this;
  }
<% if entity.extends.nil? && entity.arez.enable_entity_broker? -%>

  <%= entity.subtypes.empty? ? 'private' : 'protected final' %> boolean isChangeEmitterEnabled()
  {
    return replicant.Replicant.isChangeBrokerEnabled() && getChangeEmitter().isEnabled();
  }

  @javax.annotation.Nonnull
  <%= entity.subtypes.empty? ? 'private' : 'protected final' %> replicant.EntityChangeEmitter getChangeEmitter()
  {
    assert replicant.Replicant.isChangeBrokerEnabled();
    return replicant.Replicant.context().getChangeEmitter();
  }
<% end -%>
}
