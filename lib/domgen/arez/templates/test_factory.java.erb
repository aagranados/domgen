/* DO NOT EDIT: File is auto-generated */
package <%= to_package(data_module.arez.qualified_test_factory_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc", "PMD.LocalVariableNamingConventions", "PMD.FormalParameterNamingConventions" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "CE_CLASS_ENVY", "PRMC_POSSIBLY_REDUNDANT_METHOD_CALLS" } )
@sting.Injectable
public final class <%= data_module.arez.test_factory_name %>
  implements <%= data_module.arez.qualified_test_factory_extension_name %>
{
  @javax.annotation.Nonnull
  private final <%= data_module.repository.arez.qualified_factory_set_name %> _factorySet;
<% data_module.daos.select{|dao| dao.arez? && !dao.entity.abstract?}.each do |dao| -%>
  @javax.annotation.Nonnull
  private final <%= dao.arez.qualified_repository_name %> _<%= Reality::Naming.camelize(dao.name) %>;
<% end -%>

  <%= data_module.arez.test_factory_name %>( @javax.annotation.Nonnull final <%= data_module.repository.arez.qualified_factory_set_name %> factorySet, <%= data_module.daos.select{|dao| dao.arez? && !dao.entity.abstract?}.collect{|dao| "@javax.annotation.Nonnull final #{dao.arez.qualified_repository_name} #{Reality::Naming.camelize(dao.name)}" }.join(', ') -%>)
  {
    _factorySet = java.util.Objects.requireNonNull( factorySet );
<% data_module.daos.select{|dao| dao.arez? && !dao.entity.abstract?}.each do |dao| -%>
    _<%= Reality::Naming.camelize(dao.name) %> = java.util.Objects.requireNonNull( <%= Reality::Naming.camelize(dao.name) %> );
<% end -%>
  }

  @javax.annotation.Nonnull
  public <%= data_module.arez.test_factory_name %> self()
  {
    return this;
  }

<% data_module.repository.data_modules.select{|dm|dm.arez? && dm.name != data_module.name}.each do |dm| -%>
  @javax.annotation.Nonnull
  <%= dm.arez.qualified_test_factory_name %> <%= Reality::Naming.camelize(dm.name) %>()
  {
    return _factorySet.<%= Reality::Naming.camelize(dm.name) %>();
  }

<% end -%>
<% data_module.entities.select{|e|e.arez?}.each do |entity| -%>
<% if entity.concrete? -%>
  public void delete<%= entity.name %>( @javax.annotation.Nonnull final <%= entity.arez.qualified_name %> $_ )
  {
    <%= Reality::Naming.camelize(entity.dao.name) %>().destroy( $_ );
  }

<% entity.arez.test_create_defaults.each do |defaults| -%>
  @javax.annotation.Nonnull
  public <%= entity.arez.qualified_name %> create<%= entity.name %>( <%= entity.attributes.select{|a| a.arez? && !defaults.has_attribute?(a.name) }.collect{|a| "#{annotated_type(a, :arez, :default, :final => true)} #{Reality::Naming.camelize(a.name)}"}.join(', ') %>)
  {
    return create<%= entity.name %>( <%= entity.attributes.select{|a|a.arez?}.collect {|a| defaults.has_attribute?(a.name) ? defaults.value_for(a.name) : Reality::Naming.camelize(a.name) }.join(', ') %> );
  }

<% end -%>
  @javax.annotation.Nonnull
  public <%= entity.arez.qualified_name %> create<%= entity.name %>( <%= entity.attributes.select{|a| a.arez?}.collect{|a| "#{annotated_type(a, :arez, :default, :final => true)} #{Reality::Naming.camelize(a.name)}"}.join(', ') %>)
  {
<% needsLink = entity.attributes.any?{|a| a.reference?} -%>
<% if needsLink && entity.arez.enable_entity_broker? && entity.imit? -%>
    final replicant.EntityChangeBroker $changeBroker = replicant.Replicant.context().getChangeBroker();
    final replicant.EntityBrokerLock $lock = $changeBroker.isPaused() ? null : $changeBroker.pause();
<% end -%>
<% attributes = entity.attributes.select{|a|a.arez? && a.immutable?} + entity.attributes.select{|a|a.arez? && !a.immutable?} -%>
    <% if needsLink %>final <%= entity.arez.qualified_name %> $_ =<% else %>return<% end %> <%= Reality::Naming.camelize(entity.dao.name) %>().create( <%= attributes.select{|a|a.arez?}.collect do |a|
if a.reference?
  "#{a.nullable? ? "null == #{Reality::Naming.camelize(a.name)} ? null :" : ''}#{Reality::Naming.camelize(a.name) }.get#{a.referenced_entity.primary_key.name}()"
else
    Reality::Naming.camelize(a.name)
  end
end.join(', ') -%> );
<% if needsLink -%>
    arez.Arez.context().safeAction( () -> arez.component.Linkable.link( $_ ), arez.ActionFlags.NO_VERIFY_ACTION_REQUIRED );
<% if entity.imit? && entity.arez.enable_entity_broker? -%>
    if ( null != $lock )
    {
      $lock.release();
    }
<% end -%>
    return $_;
<% end -%>
  }
<% if entity.primary_key.generated_value? && entity.primary_key.integer? -%>

  @javax.annotation.Nonnull
  public <%= entity.arez.qualified_name %> create<%= entity.name %>( <%= entity.attributes.select{|a| !a.primary_key? && a.arez?}.collect{|a| "#{annotated_type(a, :arez, :default, :final => true)} #{Reality::Naming.camelize(a.name)}"}.join(', ') %>)
  {
    return create<%= entity.name %>( <%= entity.attributes.select{|a| a.arez?}.collect{|a| a.primary_key? ? "nextId()" : "#{Reality::Naming.camelize(a.name)}"}.join(', ') %>);
  }
<% end -%>

<% end -%>
<% entity.attributes.select{|a|a.arez? && !a.immutable?}.each do |a| -%>
  public void set<%= a.name %>( @javax.annotation.Nonnull final <%= entity.arez.qualified_name %> $_, <%= annotated_type(a, :arez, :default, :final => true) %> <%= Reality::Naming.camelize(a.name) %> )
  {
<% if a.reference? -%>
    arez.Arez.context().safeAction( () -> $_.set<%= a.referencing_link_name %>( <%= a.nullable? ? "null == #{Reality::Naming.camelize(a.name)} ? null :" : '' %><%= Reality::Naming.camelize(a.name) %>.get<%= a.referenced_entity.primary_key.name %>() ) );
    arez.Arez.context().safeAction( () -> arez.component.Linkable.link( $_ ), arez.ActionFlags.NO_VERIFY_ACTION_REQUIRED );
<% else -%>
    arez.Arez.context().safeAction( () -> $_.set<%= a.name %>( <%= Reality::Naming.camelize(a.name) %> ) );
<% end -%>
  }

<% end -%>
<% end -%>
<% data_module.daos.select{|dao| dao.arez? && !dao.entity.abstract?}.each do |dao| -%>

  @javax.annotation.Nonnull
  public <%= dao.arez.qualified_repository_name %> <%= Reality::Naming.camelize(dao.name) %>()
  {
    return _<%= Reality::Naming.camelize(dao.name) %>;
  }
<% end -%>

  int randomInt()
  {
    return <%= data_module.repository.gwt.qualified_value_util_name %>.randomInt();
  }

  boolean randomBoolean()
  {
    return <%= data_module.repository.gwt.qualified_value_util_name %>.randomBoolean();
  }

  int nextId()
  {
    return <%= data_module.repository.gwt.qualified_value_util_name %>.nextId();
  }

  @javax.annotation.Nonnull
  java.util.Date now()
  {
    return <%= data_module.repository.gwt.qualified_value_util_name %>.now();
  }

  @javax.annotation.Nonnull
  String randomString()
  {
    return <%= data_module.repository.gwt.qualified_value_util_name %>.randomString();
  }

  @javax.annotation.Nonnull
  String randomString( final int stringLength )
  {
    return <%= data_module.repository.gwt.qualified_value_util_name %>.randomString( stringLength );
  }
}
