/* DO NOT EDIT: File is auto-generated */
package <%= to_package(dao.arez.qualified_abstract_dao_name) %>;

@javax.annotation.Generated( "Domgen" )
public abstract class <%= dao.arez.abstract_dao_name %>
  implements <%= dao.arez.qualified_dao_service_name %>
{
  @javax.annotation.Nonnull
  private final org.realityforge.replicant.client.EntityRepository _repository;

  protected <%= dao.arez.abstract_dao_name %>( @javax.annotation.Nonnull final org.realityforge.replicant.client.EntityRepository repository )
  {
    assert null != repository;
    _repository = repository;
  }

  @javax.annotation.Nonnull
  protected org.realityforge.replicant.client.EntityRepository getRepository()
  {
    return _repository;
  }
<% dao.queries.select{|q|q.arez? && q.arez.standard_query?}.each do |query| -%>

  @java.lang.Override
  public <%= query_result_type(query) %> <%= Reality::Naming.camelize(query.name) %>(<%= query.parameters.collect {|p| "#{p.arez.primitive? ? '' : nullability_annotation(p.nullable?)} final #{p.arez.java_type} #{Reality::Naming.camelize(p.name)}"}.join(', ') %> )
  {
<%
  if query.multiplicity == :many && query.parameters.empty?
-%>
    return getRepository().findAll( <%= query_component_result_type(query) %>.class );
<%
  elsif query.multiplicity == :zero_or_one && query.parameters.size == 1 && query.parameters[0].name == query.entity.primary_key.name
-%>
    return getRepository().findByID( <%= query_component_result_type(query) %>.class, <%= Reality::Naming.camelize(query.parameters[0].name) %> );
<%
  elsif query.multiplicity == :one && query.parameters.size == 1 && query.parameters[0].name == query.entity.primary_key.name
-%>
    return getRepository().getByID( <%= query_component_result_type(query) %>.class, <%= Reality::Naming.camelize(query.parameters[0].name) %> );
<%
  elsif query.multiplicity == :zero_or_one
-%>
    return getRepository().findByQuery( <%= query_component_result_type(query) %>.class, e -> <%= lambda_query(query) %> );
<%
  elsif query.multiplicity == :one
-%>
    return getRepository().getByQuery( <%= query_component_result_type(query) %>.class, e -> <%= lambda_query(query) %> );
<%
  elsif query.multiplicity == :many
-%>
    return getRepository().findAllByQuery( <%= query_component_result_type(query) %>.class, e -> <%= lambda_query(query) %> );
<%
  end
-%>
  }
<% end -%>
}
