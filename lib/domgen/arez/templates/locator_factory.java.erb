/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.arez.qualified_locator_factory_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration" } )
public final class <%= repository.arez.locator_factory_name %>
{
  private <%= repository.arez.locator_factory_name %>()
  {
  }
<% daos = repository.data_modules.select{|data_module|data_module.arez?}.collect {|data_module| data_module.entities.select{|entity|entity.arez? && entity.concrete?}.collect{|entity|entity.dao}}.flatten.sort_by{|dao| dao.name} -%>
  @javax.annotation.Nonnull
  public static arez.Locator createLocator( <%= daos.collect{|dao| "@javax.annotation.Nonnull final #{dao.arez.qualified_repository_name} #{Reality::Naming.camelize(dao.qualified_name.gsub('.',''))}"}.join(', ') %> )
  {
    final arez.component.TypeBasedLocator locator = new arez.component.TypeBasedLocator();
<% repository.data_modules.select{|data_module|data_module.arez?}.each do |data_module| -%>
<% data_module.entities.select{|entity|entity.arez? && entity.final?}.each do |entity| -%>
    locator.registerLookup( <%= entity.arez.qualified_name %>.class, id -> <%= Reality::Naming.camelize(entity.dao.qualified_name.gsub('.','')) %>.findBy<%= entity.primary_key.name %>( (<%= annotated_type(entity.primary_key, :arez, :default, :assume_generated => true) %>)id ) );
<% end -%>
<% data_module.entities.select{|entity|entity.arez? && !entity.final?}.each do |entity| -%>
    locator.registerLookup( <%= entity.arez.qualified_name %>.class, id -> find<%= data_module.name %><%= entity.name %>By<%= entity.primary_key.name %>( <%= entity.compatible_concrete_types.collect{|entity| "#{Reality::Naming.camelize(entity.dao.qualified_name.gsub('.',''))}"}.join(', ') %>, (<%= annotated_type(entity.primary_key, :arez, :default, :assume_generated => true) %>) id ) );
<% end -%>
<% end -%>
    return locator;
  }
<% repository.data_modules.select{|data_module|data_module.arez?}.each do |data_module| -%>
<% data_module.entities.select{|entity|entity.arez? && !entity.final?}.each do |entity| -%>

  @javax.annotation.Nullable
  private static <%= entity.arez.qualified_name %> find<%= data_module.name %><%= entity.name %>By<%= entity.primary_key.name %>( <%= entity.compatible_concrete_types.collect{|entity| "@javax.annotation.Nonnull final #{entity.dao.arez.qualified_repository_name} #{Reality::Naming.camelize(entity.dao.qualified_name.gsub('.',''))}"}.join(', ') %>, <%= annotated_type(entity.primary_key, :arez, :default, :final => true, :assume_generated => true) %> id )
  {
    <%= entity.arez.qualified_name %> entity = null;
<% entity.compatible_concrete_types.each do |subtype| -%>
    entity = <%= Reality::Naming.camelize(subtype.dao.qualified_name.gsub('.','')) %>.findBy<%= subtype.primary_key.name %>( id );
    if( null != entity )
    {
      return entity;
    }
<% end -%>
    return null;
  }
<% end -%>
<% end -%>
}
