/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.gwt.qualified_abstract_client_test_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration", "PMD.SystemPrintln" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "PRMC_POSSIBLY_REDUNDANT_METHOD_CALLS", "STT_TOSTRING_STORED_IN_FIELD" } )
@javax.annotation.Generated( "Domgen" )
@arez.testng.ActionWrapper( enable = true )
public abstract class <%= repository.gwt.abstract_client_test_name %>
  extends org.realityforge.guiceyloops.shared.AbstractSharedTest
<% if repository.arez? -%>
  implements arez.testng.ArezTestSupport
<% end -%>
{
  private final java.util.List<java.lang.Runnable> _asyncActions = new java.util.ArrayList<>();
<% repository.gwt.test_factories.each do |short_code, classname| -%>
  @javax.annotation.Nonnull
  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings( "NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR" )
  protected <%= classname %> <%= short_code %>;
<% end -%>

  @org.testng.annotations.BeforeMethod
<% if repository.arez? -%>
  @java.lang.Override
<% end -%>
  public void preTest()
    throws Exception
  {
<% if repository.arez? -%>
    arez.testng.ArezTestSupport.super.preTest();
<% if repository.imit? -%>
    replicant.ReplicantTestUtil.resetConfig( false );
<% if repository.imit.enable_entity_broker? -%>
    replicant.ReplicantTestUtil.enableChangeBroker();
    replicant.ReplicantTestUtil.resetState();
<% end -%>
<% end -%>
<% end -%>
    super.preTest();
<% repository.gwt.test_factories.each do |short_code, classname| -%>
    <%= short_code %> = s( <%= classname %>.class );
<% end -%>
<% if repository.arez? -%>
    arez.Arez.context().registerLocator( s( arez.Locator.class ) );
<% end -%>
  }
<% if repository.arez? -%>

  @org.testng.annotations.AfterMethod
<% if repository.arez? -%>
  @java.lang.Override
<% end -%>
  public void postTest()
  {
<% if repository.arez? -%>
<% if repository.imit? -%>
    replicant.ReplicantTestUtil.resetConfig( false );
<% end -%>
    arez.testng.ArezTestSupport.super.postTest();
<% end -%>
  }
<% end -%>
<% repository.gwt.test_class_contents.each do |content| -%>
<%= content -%>
<% end -%>

  protected final void assertAsyncActionCount( final int count )
  {
    org.testng.Assert.assertEquals( _asyncActions.size(), count );
  }

  protected final void pumpSingleAsyncAction()
  {
    org.testng.Assert.assertTrue( _asyncActions.size() > 1 );
    _asyncActions.remove( 0 ).run();
  }

  protected final void pumpAsyncActions( final int count )
  {
    assertAsyncActionCount( count );
    pumpAllAsyncActions();
  }

  protected final void pumpAllAsyncActions()
  {
    for ( final java.lang.Runnable action : _asyncActions )
    {
      action.run();
    }
    _asyncActions.clear();
  }

  protected final void queueAsyncActions( @javax.annotation.Nonnull final java.lang.Runnable action )
  {
    _asyncActions.add( action );
  }

  @javax.annotation.Nonnull
  protected final <T> org.mockito.stubbing.Answer<Void> successAnswer( @javax.annotation.Nullable final T result )
  {
    return new <%= repository.gwt.qualified_callback_success_answer_name %><>( this::queueAsyncActions, result );
  }

  @javax.annotation.Nonnull
  protected final org.mockito.stubbing.Answer<Void> failureAnswer( @javax.annotation.Nonnull final Throwable error )
  {
    return new <%= repository.gwt.qualified_callback_failure_answer_name %><>( this::queueAsyncActions, error );
  }
}
