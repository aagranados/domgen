/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.gwt.qualified_callback_success_answer_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
public final class <%= repository.gwt.callback_success_answer_name %><T>
  implements org.mockito.stubbing.Answer<Void>
{
  @javax.annotation.Nonnull
  private final java.util.function.Consumer<arez.SafeProcedure> _invoker;
  @javax.annotation.Nullable
  private final T _result;

  public <%= repository.gwt.callback_success_answer_name %>( @javax.annotation.Nullable final T result )
  {
    this( arez.SafeProcedure::call, result );
  }

  public <%= repository.gwt.callback_success_answer_name %>( @javax.annotation.Nonnull final java.util.function.Consumer<arez.SafeProcedure> invoker, @javax.annotation.Nullable final T result )
  {
    _invoker = java.util.Objects.requireNonNull( invoker );
    _result = result;
  }

  @SuppressWarnings( "unchecked" )
  @Override
  public Void answer( @javax.annotation.Nonnull final org.mockito.invocation.InvocationOnMock invocation )
  {
    for ( final Object argument : invocation.getArguments() )
    {
      if ( argument instanceof <%= repository.gwt.qualified_async_callback_name %> )
      {
        _invoker.accept( () -> ( (<%= repository.gwt.qualified_async_callback_name %><T>) argument ).onSuccess( _result ) );
      }
    }
    return null;
  }
}
