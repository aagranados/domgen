/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.gwt.qualified_abstract_application_name) %>;

@javax.annotation.Generated( "Domgen" )
@SuppressWarnings( { "PMD.ConstructorCallsOverridableMethod" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "STT_STRING_PARSING_A_FIELD", "PRMC_POSSIBLY_REDUNDANT_METHOD_CALLS", "PCOA_PARTIALLY_CONSTRUCTED_OBJECT_ACCESS" } )
public abstract class <%= repository.gwt.abstract_application_name %><I extends <%= repository.gwt.qualified_abstract_dagger_component_name %>>
{
<% if repository.keycloak? -%>
  private final org.realityforge.gwt.keycloak.Keycloak _keycloak;
<% end -%>
  private final String _serverUrl;

  protected <%= repository.gwt.abstract_application_name %>(<% if repository.keycloak? -%> @javax.annotation.Nonnull final String keycloakClient <% end -%>)
  {
    final String applicationURL = com.google.gwt.core.client.GWT.getModuleBaseURL();
    _serverUrl = applicationURL.substring( 0, applicationURL.indexOf( '/', applicationURL.indexOf( "://" ) + 3 ) );
<% if repository.keycloak? -%>
    _keycloak = new org.realityforge.gwt.keycloak.Keycloak( keycloakClient, applicationURL + ".keycloak/" + keycloakClient + "/keycloak.json" );
    _keycloak.setListener( newKeycloakListener() );
<% end -%>
  }

  public String getServerUrl()
  {
    return _serverUrl;
  }

  @javax.annotation.Nullable
  protected abstract I getInjector();

  @javax.annotation.Nonnull
  protected final I ensureInjector()
  {
    final I injector = getInjector();
    assert null != injector;
    return injector;
  }

  public void init()
  {
<% if repository.gwt_rpc? -%>
    initGwtRpcServices();
<% end -%>
<% if repository.keycloak? -%>
    getKeycloak().init();
<% else -%>
    start();
<% end -%>
  }

  public void start()
  {
    preStart();
<% if repository.arez? -%>
    setupArezLocator();
<% end -%>
<% if repository.appcache? -%>
    setupAppCache();
<% end -%>
<% if repository.keycloak? && repository.imit? -%>
    setupReplicantToken();
<% end -%>
    setupUncaughtExceptionHandler();
    prepareServices();
    prepareUI();
    postStart();
  }

  private void setupUncaughtExceptionHandler()
  {
    com.google.gwt.core.client.GWT.setUncaughtExceptionHandler( new com.google.gwt.core.client.GWT.UncaughtExceptionHandler()
    {
      @Override
      public void onUncaughtException( final Throwable e )
      {
        <%= repository.gwt.abstract_application_name %>.this.onUncaughtException( e );
      }
    } );
  }
<% if repository.arez? -%>

  private void setupArezLocator()
  {
    arez.Arez.context().registerLocator( ensureInjector().getLocator() );
  }
<% end -%>
<% if repository.appcache? -%>

  private void setupAppCache()
  {
    if ( null != elemental2.dom.DomGlobal.applicationCache && elemental2.dom.DomGlobal.document.getElementsByTagName( "html" ).item( 0 ).hasAttribute( "manifest" ) )
    {
      elemental2.dom.DomGlobal.applicationCache.addEventListener( "updateready", e -> {
          if ( elemental2.dom.DomGlobal.applicationCache.status != elemental2.dom.ApplicationCache.UNCACHED &&
               elemental2.dom.DomGlobal.applicationCache.status != elemental2.dom.ApplicationCache.CHECKING &&
               elemental2.dom.DomGlobal.applicationCache.status != elemental2.dom.ApplicationCache.DOWNLOADING )
          {
            elemental2.dom.DomGlobal.applicationCache.swapCache();
          }
          onAppcacheUpdateReadyEvent();
      } );
      if ( elemental2.dom.DomGlobal.applicationCache.status != elemental2.dom.ApplicationCache.UNCACHED &&
           elemental2.dom.DomGlobal.applicationCache.status != elemental2.dom.ApplicationCache.CHECKING &&
           elemental2.dom.DomGlobal.applicationCache.status != elemental2.dom.ApplicationCache.DOWNLOADING )
      {
        elemental2.dom.DomGlobal.applicationCache.update();
      }
    }
  }

  protected abstract void onAppcacheUpdateReadyEvent();
<% end -%>

  protected abstract void postStart();

  protected abstract void preStart();

  protected void prepareServices()
  {
<% if repository.imit? -%>
    replicant.WebStorageCacheService.install();
    elemental2.dom.DomGlobal.window.addEventListener( "pagehide", e -> replicant.Replicant.context().deactivate(), true );
<% end -%>
  }

  protected abstract void prepareUI();

  protected void onUncaughtException( @javax.annotation.Nonnull final Throwable e )
  {
    if( <%= repository.gwt.qualified_debug_config_name %>.EMIT_RAW_UNCAUGHT_EXCEPTIONS && com.google.gwt.core.client.GWT.isScript() && com.google.gwt.core.client.GWT.isProdMode() )
    {
      logThrowable( e  );
    }
<% if repository.iris_audit? -%>
    final iris.audit.client.ClientExceptionAuditHelper helper = getClientExceptionAuditHelper();
    if ( null != helper )
    {
      helper.auditClientException( e, e.getMessage() );
    }
<% end -%>
  }
<% if repository.gwt_rpc? -%>

  protected void initGwtRpcServices()
  {
<% if repository.keycloak? -%>
    <%= repository.gwt_rpc.qualified_rpc_services_dagger_module_name %>.setKeycloak( getKeycloak() );
<% end -%>
    <%= repository.gwt_rpc.qualified_rpc_services_dagger_module_name %>.setBaseURL( com.google.gwt.core.client.GWT.getModuleBaseURL() );
<% if repository.iris_audit? -%>
    iris.audit.client.ioc.AuditGwtRpcServicesDaggerModule.setBaseURL( com.google.gwt.core.client.GWT.getModuleBaseURL() );
<% if repository.keycloak? -%>
    iris.audit.client.ioc.AuditGwtRpcServicesDaggerModule.setKeycloak( getKeycloak() );
<% end -%>
<% end -%>
<% if repository.imit? -%>
<% repository.imit.remote_datasources.select{|ds| ds.gwt_rpc_enabled? }.each do |ds| -%>
    <%= ds.base_package %>.client.ioc.<%= ds.name %>GwtRpcServicesDaggerModule.setBaseURL( getServerUrl() + "/<%= Reality::Naming.underscore(ds.name) %>/" );
<% if repository.keycloak? && ds.keycloak_enabled? -%>
    <%= ds.base_package %>.client.ioc.<%= ds.name %>GwtRpcServicesDaggerModule.setKeycloak( getKeycloak() );
<% end -%>
<% end -%>
<% end -%>
<% if repository.berk? -%>
    iris.berk.client.ioc.BerkGwtRpcServicesDaggerModule.setBaseURL( com.google.gwt.core.client.GWT.getModuleBaseURL() );
<% if repository.keycloak? -%>
    iris.berk.client.ioc.BerkGwtRpcServicesDaggerModule.setKeycloak( getKeycloak() );
<% end -%>
<% end -%>
  }
<% end -%>
<% if repository.iris_audit? -%>

  @javax.annotation.Nullable
  protected final iris.audit.client.ClientExceptionAuditHelper getClientExceptionAuditHelper()
  {
    final I injector = getInjector();
    return null != injector ? injector.getClientExceptionAuditHelper() : null;
  }
<% end -%>

  @javax.annotation.Nonnull
  protected java.util.Collection<Throwable> unwrapThrowable( @javax.annotation.Nonnull final Throwable e )
  {
    return java.util.Collections.emptyList();
  }

  protected boolean shouldLogThrowableToConsole( @javax.annotation.Nonnull final Throwable e )
  {
    return true;
  }

  private void logThrowable( @javax.annotation.Nonnull final Throwable e )
  {
    if ( shouldLogThrowableToConsole( e ) )
    {
      elemental2.dom.DomGlobal.console.error( jsinterop.base.Js.asPropertyMap( e ).nestedGet( "backingJsObject.stack" ) );
      final Throwable cause = e.getCause();
      if ( null != cause )
      {
        elemental2.dom.DomGlobal.console.groupCollapsed( "Caused By" );
        logThrowable( cause );
        elemental2.dom.DomGlobal.console.groupEnd();
      }
    }
    unwrapThrowable( e ).forEach( this::logThrowable );
  }
<% if repository.keycloak? -%>

<% if repository.imit? -%>
  private void updateReplicantToken()
  {
    replicant.Replicant.context().setAuthToken( getKeycloak().getToken() );
  }

  private void setupReplicantToken()
  {
    updateReplicantToken();
    elemental2.dom.DomGlobal.setInterval( e -> getKeycloak().updateToken( 30, this::updateReplicantToken ), 5000 );
  }

<% end -%>
  @javax.annotation.Nonnull
  public org.realityforge.gwt.keycloak.Keycloak getKeycloak()
  {
    return _keycloak;
  }

  @javax.annotation.Nonnull
  protected org.realityforge.gwt.keycloak.KeycloakListener newKeycloakListener()
  {
    return new ApplicationKeycloakListener();
  }

  protected class ApplicationKeycloakListener
    extends org.realityforge.gwt.keycloak.cache.TokenCachingListener
  {
    @Override
    public void onReady( @javax.annotation.Nonnull final org.realityforge.gwt.keycloak.Keycloak keycloak, final boolean authenticated )
    {
      super.onReady( keycloak, authenticated );
      if ( authenticated )
      {
        start();
      }
      else
      {
        keycloak.login();
      }
    }
  }
<% end -%>
}
