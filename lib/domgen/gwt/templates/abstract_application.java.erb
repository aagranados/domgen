/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.gwt.qualified_abstract_application_name) %>;

@javax.annotation.Generated( "Domgen" )
@SuppressWarnings( { "PMD.ConstructorCallsOverridableMethod" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "STT_STRING_PARSING_A_FIELD", "PRMC_POSSIBLY_REDUNDANT_METHOD_CALLS", "PCOA_PARTIALLY_CONSTRUCTED_OBJECT_ACCESS", "ACEM_ABSTRACT_CLASS_EMPTY_METHODS" } )
public abstract class <%= repository.gwt.abstract_application_name %><I extends <%= repository.gwt.qualified_abstract_sting_injector_name %>>
{
<% if repository.keycloak? -%>
  private final org.realityforge.gwt.keycloak.Keycloak _keycloak;
<% end -%>

  protected <%= repository.gwt.abstract_application_name %>(<% if repository.keycloak? -%> @javax.annotation.Nonnull final String keycloakClient <% end -%>)
  {
<% if repository.keycloak? -%>
    _keycloak = new org.realityforge.gwt.keycloak.Keycloak( keycloakClient, com.google.gwt.core.client.GWT.getHostPageBaseURL() + ".keycloak/" + keycloakClient + "/keycloak.json" );
    _keycloak.addKeycloakListener( new org.realityforge.gwt.keycloak.cache.TokenCachingListener() );
    _keycloak.addKeycloakListener( newKeycloakListener() );
<% end -%>
  }

  @javax.annotation.Nullable
  protected abstract I getInjector();

  @javax.annotation.Nonnull
  protected final I ensureInjector()
  {
    final I injector = getInjector();
    assert null != injector;
    return injector;
  }

  public void init()
  {
<% if repository.keycloak? -%>
    getKeycloak().init();
<% else -%>
    start();
<% end -%>
  }

  public void start()
  {
<% if repository.serviceworker? -%>
    setupServiceWorker();
<% end -%>
<% if repository.appcache? -%>
    setupAppCache();
<% end -%>
<% if repository.imit? -%>
    prepareReplicant();
<% end -%>
    setupUncaughtExceptionHandler();
    performStart();
  }

  protected final void postInjetorSetup()
  {
<% if repository.arez? -%>
    registerArezLocator();
<% end -%>
<% if repository.imit? -%>
    registerReplicantConnector();
<% end -%>
  }

  private void setupUncaughtExceptionHandler()
  {
    com.google.gwt.core.client.GWT.setUncaughtExceptionHandler( new com.google.gwt.core.client.GWT.UncaughtExceptionHandler()
    {
      @Override
      public void onUncaughtException( final Throwable e )
      {
        <%= repository.gwt.abstract_application_name %>.this.onUncaughtException( e );
      }
    } );
  }
<% if repository.arez? -%>

  private void registerArezLocator()
  {
    arez.Arez.context().registerLocator( ensureInjector().getLocator() );
  }
<% end -%>
<% if repository.serviceworker? -%>

  private void setupServiceWorker()
  {
    if ( null != elemental2.dom.DomGlobal.navigator.serviceWorker && com.google.gwt.core.client.GWT.getModuleBaseForStaticFiles().equals( com.google.gwt.core.client.GWT.getModuleBaseURL() ) )
    {
      elemental2.dom.DomGlobal.navigator.serviceWorker
        .register( com.google.gwt.core.client.GWT.getModuleBaseForStaticFiles() + com.google.gwt.core.client.GWT.getModuleName() + "-sw.js" )
        .then( registration -> {
          elemental2.dom.DomGlobal.console.log( "ServiceWorker registration successful with scope: " + registration.getScope() );

          // Every minute attempt to update the serviceWorker. If it does update
          // then the "controllerchange" event will fire.
          elemental2.dom.DomGlobal.setInterval( v -> registration.update(), 60000 );
          return null;
        }, error -> {
          elemental2.dom.DomGlobal.console.log( "ServiceWorker registration failed: ", error );
          return null;
        } );
      elemental2.dom.DomGlobal.navigator.serviceWorker.addEventListener( "controllerchange", e -> {
        // This fires when the service worker controlling this page
        // changes, eg a new worker has skipped waiting and become
        // the new active worker.
        elemental2.dom.DomGlobal.console.log( "ServiceWorker updated ", e );
        onServiceWorkerUpdateReady();
      } );
    }
  }

  protected abstract void onServiceWorkerUpdateReady();
<% end -%>
<% if repository.appcache? -%>

  private void setupAppCache()
  {
    if ( null != elemental2.dom.DomGlobal.applicationCache && elemental2.dom.DomGlobal.document.getElementsByTagName( "html" ).item( 0 ).hasAttribute( "manifest" ) )
    {
      elemental2.dom.DomGlobal.applicationCache.addEventListener( "updateready", e -> {
          if ( elemental2.dom.DomGlobal.applicationCache.status != elemental2.dom.ApplicationCache.UNCACHED &&
               elemental2.dom.DomGlobal.applicationCache.status != elemental2.dom.ApplicationCache.CHECKING &&
               elemental2.dom.DomGlobal.applicationCache.status != elemental2.dom.ApplicationCache.DOWNLOADING )
          {
            elemental2.dom.DomGlobal.applicationCache.swapCache();
          }
          onAppcacheUpdateReadyEvent();
      } );
      if ( elemental2.dom.DomGlobal.applicationCache.status != elemental2.dom.ApplicationCache.UNCACHED &&
           elemental2.dom.DomGlobal.applicationCache.status != elemental2.dom.ApplicationCache.CHECKING &&
           elemental2.dom.DomGlobal.applicationCache.status != elemental2.dom.ApplicationCache.DOWNLOADING )
      {
        elemental2.dom.DomGlobal.applicationCache.update();
      }
    }
  }

  protected abstract void onAppcacheUpdateReadyEvent();
<% end -%>

  protected abstract void performStart();

  protected void onUncaughtException( @javax.annotation.Nonnull final Throwable e )
  {
    if( org.realityforge.braincheck.BrainCheckConfig.checkInvariants() && com.google.gwt.core.client.GWT.isScript() && com.google.gwt.core.client.GWT.isProdMode() )
    {
      logThrowable( e  );
    }
<% if repository.iris_audit? -%>
    final iris.audit.client.ClientExceptionAuditHelper helper = getClientExceptionAuditHelper();
    if ( null != helper )
    {
      helper.auditClientException( e, e.getMessage() );
    }
<% end -%>
  }
<% if repository.iris_audit? -%>

  @javax.annotation.Nullable
  protected final iris.audit.client.ClientExceptionAuditHelper getClientExceptionAuditHelper()
  {
    final I injector = getInjector();
    return null != injector ? injector.getClientExceptionAuditHelper() : null;
  }
<% end -%>

  @javax.annotation.Nonnull
  protected java.util.Collection<Throwable> unwrapThrowable( @javax.annotation.Nonnull final Throwable e )
  {
    return java.util.Collections.emptyList();
  }

  protected boolean shouldLogThrowableToConsole( @javax.annotation.Nonnull final Throwable e )
  {
    return true;
  }

  private void logThrowable( @javax.annotation.Nonnull final Throwable e )
  {
    if ( shouldLogThrowableToConsole( e ) )
    {
      elemental2.dom.DomGlobal.console.error( jsinterop.base.Js.asPropertyMap( e ).nestedGet( "backingJsObject.stack" ) );
      final Throwable cause = e.getCause();
      if ( null != cause )
      {
        elemental2.dom.DomGlobal.console.groupCollapsed( "Caused By" );
        logThrowable( cause );
        elemental2.dom.DomGlobal.console.groupEnd();
      }
    }
    unwrapThrowable( e ).forEach( this::logThrowable );
  }
<% if repository.keycloak? -%>

  @javax.annotation.Nonnull
  public org.realityforge.gwt.keycloak.Keycloak getKeycloak()
  {
    return _keycloak;
  }

  @javax.annotation.Nonnull
  protected org.realityforge.gwt.keycloak.KeycloakListener newKeycloakListener()
  {
    return new ApplicationKeycloakListener();
  }

  protected class ApplicationKeycloakListener
    extends org.realityforge.gwt.keycloak.KeycloakListenerAdapter
  {
    @Override
    public void onReady( @javax.annotation.Nonnull final org.realityforge.gwt.keycloak.Keycloak keycloak, final boolean authenticated )
    {
      if ( authenticated )
      {
        start();
      }
      else
      {
        keycloak.login();
      }
    }
  }
<% end -%>
<% if repository.imit? -%>
<% if repository.keycloak? -%>

  private void updateReplicantToken()
  {
    replicant.Replicant.context().setAuthToken( getKeycloak().getToken() );
  }

<% end -%>
  private void registerReplicantConnector()
  {
    final replicant.WebSocketConfig config = replicant.WebSocketConfig.create( com.google.gwt.core.client.GWT.getHostPageBaseURL() + "api", getKeycloak() );
    replicant.Replicant.context().registerConnector( ensureInjector().getSystemSchema(), new replicant.WebSocketTransport( config ) );
  }

  private void prepareReplicant()
  {
    replicant.WebStorageCacheService.install();
    elemental2.dom.DomGlobal.window.addEventListener( "beforeunload", e -> replicant.Replicant.context().deactivate(), true );
<% if repository.keycloak? -%>
    updateReplicantToken();
    elemental2.dom.DomGlobal.setInterval( e -> getKeycloak().updateToken( 30, this::updateReplicantToken ), 5000 );
<% end -%>
  }
<% end -%>
}
