/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.gwt.qualified_callback_failure_answer_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
public final class <%= repository.gwt.callback_failure_answer_name %><T>
  implements org.mockito.stubbing.Answer<Void>
{
  @javax.annotation.Nonnull
  private final java.util.function.Consumer<arez.SafeProcedure> _invoker;
  @javax.annotation.Nonnull
  private final Throwable _throwable;

  public <%= repository.gwt.callback_failure_answer_name %>( @javax.annotation.Nonnull final Throwable throwable )
  {
    this( arez.SafeProcedure::call, throwable );
  }

  public <%= repository.gwt.callback_failure_answer_name %>( @javax.annotation.Nonnull final java.util.function.Consumer<arez.SafeProcedure> invoker, @javax.annotation.Nonnull final Throwable throwable )
  {
    _invoker = java.util.Objects.requireNonNull( invoker );
    _throwable = java.util.Objects.requireNonNull( throwable );
  }

  @Override
  public Void answer( @javax.annotation.Nonnull final org.mockito.invocation.InvocationOnMock invocation )
  {
    for ( final Object argument : invocation.getArguments() )
    {
      if ( argument instanceof <%= repository.gwt.qualified_async_error_callback_name %> )
      {
        _invoker.accept( () -> ( (<%= repository.gwt.qualified_async_error_callback_name %>) argument ).onFailure( _throwable ) );
      }
    }
    return null;
  }
}
