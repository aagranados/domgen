/* DO NOT EDIT: File is auto-generated */
package <%= to_package(struct.gwt.qualified_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc", "unchecked", "PMD.IfStmtsMustUseBraces", "PMD.IfElseStmtsMustUseBraces", "PMD.UnnecessaryLocalBeforeReturn", "PMD.UseUtilityClass", "PMD.OptimizableToArrayCall" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "STT_TOSTRING_STORED_IN_FIELD" } )
@jsinterop.annotations.JsType( isNative = true, namespace = jsinterop.annotations.JsPackage.GLOBAL, name = "Object" )
public final class <%= struct.gwt.name %>
{
<% struct.fields.each do |field| -%>
<% if field.nullable? -%>
  @javax.annotation.Nullable
<% elsif !field.datetime? && !field.gwt.primitive?(:transport) -%>
  @javax.annotation.Nonnull
<% end -%>
  private <%= characteristic_transport_type(field) %> <%= field.json.name %>;
<% end -%>

  @jsinterop.annotations.JsOverlay
  public static <%= struct.gwt.name %> create( <%= struct.fields.collect {|field| "#{annotated_type(field, :gwt, :boundary, :final => true) } #{Reality::Naming.camelize(field.name)}" }.join(', ') %> )
  {
    final <%= struct.gwt.name %> $$element$$ = new <%= struct.gwt.name %>();
<% struct.fields.each do |field| -%>
<%
  singular_converted_value = Proc.new do |var|
    case
      when field.date? then "#{var}.toString()"
      when field.datetime? then "(double) #{var}.getTime()"
      when field.enumeration? then "#{var}.#{field.enumeration.textual_values? ? 'name()' : 'ordinal()' }"
      when field.nullable? && field.integer? then "#{var}.doubleValue()"
      when field.nullable? && field.boolean? then "#{var}.booleanValue()"
      when field.nullable? && field.real? then "#{var}.doubleValue()"
      when field.nullable? && field.long? then "#{var}.doubleValue()"
      else nil
    end
  end
  if field.collection?
    converted_value = Proc.new do |var|
      scv = singular_converted_value.call('e')
      if scv
        "#{var}.stream().map( e -> #{scv} ).toArray( size -> new #{collection_transport_type(field, ' size ')} )"
      else
        "#{var}.toArray( new #{collection_transport_type(field, '0')} )"
      end
    end
  else
    converted_value = singular_converted_value
  end

  cv = converted_value.call(Reality::Naming.camelize(field.name))
-%>
    $$element$$.<%= field.json.name %> = <%= !cv.nil? && field.nullable? ? "null == #{Reality::Naming.camelize(field.name)} ? null : " : '' %><%= cv.nil? ? Reality::Naming.camelize(field.name) : cv %>;
<% end -%>
    return $$element$$;
  }
<% struct.fields.select{|field| field.gwt?}.each do |field| -%>

  @jsinterop.annotations.JsOverlay
  <%= annotated_type(field, :gwt, :boundary, :public => true) %> <%= getter_prefix(field) %><%= field.name %>()
  {
<%-
  if field.collection?
    conversion_rule =
      case
        when field.date? then Proc.new {|transport_value| "#{repository.gwt.qualified_rdate_name}.parse( #{transport_value} )"}
        when field.datetime? then Proc.new {|transport_value| "new java.util.Date( (long) #{transport_value} )"}
        when field.enumeration? then Proc.new {|transport_value| "#{field.gwt.java_component_type}.#{field.enumeration.textual_values? ? "valueOf( #{transport_value} )" : "values()[ #{field.nullable? ? "#{transport_value}.intValue()" : transport_value} ]"}"}
        else nil
      end
-%>
    return <% if field.nullable? -%>this.<%= field.json.name %> == null ? null : <% end -%><% if field.struct.data_module.arez? %>arez.component.CollectionsUtil.as<%= field.collection_type == :set ? 'Set' : 'List' %>( <% end %>java.util.Arrays.stream( this.<%= field.json.name %> )<%= conversion_rule.nil? ? '' : ".map( e -> #{conversion_rule.call('e')} )" %><% if field.struct.data_module.arez? %> )<% else %>.collect( java.util.stream.Collectors.toList() )<% end %>;
<% elsif field.nullable? && field.datetime? -%>
    return null == this.<%= field.json.name %> ? null : new java.util.Date( this.<%= field.json.name %>.longValue() );
<% elsif field.datetime? -%>
    return new java.util.Date( (long) this.<%= field.json.name %> );
<% elsif field.date? -%>
    return <% if field.nullable? -%>this.<%= field.json.name %> == null ? null : <% end -%><%= struct.data_module.repository.gwt.qualified_rdate_name %>.parse( this.<%= field.json.name %> );
<% elsif field.enumeration? -%>
    return <% if field.nullable? -%>this.<%= field.json.name %> == null ? null : <% end -%><%= field.gwt.java_type %>.<%= field.enumeration.textual_values? ? "valueOf( this.#{field.json.name} )" : "values()[ #{field.nullable? ? "#{field.json.name}.intValue()" : field.json.name} ]" %>;
<% elsif field.struct? || field.text? || field.real? || field.boolean? || (field.integer? && !field.nullable?) -%>
    return this.<%= field.json.name %>;
<% elsif field.integer? && field.nullable? -%>
    return <% if field.nullable? -%>this.<%= field.json.name %> == null ? null : <% end -%>this.<%= field.json.name %>.intValue();
<% elsif field.long? -%>
    return <% if field.nullable? -%>this.<%= field.json.name %> == null ? null : <% end -%>this.<%= field.json.name %>.longValue();
<% end -%>
  }
<% end -%>
}
