/* DO NOT EDIT: File is autogenerated */
package <%= object_type.data_module.java.package %>;

@javax.annotation.Generated( "Domgen" )
@SuppressWarnings( { "UnusedDeclaration" } )
<% if not object_type.jpa.queries.empty? %>@javax.persistence.NamedQueries( value = {
<%= object_type.jpa.queries.collect { |q| "  @javax.persistence.NamedQuery( name = \"#{q.fully_qualified_name}\", query = \"#{q.query_string}\" )" }.join(",\n") %>
} )<% end %>
@javax.persistence.Access( javax.persistence.AccessType.FIELD )
@javax.persistence.Entity(name = "<%= object_type.name %>")<% if !object_type.abstract? %>
@javax.persistence.Table( name = "<%= object_type.sql.table_name %>",
        schema = "<%= object_type.data_module.sql.schema %>",
        uniqueConstraints = {<%=
  object_type.attributes.select{|a|a.unique?}.collect{|a|
  "@javax.persistence.UniqueConstraint( columnNames = {\"#{a.sql.column_name}\"})"
  }.join(",\n        ")
%>})<%
else %>
@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.TABLE_PER_CLASS)<%
end
%>
public <%= object_type.abstract? ? "abstract " : "" %>class <%= object_type.java.classname%>
<%= object_type.extends ?
  "    extends #{object_type.data_module.object_type_by_name(object_type.extends).java.classname}\n" :
  "" %>{
<% object_type.declared_attributes.select {|a| a.attribute_type == :i_enum || a.attribute_type == :s_enum }.each do |attribute| %>
  @SuppressWarnings( { "PublicInnerClass" } )
  public static enum <%= attribute.java.field_name %>Value
  {
    <%= attribute.values.collect {|k,v| "#{k}" } .join(",\n    ")%>
  }
<% end %>
<% object_type.declared_attributes.select { |a| !a.abstract? }.each do |attribute| %>
<%= j_jpa_field_attributes(attribute) %>
  private <%= attribute.java.java_type %> <%= attribute.java.field_name %>;
<% end %>
<% object_type.referencing_attributes.
  select { |attribute| !(attribute.abstract? || attribute.inherited? || attribute.inverse_relationship_type == :none) }.
  each do |attribute| %>
<%= j_declared_relation(attribute) %>
<% end %>
<%= j_declared_attribute_and_relation_accessors(object_type) %>
<%= j_equals_method(object_type) %>
<%= j_to_string_methods(object_type) %>
}
