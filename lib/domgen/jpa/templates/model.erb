/* DO NOT EDIT: File is auto-generated */
package <%= object_type.data_module.jpa.entity_package %>;

<%= description_javadoc_for(object_type, "") %>@javax.annotation.Generated( "Domgen" )
@SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
<% if not object_type.jpa.queries.empty? %>@javax.persistence.NamedQueries( value = {
<%= object_type.jpa.queries.collect { |q| "  @javax.persistence.NamedQuery( name = #{object_type.jpa.entity_name}.#{q.local_name}, query = \"#{q.query_string}\" )" }.join(",\n") %>
} )<% end %>
@javax.persistence.Access( javax.persistence.AccessType.FIELD )
@javax.persistence.Entity( name = "<%= object_type.qualified_name %>" )<% if !object_type.abstract? %>
@javax.persistence.Table( name = "<%= object_type.jpa.table_name %>",
        schema = "<%= object_type.data_module.sql.schema %>",
        uniqueConstraints = {<%=
  object_type.attributes.select{|a|a.unique?}.collect{|a|
  "@javax.persistence.UniqueConstraint( columnNames = {\"#{a.sql.column_name}\"})"
  }.join(",\n        ")
%>})<%
else %>
@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.TABLE_PER_CLASS)<%
end
%>
public <%= object_type.abstract? ? "abstract " : "" %>class <%= object_type.jpa.entity_name %>
<%= object_type.extends ?
  "    extends #{object_type.data_module.object_type_by_name(object_type.extends).jpa.qualified_entity_name}\n" :
  "" %>    implements java.io.Serializable
{
<% object_type.jpa.queries.each do |query| %><%= description_javadoc_for(query) %>  public static final String <%= query.local_name %> = "<%= query.qualified_name %>";
<%
  end
  object_type.declared_attributes.select {|a| a.enum? }.each do |attribute|
  Domgen.error("JPA requires i_enum #{attribute.name} be 0 based") if attribute.attribute_type == :i_enum && 0 != attribute.values.values.sort.first
%>
  @SuppressWarnings( { "PublicInnerClass" } )
  public static enum <%= attribute.jpa.name %>Value
  {
    <%= attribute.values.keys.collect {|k| "#{k}" } .join(",\n    ")%>
  }
<% end
   object_type.declared_attributes.select { |a| !a.abstract? && a.jpa.persistent? }.each do |attribute| %>
<%= j_jpa_field_attributes(attribute) -%>  private <%= attribute.jpa.java_type %> <%= attribute.jpa.name %>;
<% end %>
<% object_type.referencing_attributes.
  select { |attribute| !(attribute.abstract? || attribute.inherited?) && attribute.inverse.traversable? }.
  each do |attribute| %><%= j_declared_relation(attribute) %>
<% end %>
<%= j_constructors(object_type) %>
<%= j_declared_attribute_and_relation_accessors(object_type) %>
<%= j_equals_method(object_type) %>
<%= j_to_string_methods(object_type) %>}
