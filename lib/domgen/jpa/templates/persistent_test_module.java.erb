/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.jpa.qualified_persistent_test_module_name) %>;

/**
 * A PersistenceTestModule used to test <%= repository.name %> entities.
 */
@SuppressWarnings( "PMD.UseUtilityClass" )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( "LUI_USE_SINGLETON_LIST" )
public class <%= repository.jpa.persistent_test_module_name %>
  extends org.realityforge.guiceyloops.server.PersistenceTestModule
{
<%
    tables = repository.data_modules.collect do |data_module|
      data_module.entities.select{|e| e.concrete? && e.sql? && !e.sql.load_from_fixture? && !e.sql.sequence_table?}.collect do |entity|
        "\"#{entity.sql.qualified_table_name.gsub('"',"\\\"")}\""
      end
    end.flatten.reverse.join(', ')

  entities_to_reset = []
  repository.data_modules.select{|data_module| data_module.sync?}.each do |data_module|
    data_module.entities.select{|entity| entity.sync? && entity.sync.core?}.each do |entity|
      entities_to_reset << entity if entity.attributes.all?{|a|((a.immutable? || a.generated_value?) && a.jpa? && a.jpa.persistent?) || %w(MasterId CreatedAt DeletedAt).include?(a.name.to_s)}
    end
  end
  pre_clean_sql = entities_to_reset.collect{|e| "\"UPDATE #{e.sync.master_entity.sql.qualified_table_name} SET MasterSynchronized = 0\""}.join(', ')
-%>
  @javax.annotation.Nonnull
  private static final String[] TABLES_TO_CLEAN = new String[] {<%= tables %>};
  @javax.annotation.Nonnull
  private static final String[] PRE_CLEAN_SQL = new String[] {<%= pre_clean_sql %>};

  public <%= repository.jpa.persistent_test_module_name %>()
  {
    this( null );
  }

  public <%= repository.jpa.persistent_test_module_name %>( @javax.annotation.Nullable final String databasePrefix )
  {
    this( databasePrefix, null );
  }

  public <%= repository.jpa.persistent_test_module_name %>( @javax.annotation.Nullable final String databasePrefix, @javax.annotation.Nullable final java.util.Properties additionalProperties )
  {
    this( true, databasePrefix, mergeProperties( additionalProperties ) );
  }

  public <%= repository.jpa.persistent_test_module_name %>( final boolean cleanTables )
  {
    this( cleanTables, null );
  }

  public <%= repository.jpa.persistent_test_module_name %>( final boolean cleanTables, @javax.annotation.Nullable final String databasePrefix )
  {
    this( cleanTables, databasePrefix, null );
  }

  public <%= repository.jpa.persistent_test_module_name %>( final boolean cleanTables, @javax.annotation.Nullable final String databasePrefix, @javax.annotation.Nullable final java.util.Properties additionalProperties )
  {
    super( <%= repository.jpa.qualified_unit_descriptor_name %>.NAME, cleanTables ? PRE_CLEAN_SQL : new String[ 0 ], new String[ 0 ], cleanTables ? TABLES_TO_CLEAN : new String[ 0 ], databasePrefix, mergeProperties( additionalProperties ) );
  }

  @java.lang.SuppressWarnings( "JavaExistingMethodCanBeUsed" )
  @javax.annotation.Nonnull
  private static java.util.Properties mergeProperties( @javax.annotation.Nullable final java.util.Properties additionalProperties )
  {
    final var properties = new java.util.Properties();
    properties.put( "javax.persistence.jdbc.driver", "<%= repository.sql.sql_driver %>" );
    if ( null != additionalProperties )
    {
      properties.putAll( additionalProperties );
    }
    return properties;
  }
}
