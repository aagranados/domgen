/* DO NOT EDIT: File is auto-generated */
package <%= to_package(data_module.jpa.qualified_abstract_test_factory_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc", "PMD.FormalParameterNamingConventions" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "CE_CLASS_ENVY" } )
public abstract class <%= data_module.jpa.abstract_test_factory_name %>
{
  private final com.google.inject.Injector _injector;

  protected <%= data_module.jpa.abstract_test_factory_name %>( @javax.annotation.Nonnull final com.google.inject.Injector injector )
  {
    _injector = injector;
  }
<% if data_module.repository.jpa.include_default_unit? -%>

  @javax.annotation.Nonnull
  protected final javax.persistence.EntityManager em()
  {
    return getInjector().getInstance( com.google.inject.Key.get( javax.persistence.EntityManager.class, com.google.inject.name.Names.named( <%= data_module.repository.jpa.qualified_unit_descriptor_name %>.NAME ) ) );
  }
<% end -%>
<% if data_module.sync? && data_module.sync.master_data_module? -%>

  @javax.annotation.Nonnull
  protected String getDefaultMappingSourceCode()
  {
    return "*def*";
  }

  @javax.annotation.Nonnull
  public final <%= data_module.entity_by_name(:MappingSource).jpa.qualified_name %> findOrCreateDefaultMappingSource()
  {
    return findOrCreateMappingSource( getDefaultMappingSourceCode() );
  }

  @javax.annotation.Nonnull
  public final <%= data_module.entity_by_name(:MappingSource).jpa.qualified_name %> findOrCreateMappingSource( @javax.annotation.Nonnull final String code )
  {
    final <%= data_module.entity_by_name(:MappingSource).jpa.qualified_name %> mappingSource = mappingSourceRepository().findByCode( code );
    return null == mappingSource ? createMappingSource( code ) : mappingSource;
  }

<% end -%>
<% data_module.repository.data_modules.select{|dm|dm.jpa? && dm.jpa.generate_test_factory? && dm.name != data_module.name}.each do |dm| -%>

  @javax.annotation.Nonnull
  protected final <%= dm.jpa.qualified_test_factory_name %> <%= Reality::Naming.camelize(dm.name) %>()
  {
    return s( <%= dm.jpa.qualified_test_factory_name %>.class );
  }

<% end -%>
<% data_module.entities.select{|e|e.jpa?}.each do |entity| -%>
<% if entity.sync? && entity.sync.core? -%>
  @org.jetbrains.annotations.Contract( "null -> null" )
  public final <%= entity.jpa.qualified_name %> to<%= entity.name %>( @javax.annotation.Nullable final <%= entity.sync.master_entity.jpa.qualified_name %> mEntity )
  {
    return null != mEntity ? findOrCreate<%= entity.name %>( mEntity ) : null;
  }

<% if entity.concrete? -%>
  @javax.annotation.Nonnull
  public final <%= entity.jpa.qualified_name %> findOrCreate<%= entity.name %>( @javax.annotation.Nonnull final <%= entity.sync.master_entity.jpa.qualified_name %> mEntity )
  {
    final <%= entity.jpa.qualified_name %> entity = mEntity.get<%= entity.name %>();
    return null != entity ? entity : create<%= entity.name %>( mEntity );
  }

  @javax.annotation.Nonnull
  public <%= entity.jpa.qualified_name %> create<%= entity.name %>( @javax.annotation.Nonnull final <%= entity.sync.master_entity.jpa.qualified_name %> mEntity )
  {
    final <%= entity.jpa.qualified_name %> entity = <%= Reality::Naming.camelize(entity.dao.jpa.dao_service_name) %>().create( <%= entity.attributes.select{|a| !a.generated_value? && a.jpa? && a.jpa.persistent? }.collect{|a| a.sync? && a.reference? ? "#{a.referenced_entity.data_module.name != data_module.name ? Reality::Naming.camelize(a.referenced_entity.data_module.name) + "()." : '' }to#{a.referenced_entity.name}( mEntity.#{getter_prefix(a)}#{a.name}() )" : a.name.to_s == 'MasterId' ? 'mEntity.getId()' : !a.sync? && !%w(CreatedAt DeletedAt).include?(a.name.to_s) ? 'null' : "mEntity.#{getter_prefix(a)}#{a.name}()" }.join(', ') %> );
    mEntity.set<%= entity.name %>( entity );
    <%= Reality::Naming.camelize(entity.sync.master_entity.data_module.name) %>().<%= Reality::Naming.camelize(entity.sync.master_entity.dao.jpa.dao_service_name) %>().persist( mEntity );
    return entity;
  }

<% else -%>
  @javax.annotation.Nonnull
  public final <%= entity.jpa.qualified_name %> findOrCreate<%= entity.name %>( @javax.annotation.Nonnull final <%= entity.sync.master_entity.jpa.qualified_name %> mEntity )
  {
   <% entity.subtypes.select{|st|st.concrete? && st.jpa?}.each do |st| -%> if ( mEntity instanceof <%= st.sync.master_entity.jpa.qualified_name %> )
    {
      return findOrCreate<%= st.name %>( (<%= st.sync.master_entity.jpa.qualified_name %>) mEntity );
    }
    else<% end -%>
    {
      throw new java.lang.AssertionError( "Unexpected subtype: " + mEntity.getClass().getName() );
    }
  }

<% end -%>
<% end -%>
<% if entity.concrete? -%>
<% core_entity = entity.sync? && entity.sync.core? -%>
<% entity.jpa.create_defaults.select{|d| !entity.jpa.test_create_defaults.any?{|v| v.values.keys.sort == d.values.keys.sort}}.each do |defaults| -%>
<% unless defaults.values.keys.include?('MasterId') %>
  @javax.annotation.Nonnull
  public <%= entity.jpa.qualified_name %> create<%= entity.name %>( <%= entity.attributes.select{|a| (!core_entity || 'MasterId' != a.name.to_s) && !a.generated_value? && a.jpa? && a.jpa.persistent? && !defaults.has_attribute?(a.name) }.collect{|a| "#{annotated_type(a, :jpa, :default, :final => true)} #{Reality::Naming.camelize(a.name)}"}.join(', ') %>)
  {
<% if core_entity -%>
   return create<%= entity.name %>( <%= Reality::Naming.camelize(data_module.repository.sync.master_data_module) %>().create<%= entity.name %>( <%= entity.attributes.select{|a| !%w(CreatedAt DeletedAt).include?(a.name.to_s) && a.sync? &&!a.generated_value? && a.jpa? && a.jpa.persistent? && a.name.to_s != 'MasterId'}.collect{|a| defaults.has_attribute?(a.name) ? defaults.value_for(a.name) : a.reference? ? "#{Reality::Naming.camelize(data_module.repository.sync.master_data_module)}().#{Reality::Naming.camelize(a.referenced_entity.dao.jpa.dao_service_name)}().#{a.referenced_entity.abstract? ? 'getById' : "findBy#{a.referenced_entity.name}"}( #{Reality::Naming.camelize(a.name)}#{a.referenced_entity.abstract? ? '.getMasterId()' : ''} )" : Reality::Naming.camelize(a.name)}.join(', ') %> ) );
<% else -%>
    return <%= Reality::Naming.camelize(entity.dao.jpa.dao_service_name) %>().create( <%= entity.attributes.select{|a|!a.generated_value? && a.jpa? && a.jpa.persistent?}.collect {|a| defaults.has_attribute?(a.name) ? defaults.value_for(a.name) : Reality::Naming.camelize(a.name) }.join(', ') %> );
<% end -%>
  }

<% end -%>
<% end -%>
<% entity.jpa.test_create_defaults.select{|defaults|!defaults.ignore?}.each do |defaults| -%>
  @javax.annotation.Nonnull
  public final <%= entity.jpa.qualified_name %> create<%= entity.name %>( <%= entity.attributes.select{|a| !a.generated_value? && a.jpa? && a.jpa.persistent? && !defaults.has_attribute?(a.name) }.collect{|a| "#{annotated_type(a, :jpa, :default, :final => true)} #{Reality::Naming.camelize(a.name)}"}.join(', ') %>)
  {
    return create<%= entity.name %>( <%= entity.attributes.select{|a|!a.generated_value? && a.jpa? && a.jpa.persistent?}.collect {|a| defaults.has_attribute?(a.name) ? defaults.value_for(a.name) : Reality::Naming.camelize(a.name) }.join(', ') %> );
  }

<% end -%>
<% if core_entity && !entity.sync.support_unmanaged? -%>
  @javax.annotation.Nonnull
  public <%= entity.jpa.qualified_name %> create<%= entity.name %>( <%= entity.attributes.select{|a| !%w(MasterId CreatedAt DeletedAt).include?(a.name.to_s) && !a.generated_value? && a.jpa? && a.jpa.persistent?}.collect{|a| "#{annotated_type(a, :jpa, :default, :final => true)} #{Reality::Naming.camelize(a.name)}"}.join(', ') %> )
  {
    return create<%= entity.name %>( <%= Reality::Naming.camelize(data_module.repository.sync.master_data_module) %>().create<%= entity.name %>( <%= entity.attributes.select{|a| !%w(MasterId CreatedAt DeletedAt).include?(a.name.to_s) && a.sync? &&!a.generated_value? && a.jpa? && a.jpa.persistent?}.collect{|a| a.reference? ? "#{Reality::Naming.camelize(data_module.repository.sync.master_data_module)}().#{Reality::Naming.camelize(a.referenced_entity.dao.jpa.dao_service_name)}().#{a.referenced_entity.abstract? ? 'getById' : "findBy#{a.referenced_entity.name}"}( #{Reality::Naming.camelize(a.name)}#{a.referenced_entity.abstract? ? '.getMasterId()' : ''} )" : Reality::Naming.camelize(a.name)}.join(', ') %> ) );
  }

<% else -%>
  @javax.annotation.Nonnull
  public <%= entity.jpa.qualified_name %> create<%= entity.name %>( <%= entity.attributes.select{|a| !a.generated_value? && a.jpa? && a.jpa.persistent?}.collect{|a| "#{annotated_type(a, :jpa, :default, :final => true)} #{Reality::Naming.camelize(a.name)}"}.join(', ') %> )
  {
    return <%= Reality::Naming.camelize(entity.dao.jpa.dao_service_name) %>().create( <%= entity.attributes.select{|a| !a.generated_value? && a.jpa? && a.jpa.persistent?}.collect{|a| Reality::Naming.camelize(a.name)}.join(', ') %> );
  }
<% end -%>
<% if entity.attributes.any?{|a| !a.immutable? && !a.generated_value? && a.jpa? && a.jpa.persistent?} -%>
<% entity.jpa.update_defaults.select{|d| !entity.jpa.test_update_defaults.any?{|v| v.values.keys.sort == d.values.keys.sort}}.each do |defaults|
    attr = entity.attributes.select{|a| !a.immutable? && !a.generated_value? && a.jpa? && a.jpa.persistent? && (!defaults.has_attribute?(a.name) || !defaults.value_for(a.name).nil?)}
    non_default_attr = attr.select{|a| !defaults.has_attribute?(a.name)}
  -%>

  public final void <%= defaults.factory_method_name == 'update' ? "update#{entity.name}" : defaults.factory_method_name %>( @javax.annotation.Nonnull final <%= entity.jpa.qualified_name %> $_<%= non_default_attr.empty? ? '' : ', ' %><%= non_default_attr.collect{|a| "#{annotated_type(a, :jpa, :default, :final => true)} #{Reality::Naming.camelize(a.name)}"}.join(', ') %> )
  {
    <%= Reality::Naming.camelize(entity.dao.jpa.dao_service_name) %>().update( $_<%= non_default_attr.empty? ? '' : ', ' %><%= non_default_attr.collect{|a| Reality::Naming.camelize(a.name)}.join(', ') %> );
  }
<% end -%>
<% entity.jpa.test_update_defaults.each do |defaults|
    attr = entity.attributes.select{|a| !a.immutable? && !a.generated_value? && a.jpa? && a.jpa.persistent? && (!defaults.has_attribute?(a.name) || !defaults.value_for(a.name).nil?)}
    non_default_attr = attr.select{|a| !defaults.has_attribute?(a.name)}
  -%>

  public final void <%= defaults.factory_method_name %>( @javax.annotation.Nonnull final <%= entity.jpa.qualified_name %> $_<%= non_default_attr.empty? ? '' : ', ' %><%= non_default_attr.collect{|a| "#{annotated_type(a, :jpa, :default, :final => true)} #{Reality::Naming.camelize(a.name)}"}.join(', ') %> )
  {
<% if defaults.force_refresh? -%>
    em().refresh( $_ );
<% end -%>
<% attr.each do |a| -%>
    $_.set<%= a.name %>( <%= defaults.has_attribute?(a.name) ? defaults.value_for(a.name) : Reality::Naming.camelize(a.name) %> );
<% end -%>
    <%= Reality::Naming.camelize(entity.dao.jpa.dao_service_name) %>().persist( $_ );
  }
<% end -%>

  public final void update<%= entity.name %>( @javax.annotation.Nonnull final <%= entity.jpa.qualified_name %> $_, <%= entity.attributes.select{|a| !a.immutable? && !a.generated_value? && a.jpa? && a.jpa.persistent?}.collect{|a| "#{annotated_type(a, :jpa, :default, :final => true)} #{Reality::Naming.camelize(a.name)}"}.join(', ') %>)
  {
    <%= Reality::Naming.camelize(entity.dao.jpa.dao_service_name) %>().update( $_, <%= entity.attributes.select{|a| !a.immutable? && !a.generated_value? && a.jpa? && a.jpa.persistent?}.collect{|a| Reality::Naming.camelize(a.name)}.join(', ') %> );
  }
<% end -%>

  public final void remove<%= entity.name %>( @javax.annotation.Nonnull final <%= entity.jpa.qualified_name %> entity )
  {
    <%= Reality::Naming.camelize(entity.dao.jpa.dao_service_name) %>().remove( entity );
  }
<% end -%>
<% end -%>
<% data_module.entities.select{|e|e.jpa?}.each do |entity| -%>

  @javax.annotation.Nonnull
  public final <%= entity.dao.jpa.qualified_dao_service_name %> <%= Reality::Naming.camelize(entity.dao.jpa.dao_service_name) %>()
  {
    return s( <%= entity.dao.jpa.qualified_dao_service_name %>.class );
  }
<% end -%>

  @javax.annotation.Nonnull
  protected final <T> T s( @javax.annotation.Nonnull final Class<T> type )
  {
    return _injector.getInstance( type );
  }

  @javax.annotation.Nonnull
  protected <T> T s( @javax.annotation.Nonnull final String name, @javax.annotation.Nonnull final Class<T> type )
  {
    return getInjector().getInstance( com.google.inject.Key.get( type, com.google.inject.name.Names.named( name ) ) );
  }

  @javax.annotation.Nonnull
  protected final com.google.inject.Injector getInjector()
  {
    return _injector;
  }

  protected java.util.Date now()
  {
    return org.realityforge.guiceyloops.shared.ValueUtil.now();
  }
}
