/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.jpa.qualified_abstract_entity_test_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration", "PMD.SystemPrintln" } )
@javax.annotation.Generated( "Domgen" )
public abstract class <%= repository.jpa.abstract_entity_test_name %>
  extends org.realityforge.guiceyloops.server.AbstractServerTest
{
<% repository.jpa.test_factories.each do |short_code, classname| -%>
  @javax.annotation.Nonnull
  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings( "NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR" )
  protected <%= classname %> <%= short_code %>;
<% end -%>
<% if repository.sql_analysis?-%>
  private boolean _disableAnalysis;
<% end -%>

  @org.testng.annotations.BeforeMethod
  public void preTest()
    throws Exception
  {
    super.preTest();
<% repository.jpa.test_factories.each do |short_code, classname| -%>
    <%= short_code %> = s( <%= classname %>.class );
<% end -%>
<%
  # TODO - there should be a better way of doing this. Perhaps Runnables/Actions that are added by facets?
  if repository.imit?
-%>
    s( javax.transaction.TransactionSynchronizationRegistry.class ).putResource( "ReplicationActive", "Test" );
<% end -%>
  }

  @org.testng.annotations.AfterMethod
  @java.lang.Override
  public void postTest()
  {
    if ( null != getInjector() )
    {
<% if repository.sql_analysis? -%>
      try
      {
        if ( isSqlAnalysisEnabled() && em().isOpen() && em().isJoinedToTransaction() && !em().getTransaction().getRollbackOnly() )
        {
          _disableAnalysis = false;
          runSqlAnalysisPerformChecks();
        }
      }
      finally
      {
        super.postTest();
      }
<% else -%>
      super.postTest();
<% end -%>
    }
  }
<% if repository.sql_analysis? -%>

  protected void runSqlAnalysisPerformChecks()
  {
    em().clear();
    em().createNativeQuery( "EXEC <%= repository.sql_analysis.analysis_data_module.sql.quoted_schema %>.[spPerformChecks]" ).getResultList();
    final java.util.List<<%= repository.sql_analysis.analysis_data_module.entity_by_name(:DataIssue).jpa.qualified_name %>> issues = <%= repository.sql_analysis.analysis_data_module.jpa.short_test_code %>.dataIssueRepository().findAll();
    final java.lang.StringBuilder sb = new java.lang.StringBuilder();
    if ( !issues.isEmpty() )
    {
      for ( final <%= repository.sql_analysis.analysis_data_module.entity_by_name(:DataIssue).jpa.qualified_name %> issue : issues )
      {
        final String header = issue.getCategory() + ":" + issue.getDescription();
        final String viewSql = issue.getViewSql();
        final String message = header + ( null == viewSql ? "" : ": SQL\n---\n" + viewSql + "\n---" );
        System.out.println( message );
        sb.append( "  " );
        sb.append( message );
      }
      org.testng.Assert.fail( "Database left in inconsistent state:\n" + sb.toString() );
    }
  }

  protected final void disableCorruptionChecks()
  {
    _disableAnalysis = true;
  }

  private boolean isSqlAnalysisEnabled()
  {
    return !_disableAnalysis && "true".equals( System.getProperty( "sql_analysis.enabled", "true" ) );
  }
<% end -%>
<% repository.jpa.test_modules.each_pair do |name, classname| -%>

  @javax.annotation.Nullable
  protected com.google.inject.Module new<%= name %>()
  {
    return new <%= classname =~ /\(/ ? classname : "#{classname}()" %>;
  }
<% end -%>
<% repository.jpa.test_class_contents.each do |content| -%>
<%= content -%>
<% end -%>

  @java.lang.Override
  protected com.google.inject.Module[] getModules()
  {
    final java.util.ArrayList<com.google.inject.Module> modules = new java.util.ArrayList<>();
    java.util.Collections.addAll( modules, super.getModules() );
<% repository.jpa.test_modules.keys.each do |name| -%>
    addModule( modules, new<%= name %>() );
<% end -%>
    return modules.toArray( new com.google.inject.Module[ modules.size() ] );
  }

  protected final void assertFailedToPassCheckConstraint( @javax.annotation.Nonnull final java.lang.Throwable exception, @javax.annotation.Nonnull final java.lang.String checkConstraintName )
  {
    assertMessageAppearsInExceptionChain( exception, "conflicted with the CHECK constraint \"" + checkConstraintName + "\"" );
  }

  protected final void assertFailedToPassValidationCheck( @javax.annotation.Nonnull final java.lang.Throwable exception, @javax.annotation.Nonnull final java.lang.String validationName )
  {
    assertMessageAppearsInExceptionChain( exception, "Failed to pass validation check " + validationName );
  }

  protected final void assertMessageAppearsInExceptionChain( @javax.annotation.Nonnull final java.lang.Throwable exception, @javax.annotation.Nonnull final java.lang.String message )
  {
    java.lang.Throwable t = exception;
    while ( null != t )
    {
      if ( t.getMessage().contains( message ) )
      {
        return;
      }
      t = t.getCause();
    }
    org.testng.Assert.fail( "Failed to find any exception containing string " + message );
  }

  protected final void disableTrigger( @javax.annotation.Nonnull final String qualifiedTableName, @javax.annotation.Nonnull final String qualifiedTriggerName )
  {
    em().createNativeQuery( "DISABLE TRIGGER " + qualifiedTriggerName + " ON " + qualifiedTableName ).executeUpdate();
    addPostTestSqlAction( "ENABLE TRIGGER " + qualifiedTriggerName + " ON " + qualifiedTableName );
  }
}
