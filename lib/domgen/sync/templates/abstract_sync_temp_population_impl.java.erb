/* DO NOT EDIT: File is auto-generated */
package <%= to_package(data_module.sync.qualified_abstract_sync_temp_population_impl_name) %>;

/**
 Base class to extend to customize the population process.

<code>
<pre>
@Singleton( name = SyncTempPopulationService.NAME )
@TransactionAttribute( TransactionAttributeType.REQUIRES_NEW )
@ConcurrencyManagement( ConcurrencyManagementType.BEAN )
@Local( SyncTempPopulationService.class )
public class SyncTempPopulationServiceEJB
  extends AbstractSyncTempPopulationServiceEJB<SyncTempFactory>
{
   ...
}
</pre>
</code>
 */
public abstract class <%= data_module.sync.abstract_sync_temp_population_impl_name %><H extends <%= data_module.sync.qualified_sync_temp_factory_name %>>
  extends iris.syncrecord.server.service.StandardSyncService
  implements <%= data_module.service_by_name(:SyncTempPopulationService).ejb.qualified_service_name %>
{
  protected static final java.util.logging.Logger LOG = java.util.logging.Logger.getLogger( <%= data_module.sync.abstract_sync_temp_population_impl_name %>.class.getName() );

  private H _st;

  @javax.annotation.Nonnull
  protected final H st()
  {
    if( null == _st )
    {
      _st = createSyncTempFactory();
    }
    return _st;
  }

  @java.lang.SuppressWarnings( "unchecked" )
  @javax.annotation.Nonnull
  protected H createSyncTempFactory()
  {
    return (H) new <%= data_module.sync.qualified_sync_temp_factory_name %>( getEntityManager() );
  }

  @java.lang.Override
  public void preSync( @javax.annotation.Nonnull final java.lang.String mappingSourceCode )
  {
    st().insertMasterDataSourceIfRequired( mappingSourceCode );
  }

  protected abstract javax.persistence.EntityManager getEntityManager();
<% data_module.sync.entities_to_synchronize.each do |entity| -%>

  public abstract void populate<%= entity.qualified_name.gsub('.','') %>( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final java.util.Date at, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder );

  @java.lang.Override
  public void reset<%= entity.qualified_name.gsub('.','') %>( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final java.util.Date at, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder )
  {
    st().deleteAll<%= entity.qualified_name.gsub('.','') %>( mappingSourceCode );
    // Identity needs to be reset otherwise we will overflow IDENTITY int columns in some tables in some databases
    st().resetIdentity<%= entity.qualified_name.gsub('.','') %>();
  }

  @java.lang.Override
  public int count<%= entity.qualified_name.gsub('.','') %>( @javax.annotation.Nonnull final java.lang.String mappingSourceCode )
  {
    return (java.lang.Integer) getEntityManager().createNativeQuery( "SELECT COUNT(*) FROM <%= entity.sync.sync_temp_entity.sql.qualified_table_name %> WHERE <%= entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> = ?" ).setParameter( 1, mappingSourceCode ).getSingleResult();
  }

  @java.lang.Override
  public void finalize<%= entity.qualified_name.gsub('.','') %>( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final java.util.Date at, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder )
  {
  }

  @java.lang.SuppressWarnings( "ConstantConditions" )
  protected boolean printInvalid<%= entity.qualified_name.gsub('.','') %>Rows( @javax.annotation.Nonnull final java.lang.String banner, @javax.annotation.Nonnull final java.sql.PreparedStatement statement, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder )
    throws Exception
  {
    boolean validationFailed = false;
    try ( final java.sql.ResultSet resultSet = statement.executeQuery() )
    {
      while( resultSet.next() )
      {
        if( !validationFailed )
        {
          validationFailed = true;
          recorder.addMessage( banner );
        }
<% index = 0 -%>
        recorder.addMessage( "Invalid Row: " + <%= entity.sync.sync_temp_entity.attributes.collect{|a| "\"#{a.name} = \" + resultSet.getObject( #{index += 1} ) "}.join("+ \", \" + ") %>  );
      }
    }
    return validationFailed;
  }

  @java.lang.SuppressWarnings( "ConstantConditions" )
  protected boolean verify<%= entity.qualified_name.gsub('.','') %>ViaSql( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final java.lang.String sql, @javax.annotation.Nonnull final java.lang.String validation, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder )
    throws Exception
  {
    try ( final java.sql.PreparedStatement statement = getEntityManager().unwrap( java.sql.Connection.class ).prepareStatement( sql ) )
    {
      statement.setString( 1, mappingSourceCode );
      return !printInvalid<%= entity.qualified_name.gsub('.','') %>Rows( "Failed to validate " + validation + " for entity <%= entity.qualified_name %>.", statement, recorder );
    }
  }

  @java.lang.SuppressWarnings( "ConstantConditions" )
  @java.lang.Override
  public void verify<%= entity.qualified_name.gsub('.','') %>( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder )
  {
    boolean validationFailed = false;
    try
    {
      {
        final String sql =
          "SELECT S.* " +
          " FROM " +
          "   <%= entity.sync.sync_temp_entity.sql.qualified_table_name %> AS S " +
          " LEFT JOIN <%= entity.sync.sync_temp_entity.sql.qualified_table_name %> AS O ON O.<%= entity.sync.sync_temp_entity.attribute_by_name(:MappingID).sql.quoted_column_name %> = S.<%= entity.sync.sync_temp_entity.attribute_by_name(:MappingID).sql.quoted_column_name %> AND O.<%= entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> = S.<%= entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> AND O.SyncTempID != S.SyncTempID " +
          " WHERE O.<%= entity.sync.master_entity.attribute_by_name(:MappingID).sql.quoted_column_name %> IS NOT NULL AND S.<%= entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> = ?";
        if ( !verify<%= entity.qualified_name.gsub('.','') %>ViaSql( mappingSourceCode, sql, "MappingID Uniqueness", recorder ) )
        {
          validationFailed = true;
        }
      }
<% entity.sql.indexes.select{|index| index.unique? && !index.attribute_names.any?{|k| %w(CreatedAt DeletedAt).include?(k.to_s)}}.each do |index|
   column_names = index.attribute_names.collect {|attr_name| a = entity.attribute_by_name(attr_name); entity.sync.sync_temp_entity.attribute_by_name(a.reference? ? "#{a.name}MappingID" : a.name).sql.quoted_column_name }
-%>
      {
        final String sql =
          "SELECT S.* " +
          "FROM " +
          "  <%= entity.sync.sync_temp_entity.sql.qualified_table_name %> AS S " +
          "JOIN ( SELECT <%= column_names.join(',') %> FROM <%= entity.sync.sync_temp_entity.sql.qualified_table_name %> GROUP BY <%= column_names.join(',') %> HAVING COUNT(*) > 1 ) J ON <%= column_names.collect{|c| "J.#{c} = S.#{c}"}.join(' AND ') %> " +
          "WHERE S.<%= entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> = ?";
        if ( !verify<%= entity.qualified_name.gsub('.','') %>ViaSql( mappingSourceCode, sql, "Found duplicate rows for <%= entity.qualified_name.gsub('.','') %> that violate uniqueness across <%= index.attribute_names.join(',') %> defined by index <%= index.index_name %>", recorder ) )
        {
          validationFailed = true;
        }
      }
<% end -%>
<% entity.attributes.select{|a| a.immutable? && !a.primary_key? && a.name != :CreatedAt}.each do |a| %>
      {
        final String sql =
          "SELECT S.* " +
          " FROM " +
          "   <%= entity.sync.sync_temp_entity.sql.qualified_table_name %> AS S " +
<% if a.reference?
  ref_id = 'R.ID'
-%>
<% if a.referenced_entity.name == entity.name -%>
          "LEFT JOIN <%= a.referenced_entity.sync.sync_temp_entity.sql.qualified_table_name %> AS R ON R.MappingID = S.<%= entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingID").sql.quoted_column_name %> AND R.<%= entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> = S.<%= entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> " +
<% elsif a.referenced_entity.abstract? -%>
<%
  refs = []
  a.referenced_entity.concrete_subtypes.each_with_index do |subtype, index|
    refs << "R#{index}.ID"
-%>
          " LEFT JOIN <%= subtype.sync.master_entity.sql.qualified_table_name %> AS R<%= index %> ON R<%= index %>.MappingID = S.<%= entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingID").sql.quoted_column_name %> AND R<%= index %>.MappingSource = S.MappingSource AND R<%= index %>.DeletedAt IS NULL " +
<% end
  ref_id = "COALESCE(#{refs.join(',')})"
-%>

<% else -%>
          "LEFT JOIN <%= a.referenced_entity.sync.master_entity.sql.qualified_table_name %> AS R ON R.MappingID = S.<%= entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingID").sql.quoted_column_name %> AND R.MappingSource = S.MappingSource AND R.DeletedAt IS NULL " +
<% end -%>
<% end -%>
          "JOIN <%= entity.sync.master_entity.sql.qualified_table_name %> AS M ON M.DeletedAt IS NULL AND M.MappingKey = S.MappingKey AND M.MappingID = S.MappingID AND M.MappingSource = S.MappingSource AND M.<%= entity.sync.master_entity.attribute_by_name(a.name).sql.quoted_column_name %> <> <%= a.reference? ? ref_id : "S.#{entity.sync.sync_temp_entity.attribute_by_name(a.reference? ? "#{a.name}MappingID" : a.name).sql.quoted_column_name}" %> " +
          "WHERE S.<%= entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> = ?";
        if ( !verify<%= entity.qualified_name.gsub('.','') %>ViaSql( mappingSourceCode, sql, "Attempted to modify immutable attribute <%= a.qualified_name %>", recorder ) )
        {
          validationFailed = true;
        }
      }
<% end -%>
<% entity.attributes.select{|a| a.set_once? && !a.primary_key? && a.name != :DeletedAt}.each do |a| %>
      {
        final String sql =
          "SELECT S.* " +
          " FROM " +
          "   <%= entity.sync.sync_temp_entity.sql.qualified_table_name %> AS S " +
<% if a.reference?
  ref_id = 'R.ID'
-%>
<% if a.referenced_entity.name == entity.name -%>
          "LEFT JOIN <%= a.referenced_entity.sync.sync_temp_entity.sql.qualified_table_name %> AS R ON R.MappingID = S.<%= entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingID").sql.quoted_column_name %> AND R.<%= entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> = S.<%= entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> " +
<% elsif a.referenced_entity.abstract? -%>
<%
  refs = []
  a.referenced_entity.concrete_subtypes.each_with_index do |subtype, index|
    refs << "R#{index}"
-%>
          " LEFT JOIN <%= subtype.sync.master_entity.sql.qualified_table_name %> AS R<%= index %> ON R<%= index %>.MappingID = S.<%= entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingID").sql.quoted_column_name %> AND R<%= index %>.MappingSource = S.MappingSource AND R<%= index %>.DeletedAt IS NULL " +
<% end
  ref_id = "COALESCE(#{refs.join(',')})"
-%>

<% else -%>
          "LEFT JOIN <%= a.referenced_entity.sync.master_entity.sql.qualified_table_name %> AS R ON R.MappingID = S.<%= entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingID").sql.quoted_column_name %> AND R.MappingSource = S.MappingSource AND R.DeletedAt IS NULL " +
<% end -%>
<% end -%>
          "JOIN <%= entity.sync.master_entity.sql.qualified_table_name %> AS M ON M.DeletedAt IS NULL AND M.MappingKey = S.MappingKey AND M.MappingID = S.MappingID AND M.MappingSource = S.MappingSource AND M.<%= entity.sync.master_entity.attribute_by_name(a.name).sql.quoted_column_name %> IS NOT NULL AND M.<%= entity.sync.master_entity.attribute_by_name(a.name).sql.quoted_column_name %> <> <%= a.reference? ? ref_id : "S.#{entity.sync.sync_temp_entity.attribute_by_name(a.reference? ? "#{a.name}MappingID" : a.name).sql.quoted_column_name}" %> " +
          "WHERE S.<%= entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> = ?";
        if ( !verify<%= entity.qualified_name.gsub('.','') %>ViaSql( mappingSourceCode, sql, "Attempted to modify set once attribute <%= a.qualified_name %>", recorder ) )
        {
          validationFailed = true;
        }
      }
<% end -%>
<% entity.sql.constraints.select{|constraint| !(constraint.sql =~ /\[CreatedAt\]/ && constraint.sql =~ /\[DeletedAt\]/) }.each do |constraint| %>
      {
        final String sql =
          "SELECT S.* " +
          " FROM " +
          "   <%= entity.sync.sync_temp_entity.sql.qualified_table_name %> AS S " +
          "JOIN ( SELECT SyncTempID FROM <%= entity.sync.sync_temp_entity.sql.qualified_table_name %> WHERE NOT (<%=
  sql = constraint.sql.gsub("\n",' ').gsub('  ',' ')
  entity.attributes.select{|a| !a.primary_key? && a.sql? && a.name.to_s != 'CreatedAt' && a.name.to_s != 'DeletedAt' }.each do |a|
    sql = sql.gsub(/#{Regexp.escape(a.sql.quoted_column_name)}/, entity.sync.sync_temp_entity.attribute_by_name(a.reference? ? "#{a.name}MappingID" : a.name).sql.quoted_column_name )
  end
  sql
-%>) ) J ON J.SyncTempID = S.SyncTempID " +
          "WHERE S.<%= entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> = ?";
        if ( !verify<%= entity.qualified_name.gsub('.','') %>ViaSql( mappingSourceCode, sql, "Attempted to violate constraint <%= constraint.qualified_constraint_name %>", recorder ) )
        {
          validationFailed = true;
        }
      }
<% end -%>
<% entity.attributes.select{|a| a.reference?}.each do |a| -%>
      {
        final String sql =
          "SELECT S.* " +
          " FROM " +
          "   <%= entity.sync.sync_temp_entity.sql.qualified_table_name %> AS S " +
<% if a.referenced_entity.name == entity.name -%>
          " LEFT JOIN <%= entity.sync.sync_temp_entity.sql.qualified_table_name %> AS O ON O.<%= entity.sync.sync_temp_entity.attribute_by_name(:MappingID).sql.quoted_column_name %> = S.<%= entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingID").sql.quoted_column_name %> AND O.<%= entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> = S.<%= entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %>" +
<% elsif a.referenced_entity.abstract? -%>
<% a.referenced_entity.concrete_subtypes.each_with_index do |subtype, index| -%>
          " LEFT JOIN <%= subtype.sync.master_entity.sql.qualified_table_name %> AS O<%= index %> ON O<%= index %>.<%= subtype.sync.master_entity.attribute_by_name(:MappingID).sql.quoted_column_name %> = S.<%= entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingID").sql.quoted_column_name %> AND O<%= index %>.<%= subtype.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> = S.<%= entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> AND O<%= index %>.<%= subtype.sync.master_entity.attribute_by_name(:DeletedAt).sql.quoted_column_name %> IS NULL" +
<% end -%>
<% else -%>
          " LEFT JOIN <%= a.referenced_entity.sync.master_entity.sql.qualified_table_name %> AS O ON O.<%= a.referenced_entity.sync.master_entity.attribute_by_name(:MappingID).sql.quoted_column_name %> = S.<%= entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingID").sql.quoted_column_name %> AND O.<%= a.referenced_entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> = S.<%= entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> AND O.<%= a.referenced_entity.sync.master_entity.attribute_by_name(:DeletedAt).sql.quoted_column_name %> IS NULL" +
<% end -%>
          " WHERE S.<%= entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingID").sql.quoted_column_name %> IS NOT NULL AND S.<%= entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> = ? AND " +
<% if a.referenced_entity.abstract? -%>
          "(" +
<% a.referenced_entity.concrete_subtypes.each_with_index do |subtype, index| -%>
            "O<%= index %>.<%= subtype.sync.master_entity.attribute_by_name(:MappingID).sql.quoted_column_name %> IS NULL AND " +
<% end -%>
          " 1 = 1 )";
<% else -%>
          " O.<%= entity.sync.master_entity.attribute_by_name(:MappingID).sql.quoted_column_name %> IS NULL";
<% end -%>
        if ( !verify<%= entity.qualified_name.gsub('.','') %>ViaSql( mappingSourceCode, sql, "<%= a.name %> ForeignKey", recorder ) )
        {
          validationFailed = true;
        }
      }
<% end -%>
    }
    catch ( final Exception e )
    {
      throw new IllegalStateException( "Error validating <%= entity.qualified_name %>", e );
    }
    if ( validationFailed )
    {
      throw new IllegalStateException( "Failed to validate <%= entity.qualified_name %> instances for mappingSource " + mappingSourceCode );
    }
  }
<% end -%>

  protected void log( @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder, final String message )
  {
    LOG.info( message );
    recorder.addMessage( message );
  }

  protected int executeUpdate(  @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final String sql )
  {
    return executeUpdate( sql.replace( "@@MAPPING_SOURCE@@", "'" + mappingSourceCode + "'" ) );
  }

  protected int executeUpdate( @javax.annotation.Nonnull final String sql )
  {
    return getEntityManager().createNativeQuery( interpolateSql( sql ) ).executeUpdate();
  }

  @javax.annotation.Nonnull
  protected String interpolateSql( @javax.annotation.Nonnull final String sql )
  {
    return sql;
  }
}
