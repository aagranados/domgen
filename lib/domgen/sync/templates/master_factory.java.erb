/* DO NOT EDIT: File is auto-generated */
package <%= to_package(data_module.sync.qualified_master_factory_name) %>;

public class <%= data_module.sync.master_factory_name %>
{
  private final javax.persistence.EntityManager _entityManager;

  public <%= data_module.sync.master_factory_name %>( final javax.persistence.EntityManager entityManager )
  {
    if( null == entityManager )
    {
      throw new IllegalArgumentException( "entityManager is null" );
    }
    _entityManager = entityManager;
  }

  protected final javax.persistence.EntityManager getEntityManager()
  {
    return _entityManager;
  }
<% data_module.sync.entities_to_synchronize.each do |entity|

  sync_attribtues = entity.sync.attributes_to_synchronize.collect{|a| entity.sync.master_entity.attribute_by_name(a.name) }
-%>

  public int insert<%= entity.qualified_name.gsub('.','') %>BySql( @javax.annotation.Nonnull final String selectSql )
  {
    final String sql =
      "INSERT INTO <%= entity.sync.master_entity.sql.qualified_table_name %>(<%= entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %>, <%= sync_attribtues.collect{|a| a.sql.quoted_column_name }.join(', ') %>) " +
      selectSql;
    return executeUpdate( sql );
  }

  public int insert<%= entity.qualified_name.gsub('.','') %>( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final java.lang.String mappingID, <%=

  attribute_names = entity.sync.attributes_to_synchronize.collect{|a| a.name.to_s}

  entity.attributes.select{|a| attribute_names.include?(a.name.to_s) }.collect do |a|
      "#{annotated_type(a, :jpa, :boundary, :final => true)} #{Domgen::Naming.camelize(a.name)}"
  end.join(', ')
%> )
  {
    final String sql =
      "INSERT INTO <%= entity.sync.master_entity.sql.qualified_table_name %>([MasterSynchronized],[CreatedAt],<%= entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %>, <%= entity.sync.attributes_to_synchronize.collect{|a| entity.sync.master_entity.attribute_by_name(a.name).sql.quoted_column_name }.join(', ') %>) OUTPUT INSERTED.[ID] AS [ID] VALUES (0, GETDATE(), ?,?,<%= entity.sync.attributes_to_synchronize.select{|a| a.name.to_s != 'MappingID'}.collect{|a| '?'}.join(',') %>)";
    return (Integer) getEntityManager().createNativeQuery( sql ).
      setParameter( 1, mappingSourceCode ).
      setParameter( 2, mappingID ).
<% entity.attributes.select{|a| attribute_names.include?(a.name.to_s) }.each_with_index do |a, i| -%>
      setParameter( <%= i + 3 %>, <%= Domgen::Naming.camelize(a.name) %> ).
<% end -%>
      getResultList().get( 0 );
  }


  public int update<%= entity.qualified_name.gsub('.','') %>( final int id, <%=

  attribute_names = entity.sync.attributes_to_synchronize.select{|a| !a.immutable? }.collect{|a| a.name.to_s}

  entity.attributes.select{|a| attribute_names.include?(a.name.to_s) }.collect do |a|
      "#{annotated_type(a, :jpa, :boundary, :final => true)} #{Domgen::Naming.camelize(a.name)}"
  end.join(', ')
%> )
  {
    final String sql =
      "UPDATE <%= entity.sync.master_entity.sql.qualified_table_name %> SET [MasterSynchronized] = 0, <%= entity.sync.attributes_to_synchronize.select{|a| !a.immutable? && a.name.to_s != 'MappingID'}.collect{|a| "#{entity.sync.master_entity.attribute_by_name(a.name).sql.quoted_column_name} = ?" }.join(', ') %> WHERE ID = ?";
    return getEntityManager().createNativeQuery( sql ).
<% attr = entity.attributes.select{|a| !a.immutable? && attribute_names.include?(a.name.to_s) } -%>
<% attr.each_with_index do |a, i| -%>
      setParameter( <%= i + 1 %>, <%= Domgen::Naming.camelize(a.name) %> ).
<% end -%>
      setParameter( <%= attr.length + 1 %>, id ).
      executeUpdate();
  }

  public void delete<%= entity.qualified_name.gsub('.','') %>( final int id )
  {
    final String sql = "UPDATE <%= entity.sync.master_entity.sql.qualified_table_name %> SET [DeletedAt] = GETDATE(), [MasterSynchronized] = 0  WHERE [ID] = ?";
    getEntityManager().createNativeQuery( sql ).setParameter( 1, id ).executeUpdate();
  }

  public int count<%= entity.qualified_name.gsub('.','') %>( @javax.annotation.Nonnull final java.lang.String mappingSourceCode )
  {
    return (java.lang.Integer) getEntityManager().createNativeQuery( "SELECT COUNT(*) FROM <%= entity.sync.master_entity.sql.qualified_table_name %> WHERE <%= entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> = ?" ).setParameter( 1, mappingSourceCode ).getSingleResult();
  }

  public int countUnsynchronized<%= entity.qualified_name.gsub('.','') %>( @javax.annotation.Nonnull final java.lang.String mappingSourceCode )
  {
    return (java.lang.Integer) getEntityManager().createNativeQuery( "SELECT COUNT(*) FROM <%= entity.sync.master_entity.sql.qualified_table_name %> WHERE <%= entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name %> = ? AND [MasterSynchronized] = 0" ).setParameter( 1, mappingSourceCode ).getSingleResult();
  }
<% end -%>

  public void insertMasterDataSourceIfRequired( @javax.annotation.Nonnull final String dataSource )
  {
    executeUpdate( "INSERT INTO <%= data_module.repository.data_module_by_name(data_module.repository.sync.master_data_module).entity_by_name(:MappingSource).sql.qualified_table_name %>(Code) " +
                   "  SELECT '" + dataSource + "' " +
                   "  WHERE 0 = (SELECT COUNT(*) FROM <%= data_module.repository.data_module_by_name(data_module.repository.sync.master_data_module).entity_by_name(:MappingSource).sql.qualified_table_name %> WHERE [Code] = '" + dataSource + "')" );
  }

  protected int executeUpdate( @javax.annotation.Nonnull final String sql )
  {
    return getEntityManager().createNativeQuery( sql ).executeUpdate();
  }
}