/* DO NOT EDIT: File is auto-generated */
package <%= to_package(data_module.sync.qualified_sync_service_test_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration", "PMD.UnusedLocalVariable" } )
@javax.annotation.Generated( "Domgen" )
public abstract class <%= data_module.sync.sync_service_test_name %>
  extends <%= data_module.service_by_name(:SynchronizationService).ejb.qualified_service_test_name %>
{
  @javax.annotation.Nonnull
  protected final iris.syncrecord.server.entity.Synchronization doSyncAndLoadResults( @javax.annotation.Nonnull final <%= data_module.entity_by_name(:MappingSource).jpa.qualified_name %> mappingSource, @javax.annotation.Nonnull final String statusCode )
  {
    return iris.syncrecord.server.test.util.SyncAssert.ensureSynchronization( service().synchronizeDataSource( mappingSource.getCode() ), mappingSource.getCode(), statusCode, s( iris.syncrecord.server.service.SyncRecordService.class ) );
  }

  protected final void assertNoUnsynchronized( @javax.annotation.Nonnull final <%= data_module.entity_by_name(:MappingSource).jpa.qualified_name %> mappingSource )
  {
<% data_module.sync.entities_to_synchronize.each do |entity| -%>
    org.testng.Assert.assertEquals( 0L, s( <%= entity.sync.master_entity.dao.jpa.qualified_dao_service_name %>.class ).countUnsynchronizedByMappingSource( mappingSource ) );
<% end -%>
  }

  protected final void verifyNoOpSync( @javax.annotation.Nonnull final <%= data_module.entity_by_name(:MappingSource).jpa.qualified_name %> mappingSource )
  {
    verifyNoChangesSync( mappingSource );
    assertNoUnsynchronized( mappingSource );
  }

  protected final void verifyNoChangesSync( @javax.annotation.Nonnull final <%= data_module.entity_by_name(:MappingSource).jpa.qualified_name %> mappingSource )
  {
    assertNoChanges( doSyncAndLoadResults( mappingSource, "OK" ) );
  }

  protected final void assertNoChanges( @javax.annotation.Nonnull final iris.syncrecord.server.entity.Synchronization synchronization )
  {
<% data_module.sync.entities_to_synchronize.each do |entity| -%>
    iris.syncrecord.server.test.util.SyncAssert.assertEntityMetrics( synchronization, "<%= entity.qualified_name %>", 0, 0<%= entity.sync.support_remove? ? ', 0' : '' %> );
<% end -%>
  }

  protected final void verifySync( @javax.annotation.Nonnull final <%= data_module.entity_by_name(:MappingSource).jpa.qualified_name %> mappingSource, final int changeCount, @javax.annotation.Nonnull final java.util.function.Consumer<iris.syncrecord.server.entity.Synchronization> verifySyncAction )
  {
    final iris.syncrecord.server.entity.Synchronization synchronization = doSyncAndLoadResults( mappingSource, "OK" );
    iris.syncrecord.server.test.util.SyncAssert.assertNumberOfChangedEntities( synchronization, changeCount );
    verifySyncAction.accept( synchronization );
    assertNoUnsynchronized( mappingSource );
  }

  @org.testng.annotations.Test
  @java.lang.Override
  public void synchronizeDataSource()
    throws Exception
  {
    final java.util.Collection<java.lang.Runnable> onDeleteActions = new java.util.ArrayList<>();
    final <%= data_module.entity_by_name(:MappingSource).jpa.qualified_name %> mappingSource = <%= data_module.jpa.short_test_code %>.createMappingSource( org.realityforge.guiceyloops.shared.ValueUtil.randomString( <%= data_module.entity_by_name(:MappingSource).jpa.qualified_name %>.CODE_MAX_SIZE ) );
    final <%= data_module.entity_by_name(:MappingSource).jpa.qualified_name %> mappingSourceIgnored = <%= data_module.jpa.short_test_code %>.createMappingSource( org.realityforge.guiceyloops.shared.ValueUtil.randomString( <%= data_module.entity_by_name(:MappingSource).jpa.qualified_name %>.CODE_MAX_SIZE ) );
    final <%= data_module.entity_by_name(:MappingSource).jpa.qualified_name %> mappingSourceToDelete = mappingSource;
<% data_module.sync.entities_to_synchronize.each do |entity| -%>
    final <%= entity.sync.master_entity.jpa.qualified_name %> <%= Reality::Naming.camelize( entity.sync.master_entity.name ) %> = create<%= entity.sync.master_entity.name %>( <%= (entity.sync.master_entity.attributes.select{|a| a.reference? && a.referenced_entity.data_module.name == a.entity.data_module.name }.collect{|a| a.referenced_entity.name == a.entity.name ? 'null' : a.referenced_entity.abstract? ? Reality::Naming.camelize( a.referenced_entity.concrete_subtypes[0].name ) : Reality::Naming.camelize( a.referenced_entity.name ) } + ['null']).join(', ') %> );
    final <%= entity.sync.master_entity.jpa.qualified_name %> <%= Reality::Naming.camelize( entity.sync.master_entity.name ) %>Ignored = create<%= entity.sync.master_entity.name %>( <%= (entity.sync.master_entity.attributes.select{|a| a.reference? && a.referenced_entity.data_module.name == a.entity.data_module.name }.collect{|a| a.referenced_entity.name == a.entity.name ? 'null' : a.referenced_entity.abstract? ? "#{Reality::Naming.camelize( a.referenced_entity.concrete_subtypes[0].name )}Ignored" : "#{Reality::Naming.camelize( a.referenced_entity.name )}Ignored" } + ['null']).join(', ') %> );
<% if entity.sync.support_remove? -%>
    final <%= entity.sync.master_entity.jpa.qualified_name %> <%= Reality::Naming.camelize( entity.sync.master_entity.name ) %>Deleted = create<%= entity.sync.master_entity.name %>( <%= (entity.sync.master_entity.attributes.select{|a| a.reference? && a.referenced_entity.data_module.name == a.entity.data_module.name }.collect{|a| a.referenced_entity.name == a.entity.name ? 'null' : a.referenced_entity.abstract? ? Reality::Naming.camelize( a.referenced_entity.concrete_subtypes[0].name ) : Reality::Naming.camelize( a.referenced_entity.name ) + (a.referenced_entity.name.to_s != 'MappingSource' && a.referenced_entity.sync.core_entity.support_remove? ? 'Deleted' : '') } + ['org.realityforge.guiceyloops.shared.ValueUtil.now()']).join(', ') %> );
    final <%= entity.sync.master_entity.jpa.qualified_name %> <%= Reality::Naming.camelize( entity.sync.master_entity.name ) %>ToDelete = create<%= entity.sync.master_entity.name %>ToDelete( <%= (entity.sync.master_entity.attributes.select{|a| a.reference? && a.referenced_entity.data_module.name == a.entity.data_module.name }.collect{|a| a.referenced_entity.abstract? ? "#{Reality::Naming.camelize( a.referenced_entity.concrete_subtypes[0].name )}#{a.referenced_entity.name == a.entity.name ? '' : 'ToDelete'}" : "#{Reality::Naming.camelize( a.referenced_entity.name )}#{a.referenced_entity.name == a.entity.name || (a.referenced_entity.sync.core_entity? && !a.referenced_entity.sync.core_entity.support_remove?) ? '' : 'ToDelete'}" } + ['null']).join(', ') %>, onDeleteActions );
<% end -%>
<% end -%>
    createAdditionalEntities();

    {
      final iris.syncrecord.server.entity.Synchronization synchronization = doSyncAndLoadResults( mappingSource, "OK" );

<% data_module.sync.entities_to_synchronize.each do |entity| -%>
      iris.syncrecord.server.test.util.SyncAssert.assertEntityMetrics( synchronization, "<%= entity.qualified_name %>", getCreateCountFor<%= entity.sync.master_entity.name %>(), 0<%= entity.sync.support_remove? ? ', 0' : '' %> );
<% if entity.sync.support_remove? -%>
      iris.syncrecord.server.test.util.SyncAssert.assertMetric( synchronization, "<%= entity.qualified_name %>.UnsyncRemovals", getUnsyncRemovalsCountFor<%= entity.sync.master_entity.name %>());
<% end -%>
<% end -%>

      assertNoUnsynchronized( mappingSource );
    }

    {
      // Sync should result in zero changes
      verifyNoChangesSync( mappingSource );
      assertNoUnsynchronized( mappingSource );
    }

    {
<% data_module.sync.entities_to_synchronize.each do |entity| -%>
<% if entity.sync.update_via_sync? -%>
      update<%= entity.sync.master_entity.name  %>( <%= Reality::Naming.camelize( entity.sync.master_entity.name ) %> );
<% end -%>
<% end -%>

      // Reflect the deletes
      final iris.syncrecord.server.entity.Synchronization synchronization = doSyncAndLoadResults( mappingSource, "OK" );

<% data_module.sync.entities_to_synchronize.each do |entity| -%>
<% if entity.sync.update_via_sync? -%>
      iris.syncrecord.server.test.util.SyncAssert.assertEntityMetrics( synchronization, "<%= entity.qualified_name %>", 0, getUpdateCountFor<%= entity.sync.master_entity.name %>()<%= entity.sync.support_remove? ? ', 0' : '' %> );
<% else -%>
      iris.syncrecord.server.test.util.SyncAssert.assertEntityMetrics( synchronization, "<%= entity.qualified_name %>", 0, 0<%= entity.sync.support_remove? ? ', 0' : '' %> );
<% end -%>
<% end -%>

      assertNoUnsynchronized( mappingSource );
    }

    {
      onDeleteActions.forEach( java.lang.Runnable::run );
<% data_module.sync.entities_to_synchronize.each do |entity| -%>
<% if entity.sync.delete_via_sync? -%>
      <%= data_module.jpa.short_test_code %>.mark<%= entity.sync.master_entity.name  %>AsDeleted( <%= Reality::Naming.camelize( entity.sync.master_entity.name ) %>ToDelete );
<% end -%>
<% end -%>

      // Reflect the deletes
      final iris.syncrecord.server.entity.Synchronization synchronization = doSyncAndLoadResults( mappingSource, "OK" );

<% data_module.sync.entities_to_synchronize.each do |entity| -%>
<% if entity.sync.delete_via_sync? -%>
      iris.syncrecord.server.test.util.SyncAssert.assertEntityMetrics( synchronization, "<%= entity.qualified_name %>", 0, 0, getRemoveCountFor<%= entity.sync.master_entity.name %>() );
<% end -%>
<% end -%>

      assertNoUnsynchronized( mappingSource );
    }
  }

  protected void createAdditionalEntities()
  {
  }
<% data_module.sync.entities_to_synchronize.each do |entity| -%>

  protected int getSetCountFor<%= entity.sync.master_entity.name %>()
  {
    return 1;
  }

  protected int getCreateCountFor<%= entity.sync.master_entity.name %>()
  {
    return getSetCountFor<%= entity.sync.master_entity.name %>()<% if entity.sync.support_remove? -%> * 2<% end -%>;
  }
<% if entity.sync.support_remove? -%>

  protected int getRemoveCountFor<%= entity.sync.master_entity.name %>()
  {
    return 1;
  }

  protected int getUnsyncRemovalsCountFor<%= entity.sync.master_entity.name %>()
  {
    return getSetCountFor<%= entity.sync.master_entity.name %>();
  }
<% end -%>

  protected int getUpdateCountFor<%= entity.sync.master_entity.name %>()
  {
    return 1;
  }

  @javax.annotation.Nonnull
  protected <%= entity.sync.master_entity.jpa.qualified_name %> create<%= entity.sync.master_entity.name %>( <%= (entity.sync.master_entity.attributes.select{|a| a.reference? && a.referenced_entity.data_module.name == a.entity.data_module.name }.collect{|a| "@javax.annotation.#{a.nullable? ? 'Nullable' : 'Nonnull' } final #{a.referenced_entity.jpa.qualified_name} #{Reality::Naming.camelize( a.name )}" } + ['@javax.annotation.Nullable final java.util.Date deletedAt']).join(', ') %> )
  {
    final String mappingId = org.realityforge.guiceyloops.shared.ValueUtil.randomString();
    return <%= data_module.jpa.short_test_code %>.create<%= entity.sync.master_entity.name %>( <%= entity.sync.master_entity.attributes.collect{|a| sync_generate_attribute_value(a) }.compact.join(', ') %> );
  }

  @javax.annotation.Nonnull
  protected <%= entity.sync.master_entity.jpa.qualified_name %> create<%= entity.sync.master_entity.name %>ToDelete( <%= (entity.sync.master_entity.attributes.select{|a| a.reference? && a.referenced_entity.data_module.name == a.entity.data_module.name }.collect{|a| "@javax.annotation.#{a.nullable? ? 'Nullable' : 'Nonnull' } final #{a.referenced_entity.jpa.qualified_name} #{Reality::Naming.camelize( a.name )}" } + ['@javax.annotation.Nullable final java.util.Date deletedAt']).join(', ') %>, @javax.annotation.Nonnull java.util.Collection<java.lang.Runnable> onDelete )
  {
    return create<%= entity.sync.master_entity.name %>( <%= (entity.sync.master_entity.attributes.select{|a| a.reference? && a.referenced_entity.data_module.name == a.entity.data_module.name }.collect{|a| Reality::Naming.camelize( a.name ) } + ['deletedAt']).join(', ') %> );
  }
<% if entity.sync.update_via_sync? -%>

  protected void update<%= entity.sync.master_entity.name %>( @javax.annotation.Nonnull final <%= entity.sync.master_entity.jpa.qualified_name %> entity )
  {
    em().refresh( entity );
    entity.setMasterSynchronized( false );
    em().flush();
  }
<% end -%>
<% end -%>
}
