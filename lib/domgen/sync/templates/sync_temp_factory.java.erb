/* DO NOT EDIT: File is auto-generated */
package <%= to_package(data_module.sync.qualified_sync_temp_factory_name) %>;

@java.lang.SuppressWarnings( "unused" )
public class <%= data_module.sync.sync_temp_factory_name %>
{
  private final javax.persistence.EntityManager _entityManager;

  public <%= data_module.sync.sync_temp_factory_name %>( final javax.persistence.EntityManager entityManager )
  {
    if( null == entityManager )
    {
      throw new IllegalArgumentException( "entityManager is null" );
    }
    _entityManager = entityManager;
  }

  protected final javax.persistence.EntityManager getEntityManager()
  {
    return _entityManager;
  }
<% data_module.sync.entities_to_synchronize.each do |entity|

  sync_attributes = entity.sync.attributes_to_synchronize.collect{|a| entity.sync.sync_temp_entity.attribute_by_name(a.reference? ? "#{a.name}MappingId" : a.name) }
  immutable_sync_attributes = entity.sync.attributes_to_synchronize.select{|a| a.immutable? }
-%>

  public void resetIdentity<%= entity.qualified_name.gsub('.','') %>()
  {
    getEntityManager().createStoredProcedureQuery( "<%= j_escape_string( "#{entity.sync.sync_temp_entity.data_module.sql.quoted_schema}.#{entity.sync.sync_temp_entity.data_module.sql.dialect.quote("spReseed#{ entity.name }")}") %>" ).execute();
  }

  public int deleteAll<%= entity.qualified_name.gsub('.','') %>( @javax.annotation.Nonnull final java.lang.String mappingSourceCode )
  {
    return getEntityManager().createNativeQuery( "<%= j_escape_string( "DELETE FROM #{entity.sync.sync_temp_entity.sql.qualified_table_name} WHERE #{entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name} = ?") %>" ).setParameter( 1, mappingSourceCode ).executeUpdate();
  }

  @javax.annotation.Nonnull
  private String generate<%= entity.qualified_name.gsub('.','') %>Sql( @javax.annotation.Nonnull final String prefixSql, final boolean prefixContainsWithClause, @javax.annotation.Nonnull final String selectSql )
  {
    return
      prefixSql +
     (prefixContainsWithClause ? ", " : " WITH ") +
     "<%= j_escape_string( "CTE(#{entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name }, #{sync_attributes.collect{|a| a.sql.quoted_column_name }.join(', ') }) AS ") %>\n" +
      "(\n" +
      selectSql + "\n" +
      ")\n" +
      "<%= j_escape_string( "INSERT INTO #{entity.sync.sync_temp_entity.sql.qualified_table_name} (#{entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name }, #{sync_attributes.collect{|a| a.sql.quoted_column_name }.join(', ') })") %>\n" +
      "  SELECT \n" +
      "    CTE.<%= j_escape_string( entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name ) %>, \n" +
<%
  sync_attributes.each_with_index do |a, i|
 comma = i == sync_attributes.size - 1 ? '' : ','
  if immutable_sync_attributes.size > 0 && a.name == :MappingKey -%>
<% if data_module.repository.mssql? -%>
      "    SyncTemp.fnConvertBinaryToBase64(HASHBYTES('SHA1', <%= immutable_sync_attributes.collect{|other|
  is_external_ref = other.reference? && other.referenced_entity.sync.master? && (other.referenced_entity.sync.core_entity.entity != entity)
  is_abstract_ref = is_external_ref && other.referenced_entity.abstract?
  col_name = other.reference? ? "#{other.name}MappingId" : other.name
  "COALESCE(CONVERT(VARCHAR(50),#{
        j_escape_string(is_abstract_ref ? "COALESCE(#{other.referenced_entity.concrete_subtypes.collect{|subtype| "#{other.sql.column_name.to_s}_#{subtype.name}.MappingKey" }.join(', ') })" : is_external_ref ? "#{other.sql.column_name.to_s}Table.MappingKey" : "CTE.#{col_name}")}),'')"
  }.join(" + '.' + \" +\n     \"      ") %>))" +
  "<%= comma %> \n"+
<% elsif data_module.repository.pgsql? -%>
      "    md5(<%= immutable_sync_attributes.collect{|other| "COALESCE(CAST(#{j_escape_string(other.sql.quoted_column_name)} AS VARCHAR(50)),'')"}.join(" || '.' || ") %>)<%= comma %> \n"+
<% else -%>
<% raise 'Unsupported database variant' -%>
<% end -%>
<% else -%>
      "    CTE.<%= j_escape_string(a.sql.quoted_column_name) %><%= comma %> \n" +
<% end -%>
<% end -%>
      "  FROM CTE <%=
  if data_module.repository.mssql?
    immutable_sync_attributes.select{|other| other.reference? && other.referenced_entity.sync.master? && (other.referenced_entity.sync.core_entity.entity != entity)}.collect{|other|
      if other.referenced_entity.concrete?
      "    LEFT JOIN #{other.referenced_entity.sync.core_entity.entity.sync.sync_temp_entity.sql.qualified_table_name} #{other.sql.column_name.to_s}Table ON #{other.sql.column_name.to_s}Table.MappingId = CTE.#{
      entity.sync.sync_temp_entity.attribute_by_name("#{other.name}MappingId").sql.quoted_column_name} "
      else
        other.referenced_entity.concrete_subtypes.collect do |subtype|
        "    LEFT JOIN #{subtype.sync.core_entity.entity.sync.sync_temp_entity.sql.qualified_table_name} #{other.sql.column_name.to_s}_#{subtype.name} ON #{other.sql.column_name.to_s}_#{subtype.name}.MappingId = CTE.#{
        entity.sync.sync_temp_entity.attribute_by_name("#{other.name}MappingId").sql.quoted_column_name} "
        end.join("\" + \n   \"")
      end}.join("\" + \n   \"")
  end %>";
  }

  public int insert<%= entity.qualified_name.gsub('.','') %>BySql( @javax.annotation.Nonnull final String selectSql )
  {
    return executeUpdate( generate<%= entity.qualified_name.gsub('.','') %>Sql( "", false, selectSql ) );
  }

  public int insert<%= entity.qualified_name.gsub('.','') %>BySql( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final String selectSql )
  {
    return executeUpdate( mappingSourceCode, generate<%= entity.qualified_name.gsub('.','') %>Sql( "", false, selectSql ) );
  }

  public int insert<%= entity.qualified_name.gsub('.','') %>BySql( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final String prefixSql, final boolean prefixContainsWithClause, @javax.annotation.Nonnull final String selectSql )
  {
    return executeUpdate( mappingSourceCode, generate<%= entity.qualified_name.gsub('.','') %>Sql( prefixSql, prefixContainsWithClause, selectSql ) );
  }

  public int insert<%= entity.qualified_name.gsub('.','') %>( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final java.lang.String mappingId, <%=

  attribute_names = entity.sync.attributes_to_synchronize.collect{|a| a.name.to_s}

  attrs = []

  entity.attributes.select{|a| attribute_names.include?(a.name.to_s) }.collect do |a|
    if a.reference?
      sa = entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingId")
      attr_name = Reality::Naming.camelize(sa.name)
      attrs << attr_name
      "#{nullability_annotation(sa.nullable?)} final java.lang.String #{attr_name}"
    else
      sa = entity.sync.sync_temp_entity.attribute_by_name(a.name)
      attr_name = Reality::Naming.camelize(sa.name)
      attrs << attr_name
      "#{annotated_type(a, :jpa, :transport, :final => true)} #{attr_name}"
    end
  end.join(', ')
%> )
  {
    return insert<%= entity.qualified_name.gsub('.','') %>( mappingSourceCode, mappingId, mappingId, <%= attrs.join(', ') %> );
  }

  public int insert<%= entity.qualified_name.gsub('.','') %>( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final java.lang.String mappingKey, @javax.annotation.Nonnull final java.lang.String mappingId, <%=

  attribute_names = entity.sync.attributes_to_synchronize.collect{|a| a.name.to_s}

  entity.attributes.select{|a| attribute_names.include?(a.name.to_s) }.collect do |a|
    if a.reference?
      sa = entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingId")
      "#{nullability_annotation(sa.nullable?)} final java.lang.String #{Reality::Naming.camelize(sa.name)}"
    else
      sa = entity.sync.sync_temp_entity.attribute_by_name(a.name)
      "#{annotated_type(a, :jpa, :transport, :final => true)} #{Reality::Naming.camelize(sa.name)}"
    end
  end.join(', ')
%> )
  {
    final String sql = generate<%= entity.qualified_name.gsub('.','') %>Sql( "", false, "<%= j_escape_string("SELECT ?,?,#{entity.sync.attributes_to_synchronize.select{|a| a.name.to_s != 'MappingId'}.collect{|a| '?'}.join(',')}") %>" );

    return getEntityManager().createNativeQuery( sql ).
      setParameter( 1, mappingSourceCode ).
      setParameter( 2, mappingKey ).
      setParameter( 3, mappingId ).
<% entity.attributes.select{|a| attribute_names.include?(a.name.to_s) }.each_with_index do |a, i| -%>
      setParameter( <%= i + 4 %>, <%= Reality::Naming.camelize((a.reference? ? entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingId") : entity.sync.sync_temp_entity.attribute_by_name(a.name)).name) %> ).
<% end -%>
      executeUpdate();
  }
<% end -%>

  public void insertMasterDataSourceIfRequired( @javax.annotation.Nonnull final String dataSource )
  {
    executeUpdate( dataSource,
                   "<%= j_escape_string("INSERT INTO #{data_module.repository.data_module_by_name(data_module.repository.sync.master_data_module).entity_by_name(:MappingSource).sql.qualified_table_name}(#{data_module.sql.dialect.quote(:Code)},#{data_module.sql.dialect.quote(:CreatedAt)}) ") %>" +
                   "  SELECT __MAPPING_SOURCE__, GETDATE() " +
                   "<%= j_escape_string("  WHERE 0 = (SELECT COUNT(*) FROM #{data_module.repository.data_module_by_name(data_module.repository.sync.master_data_module).entity_by_name(:MappingSource).sql.qualified_table_name } WHERE #{data_module.sql.dialect.quote(:Code)} = __MAPPING_SOURCE__)") %>" );
  }

  protected int executeUpdate(  @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final String sql )
  {
    return executeUpdate( sql.replace( "__MAPPING_SOURCE__", "'" + mappingSourceCode + "'" ) );
  }

  protected int executeUpdate( @javax.annotation.Nonnull final String sql )
  {
    return getEntityManager().createNativeQuery( interpolateSql( sql ) ).executeUpdate();
  }

  @javax.annotation.Nonnull
  protected String interpolateSql( @javax.annotation.Nonnull final String sql )
  {
    return sql;
  }
}
