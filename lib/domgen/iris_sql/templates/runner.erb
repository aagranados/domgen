/* DO NOT EDIT: File is autogenerated */
IF EXISTS
  ( SELECT *
    FROM dbo.sysobjects
    WHERE id = OBJECT_ID(N'[Sync].[spImportFromIFIS]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
  DROP PROCEDURE Sync.spImportFromIFIS
GO

CREATE PROCEDURE Sync.spImportFromIFIS
(
   @RollbackOnError INT = 1
)
AS
SET NOCOUNT ON
SET CONCAT_NULL_YIELDS_NULL OFF

DECLARE @BatchID INT, @FD DATETIME, @TD DATETIME,
        @guid VARCHAR(50), @errorStep VARCHAR(50), @error INT

DECLARE @Message VARCHAR(2000)
DECLARE @run_id int
EXEC SyncLogging.spStartRun @run_id = @run_id OUTPUT, @description = 'Import From IFIS'

SELECT @BatchID = ID, @FD = FromDate, @TD = IFISToDate
   FROM  tblBatch
   WHERE IFISToDate  = (SELECT MAX(IFISToDate) FROM tblBatch WHERE IFISToDate IS NOT NULL)

IF @BatchId IS NULL
BEGIN
   EXEC SyncLogging.spLogMessage @run_id, 'Missing previous batch - starting at 1!'
   SET @BatchID = 1
   SET @FD = CONVERT(DATETIME, '1/1/1900')
   SET @TD = GETDATE()
END
ELSE
BEGIN
   SELECT @BatchID = MAX(ID)
   FROM  tblBatch
   SET @BatchID = @BatchID + 1
   SET @FD = @TD
   SET @TD = GETDATE()
END

BEGIN TRAN

SET @errorStep = 'Creating Batch'
SET @guid = CONVERT(VARCHAR(50), newid())
SET @Message = ('Creating batch ' + CONVERT(VARCHAR, @BatchID) +
   ' for [' + CONVERT(VARCHAR, @FD) + '] TO [' + CONVERT(VARCHAR, @TD) + ']' + ' WITH guid ' + CONVERT(VARCHAR, @guid))
EXEC SyncLogging.spLogMessage @run_id, @Message

BEGIN TRY

SET @errorStep = 'Performing Pre-Sync Database consistency check'
EXEC @error = Reflect.spPerformChecks @ShowErrors = 0
IF @error <> 0 GOTO printIssues

INSERT INTO
  tblBatch (GlobalID, FromDate, ID, IFISToDate, LocalToUser)
  VALUES (@guid, @FD, @BatchId, @TD, 0)

SET @error = @@error
IF @error <> 0 GOTO done

<% schema.object_types.select{|object_type| object_type.iris.synchronized? && !object_type.abstract?}.each do |object_type| %>
SET @errorStep = 'Sync-ing <%= object_type.name %>'
EXEC SyncLogging.spLogMessage @run_id, @errorStep
EXEC @error = Sync.spSyncControl<%= object_type.name %> @BatchId, @TD, @run_id
IF @error <> 0 GOTO done
<% end %>

SET @errorStep = 'Performing Post-Sync Database consistency check'
EXEC SyncLogging.spLogMessage @run_id, @errorStep
EXEC @error = Reflect.spPerformChecks @ShowErrors = 0
IF @error <> 0 GOTO printIssues

SET @Message = CONVERT(VARCHAR, getdate()) + ': Completed sync of batch ' + CONVERT(VARCHAR, @BatchId)
EXEC SyncLogging.spLogMessage @run_id, @Message

summary:

DECLARE @TotalChanges INT

EXEC SyncLogging.spLogMessage @run_id, '============== Summary ==============='

<% schema.object_types.select{|object_type| object_type.iris.synchronized? && !object_type.abstract?}.each do |object_type| %>
SELECT @TotalChanges = COUNT(*) FROM <%= object_type.sql.table_name %> WHERE BatchID = @BatchID
SET @Message = ' <%= object_type.name %>: ' + CONVERT(VARCHAR, @TotalChanges) + ''
EXEC SyncLogging.spLogMessage @run_id, @Message
<% end %>

EXEC SyncLogging.spLogMessage @run_id, '============== Summary ==============='

GOTO done

printIssues:

EXEC SyncLogging.spLogMessage @run_id, 'Problems found when running database consistency check:'

DECLARE @Category VARCHAR(50)
DECLARE @Impact INT
DECLARE @Description VARCHAR(500)
DECLARE @SuggestedFix VARCHAR(500)

DECLARE checkCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR
  SELECT Category, Impact, Description, SuggestedFix FROM Reflect.tblIssue

  IF (@@error) <> 0 GOTO cfail

  OPEN checkCursor
  IF (@@error) <> 0 GOTO cfailTECursor

cfetchLoop:

  FETCH checkCursor INTO @Category, @Impact, @Description, @SuggestedFix
  IF (@@error) <> 0 GOTO cfailTECursor

  IF @@FETCH_STATUS <> 0 GOTO cendCollect

  SET @Message = 'Category=' + @Category + ',Impact=' + CONVERT(VARCHAR,@Impact) + ',Description=[' + @Description + '],Suggested Fix=[' + COALESCE(@SuggestedFix,'') + ']'
  EXEC SyncLogging.spLogMessage @run_id, @Message

  GOTO cfetchLoop

cfail:
  EXEC SyncLogging.spLogMessage @run_id, 'Failed to issue cursor!'

  GOTO cdone

cfailTECursor:
  EXEC SyncLogging.spLogMessage @run_id, 'Failed while fetching from issue cursor!'

cendCollect:

  CLOSE checkCursor
  DEALLOCATE checkCursor

cdone:


done:

END TRY

BEGIN CATCH
  EXEC SyncLogging.spLogException @run_id
  SET @error = 42
END CATCH

IF @error <> 0
BEGIN
   DECLARE @spDescribed VARCHAR(255)

   SET @Message = 'IFIS to IRIS Synchronisation FAILED ' + @errorStep + ' with error ' + CONVERT(VARCHAR,@error)

   IF @RollbackOnError = 0
   BEGIN
      SET @Message = @Message + ' => leaving transaction open'
   END
   ELSE
   BEGIN
      ROLLBACK
      SET @Message = @Message + ' => rolling back'
   END

   EXEC SyncLogging.spLogMessage @run_id, @Message
   EXEC SyncLogging.spEndRun @run_id, 0
   WAITFOR DELAY '00:00:02'
   RAISERROR (@Message, 16, 1) WITH SETERROR
END
ELSE
BEGIN
   EXEC SyncLogging.spLogMessage @run_id, 'Successfully completed sync'
   COMMIT
   EXEC SyncLogging.spEndRun @run_id, 1
END

  SELECT * FROM SyncLogging.tblSyncMessage WHERE RunID = @run_id ORDER BY ID
GO
