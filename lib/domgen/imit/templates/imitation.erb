/* DO NOT EDIT: File is auto-generated */
package <%= entity.data_module.imit.imitation_package %>;

import org.realityforge.replicant.client.EntityRepository;

<%= description_javadoc_for(entity, "") %>@javax.annotation.Generated( "Domgen" )
@SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
public <%= entity.abstract? ? "abstract " : "" %>class <%= entity.imit.imitation_name %>
<%= entity.extends ?
  "    extends #{entity.data_module.entity_by_name(entity.extends).imit.qualified_imitation_name}\n" :
  "    implements org.realityforge.replicant.client.Linkable" %>
{
  public static final String TYPE_KEY = "<%= entity.qualified_name %>";
<% if !entity.abstract? %>
  public static final int TRANSPORT_ID = <%= entity.imit.transport_id %>;
<% end %>
<% entity.declared_attributes.select{ |attribute| attribute.imit.client_side? }.each do |attribute|
%>  public static final String <%= uppercase_constantize( attribute.name ) %> = "<%= attribute.name %>";
<% end %>
<%= entity.extends.nil? ? "  protected EntityRepository _repository;\n" : ""
%><% entity.declared_attributes.select{ |attribute| !attribute.abstract? && attribute.imit.client_side? }.each do |attribute| %>
  private <%= annotated_type(attribute, :imit) %> _<%= attribute.imit.field_name %>;
<% if attribute.reference?
%>  private <%= "#{nullability_annotation(attribute.nullable?)} #{attribute.imit.transport_java_type}" %> _<%= attribute.imit.transport_name %>;
<%
   end
   end
%>
<% entity.referencing_attributes.
  select { |attribute| attribute.inverse.imit.traversable? && entity == attribute.referenced_entity && attribute.imit.client_side? }.
  each do |attribute| %><%= if attribute.inverse.multiplicity == :many
          "  private java.util.List<#{attribute.entity.imit.qualified_imitation_name}> #{pluralize(attribute.inverse.relationship_name)};\n"
        else # attribute.inverse.multiplicity == :one || attribute.inverse.multiplicity == :zero_or_one
          "  private #{attribute.entity.imit.qualified_imitation_name} #{attribute.inverse.relationship_name};\n"
        end %>
<% end %>
<% if entity.extends.nil? %>
  private boolean _linking;
  private boolean _delinking;
  private boolean _linked;
<% end %>
  protected <%= entity.imit.imitation_name %>( final EntityRepository repository )
  {
    <%= entity.extends.nil? ? "_repository = repository" : "super( repository )" %>;
  }
<% entity.declared_attributes.select{|attribute| attribute.abstract? && attribute.imit.client_side?}.each do |attribute|
%>  public abstract <%= annotated_type(attribute, :imit) %> get<%= attribute.imit.field_name %>();
<% if attribute.attribute_type == :reference
  %>  abstract <%= attribute.imit.transport_java_type %> get<%= attribute.imit.transport_name %>();
<% end %>
    abstract void set<%= attribute.imit.transport_name %>( <%= attribute.imit.transport_java_type %> value );
<% end %>
<% entity.declared_attributes.select{|attribute| !attribute.abstract? && attribute.imit.client_side?}.each do |attribute|
%>  public <%= annotated_type(attribute, :imit) %> get<%= attribute.imit.field_name %>()
  {
    check<%= attribute.reference? ? "Linked" : "Validity" %>();
    return _<%= attribute.imit.field_name %>;
  }
<% if attribute.attribute_type == :reference
%>  <%= attribute.imit.transport_java_type %> get<%= attribute.imit.transport_name %>()
  {
    return _<%= attribute.referencing_link_name %>;
  }
<% end %>
  void set<%= attribute.imit.transport_name %>( final <%= attribute.imit.transport_java_type %> value )
  {
    checkValidity();
<% if attribute.attribute_type == :reference
%>
    _<%= attribute.imit.field_name %> = null;
    _<%= attribute.referencing_link_name %> = value;
<% else
%>    _<%= attribute.imit.field_name %> = value;
<% end %>  }

<% end %>
<% entity.referencing_attributes.
  select { |attribute| attribute.inverse.imit.traversable? && entity == attribute.referenced_entity && attribute.imit.client_side? }.
  each do |attribute|
        name = attribute.inverse.relationship_name
        type = attribute.entity.imit.qualified_imitation_name
        if attribute.inverse.multiplicity == :many
          plural_name = pluralize(name)
%>
  <%= description_javadoc_for(attribute) %>
  public final java.util.List<<%= type %>> get<%= plural_name %>()
  {
    return java.util.Collections.unmodifiableList( safeGet<%= plural_name %>() );
  }

  /**
   * This method should not be called directly. It is called when linking <%= type %>.
   *
   * @deprecated
   */
  @Deprecated
  public final void add<%= name %>( final <%= type %> value )
  {
    safeGet<%= plural_name %>().add( value );
  }

  /**
   * This method should not be called directly. It is called when delinking or relinking <%= type %>.
   *
   * @deprecated
   */
  @Deprecated
  public final void remove<%= name %>( final <%= type %> value )
  {
    safeGet<%= plural_name %>().remove( value );
  }

  private java.util.List<<%= type %>> safeGet<%= plural_name %>()
  {
    if( null == <%= plural_name %> )
    {
      <%= plural_name %> = new java.util.LinkedList<<%= type %>>();
    }
    return <%= plural_name %>;
  }
<% else %>
  public final <%= nullability_annotation(attribute.inverse.multiplicity != :one)  %> <%= type %> get<%= name %>()
  {
    return <%= name %>;
  }

  /**
   * This method should not be called directly. It is called when delinking or relinking <%= type %>.
   *
   * @deprecated
   */
  @Deprecated
  protected final void set<%= name %>( final <%= type %> value )
  {
    <%= name %> = value;
  }
<% end %>
<% end %>
  protected void invalidate()
  {
    <%= entity.extends.nil? ? "_repository = null" : "super.invalidate()" %>;
    delink();
  }

<%
   linkable_attributes = entity.declared_attributes.select{|attribute| !attribute.abstract? && attribute.reference? && attribute.imit.client_side?}
%>

  protected void performLink()
  {
    <%= entity.extends.nil? ? "if( !_linking ) throw new IllegalStateException( \"performLink invoked from outside link\" )" : "super.performLink()" %>;
<% linkable_attributes.each do |attribute|
%>      link<%= attribute.imit.field_name %>();
<% end %>
  }

  protected void performDelink()
  {
    <%= entity.extends.nil? ? "if( !_delinking ) throw new IllegalStateException( \"performDelink invoked from outside delink\" )" : "super.performDelink()" %>;
<% linkable_attributes.each do |attribute|
%>      delink<%= attribute.imit.field_name %>();
<% end %>
  }

<% linkable_attributes.each do |attribute|
%>
    @SuppressWarnings( "deprecation" )
    private void delink<%= attribute.imit.field_name %>()
    {
      if( null != _<%= attribute.imit.field_name %> )
      {
<% if attribute.inverse.imit.traversable? && attribute.inverse.multiplicity == :many %>        _<%= attribute.imit.field_name %>.remove<%= attribute.inverse.relationship_name %>( this );<% end %>
<% if attribute.inverse.imit.traversable? && attribute.inverse.multiplicity != :many%>        _<%= attribute.imit.field_name %>.set<%= attribute.inverse.relationship_name %>( null );<% end %>
        _<%= attribute.imit.field_name %> = null;
      }
    }

    @SuppressWarnings( "deprecation" )
    private void link<%= attribute.imit.field_name %>()
    {
      if( null == _<%= attribute.imit.field_name %> <%= attribute.nullable? ? "&& null != _#{attribute.referencing_link_name}" : "" %> )
      {
        _<%= attribute.imit.field_name %> = _repository.getByID( <%= attribute.referenced_entity.imit.qualified_imitation_name %>.class, _<%= attribute.referencing_link_name %> );
<% if attribute.inverse.imit.traversable? && attribute.inverse.multiplicity == :many %>        _<%= attribute.imit.field_name %>.add<%= attribute.inverse.relationship_name %>( this );<% end %>
<% if attribute.inverse.imit.traversable? && attribute.inverse.multiplicity != :many%>        _<%= attribute.imit.field_name %>.set<%= attribute.inverse.relationship_name %>( this );<% end %>
      }
    }
<% end %>


<% if entity.extends.nil? %>
  protected final void checkValidity()
  {
    if( null == _repository )
    {
      throw new IllegalStateException( "Method invoked on invalid imitation" );
    }
  }

  protected final void checkLinked()
  {
    checkValidity();
    if( !_linked )
    {
      throw new IllegalStateException( "Method invoked on unlinked imitation" );
    }
  }

  public final void link()
  {
    _linking = true;
    try
    {
      performLink();
      _linked = true;
    }
    finally
    {
      _linking = false;
    }
  }

  public final void delink()
  {
   _delinking = true;
    try
    {
      performDelink();
      _linked = false;
    }
    finally
    {
      _delinking = false;
    }
  }
<% end %>
}