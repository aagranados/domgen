/* DO NOT EDIT: File is auto-generated */
package <%= repository.imit.imitation_package %>;

import org.realityforge.imit.EntityChangeBroker;
import org.realityforge.imit.EntityRepository;

/**
 * Utility class that decodes JSON payloads and applies the changes to the entities
 * in the associated entity repository for the repository "<%= repository.name %>".
 */
@javax.annotation.Generated( "Domgen" )
@SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
public class <%= repository.imit.json_mapper_name %>
{
<% repository.data_modules.select{|data_module| data_module.imit.client_side? }.each do |data_module|
%>  private final <%= data_module.imit.qualified_json_mapper_name %> _<%= data_module.name %>;
<% end %>
  public <%= repository.imit.json_mapper_name %>( final @javax.annotation.Nonnull EntityRepository repository, final @javax.annotation.Nonnull EntityChangeBroker broker )
  {
<% repository.data_modules.select{|data_module| data_module.imit.client_side? }.each do |data_module|
%>    _<%= data_module.name %> = new <%= data_module.imit.qualified_json_mapper_name %>( repository, broker );
<% end %>
  }

  public void create( final Object id, final String typeName, final org.json.JSONObject object )
      throws org.json.JSONException
  {
    <% repository.data_modules.select{|data_module| data_module.imit.client_side? }.each do |data_module|
%>if( typeName.startsWith( <%= data_module.imit.qualified_json_mapper_name %>.TYPE_PREFIX ) )
    {
      _<%= data_module.name %>.create( id, typeName, object );
    }
    else <% end
%>
    {
      throw new IllegalStateException("Unknown type specified " + typeName );
    }
  }

  public void update( final Object id, final String typeName, final org.json.JSONObject object )
      throws org.json.JSONException
  {
    <% repository.data_modules.select{|data_module| data_module.imit.client_side? }.each do |data_module|
%>if( typeName.startsWith( <%= data_module.imit.qualified_json_mapper_name %>.TYPE_PREFIX ) )
    {
      _<%= data_module.name %>.update( id, typeName, object );
    }
    else <% end
%>
    {
      throw new IllegalStateException("Unknown type specified " + typeName );
    }
  }

  public void delete( final Object id, final String typeName )
  {
    <% repository.data_modules.select{|data_module| data_module.imit.client_side? }.each do |data_module|
%>if( typeName.startsWith( <%= data_module.imit.qualified_json_mapper_name %>.TYPE_PREFIX ) )
    {
      _<%= data_module.name %>.delete( id, typeName );
    }
    else <% end
%>
    {
      throw new IllegalStateException("Unknown type specified " + typeName );
    }
  }
}
