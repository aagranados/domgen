/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_abstract_schema_test_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration" } )
@javax.annotation.Generated( "Domgen" )
public abstract class <%= repository.imit.abstract_schema_test_name %>
  extends <%= repository.gwt.qualified_client_test_name %>
{
<% repository.imit.graphs.each do |graph| -%>
  @org.testng.annotations.Test
  public void <%= Reality::Naming.camelize(graph.name) %>Channel()
  {
    org.testng.Assert.fail( "Test not yet implemented" );
  }

<% end -%>
  protected final void assertInstanceChannel( final int channelId )
  {
    org.testng.Assert.assertTrue( getChannel( channelId ).isInstanceChannel() );
  }

  protected final void assertTypeChannel( final int channelId )
  {
    org.testng.Assert.assertTrue( getChannel( channelId ).isTypeChannel() );
  }

  protected final void assertInternalChannel( final int channelId )
  {
    org.testng.Assert.assertFalse( getChannel( channelId ).isExternal() );
  }

  protected final void assertExternalChannel( final int channelId )
  {
    org.testng.Assert.assertTrue( getChannel( channelId ).isExternal() );
  }

  protected final void assertChannelEntities( final int channelId, final int... entityIds )
  {
    final replicant.ChannelSchema channel = getChannel( channelId );
    for ( final int entityId : entityIds )
    {
      ensureEntity( channel, entityId );
    }
    org.testng.Assert.assertEquals( channel.getEntities().size(), entityIds.length, "Expected entity count for channel " + channel );
  }

  @javax.annotation.Nonnull
  protected final replicant.EntitySchema ensureEntity( final int channelId, final int entityId )
  {
    return ensureEntity( getChannel( channelId ), entityId );
  }

  @javax.annotation.Nonnull
  protected final replicant.EntitySchema ensureEntity( @javax.annotation.Nonnull final replicant.ChannelSchema channel, final int entityId )
  {
    final replicant.EntitySchema entity = channel.findEntityById( entityId );
    org.testng.Assert.assertNotNull( entity, "Expected Entity with Id " + entityId + " in channel " + channel );
    return entity;
  }

  @javax.annotation.Nonnull
  private replicant.ChannelSchema getChannel( final int channelId )
  {
    return schema().getChannel( channelId );
  }

  @javax.annotation.Nonnull
  protected final replicant.SystemSchema schema()
  {
    return s( replicant.SystemSchema.class );
  }
}
