/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_abstract_schema_test_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration" } )
@javax.annotation.Generated( "Domgen" )
public abstract class <%= repository.imit.abstract_schema_test_name %>
  extends <%= repository.gwt.qualified_client_test_name %>
{
<% repository.imit.graphs.each do |graph| -%>
  @org.testng.annotations.Test
  public void <%= Reality::Naming.camelize(graph.name) %>Channel()
  {
    org.testng.Assert.fail( "Test not yet implemented" );
  }

<% end -%>
  protected final void assertInstanceChannel( final int channelId, @javax.annotation.Nonnull final Class<?> rootEntityType )
  {
    org.testng.Assert.assertTrue( getChannel( channelId ).isInstanceChannel() );
  }

  protected final void assertTypeChannel( final int channelId )
  {
    org.testng.Assert.assertTrue( getChannel( channelId ).isTypeChannel() );
  }

  protected final void assertInternalChannel( final int channelId )
  {
    org.testng.Assert.assertFalse( getChannel( channelId ).isExternal() );
  }

  protected final void assertExternalChannel( final int channelId )
  {
    org.testng.Assert.assertTrue( getChannel( channelId ).isExternal() );
  }

  protected final void assertCacheableChannel( final int channelId )
  {
    org.testng.Assert.assertTrue( getChannel( channelId ).isCacheable() );
  }

  protected final void assertNotCacheableChannel( final int channelId )
  {
    org.testng.Assert.assertFalse( getChannel( channelId ).isCacheable() );
  }

  protected final void assertChannelEntities( final int channelId, final int... entityIds )
  {
    final replicant.ChannelSchema channel = getChannel( channelId );
    for ( final int entityId : entityIds )
    {
      ensureEntity( channel, entityId );
    }
    org.testng.Assert.assertEquals( channel.getEntities().size(), entityIds.length, "Expected entity count for channel " + channel );
  }

  @javax.annotation.Nonnull
  protected final replicant.EntitySchema ensureEntity( final int channelId, final int entityId )
  {
    return ensureEntity( getChannel( channelId ), entityId );
  }

  @javax.annotation.Nonnull
  protected final replicant.EntitySchema ensureEntity( @javax.annotation.Nonnull final replicant.ChannelSchema channel, final int entityId )
  {
    final replicant.EntitySchema entity = channel.findEntityById( entityId );
    org.testng.Assert.assertNotNull( entity, "Expected Entity with Id " + entityId + " in channel " + channel );
    return entity;
  }

  @javax.annotation.Nonnull
  private replicant.ChannelSchema getChannel( final int channelId )
  {
    return schema().getChannel( channelId );
  }

  protected final void assertInwardChannelLinkCount( final int channelId, final int count )
  {
    final java.util.List<replicant.ChannelLinkSchema> links = schema().getInwardChannelLinks( channelId );
    final replicant.ChannelSchema channel = getChannel( channelId );
    org.testng.Assert.assertEquals( links.size(),
                                    count,
                                    "Expected links to channel " + channel + " from other channels" );
  }

  protected final void assertOutwardChannelLinkCount( final int channelId, final int count )
  {
    final java.util.List<replicant.ChannelLinkSchema> links = schema().getOutwardChannelLinks( channelId );
    final replicant.ChannelSchema channel = getChannel( channelId );
    org.testng.Assert.assertEquals( links.size(),
                                    count,
                                    "Expected links from channel " + channel + " to other channels" );
  }

  protected final void assertInwardChannelLink( final int channelId, final int entityId, final int sourceChannelId, final boolean auto, @javax.annotation.Nonnull final java.lang.String... path )
  {
    final java.util.List<replicant.ChannelLinkSchema> links = schema().getInwardChannelLinks( channelId, entityId );

    final java.util.List<replicant.ChannelLinkSchema> matches =
      links
        .stream()
        .filter( l -> l.getSourceChannelId() == sourceChannelId &&
                      l.isAuto() == auto &&
                      java.lang.String.join( ".", l.getPath() ).equals( java.lang.String.join( ".", path ) ) )
        .collect( java.util.stream.Collectors.toList() );
    org.testng.Assert.assertEquals( matches.size(), 1, "Expected to match a link from channel " + sourceChannelId + " (auto=" + auto + ", path=" + java.util.Arrays.asList( path ) + ")" + " but entity only has the inward links " + links );
  }

  protected final void assertOutwardChannelLink( final int channelId, final int entityId, final int targetChannelId, final boolean auto, @javax.annotation.Nonnull final java.lang.String... path )
  {
    final replicant.ChannelSchema channel = getChannel( channelId );
    final replicant.EntitySchema entity = channel.findEntityById( entityId );
    org.testng.Assert.assertNotNull( entity, "Unable to locate entity with id " + entityId + " in channel " + channel );
    final java.util.List<replicant.ChannelLinkSchema> links = entity.getOutwardChannelLinks( channelId );

    final java.util.List<replicant.ChannelLinkSchema> matches =
      links
        .stream()
        .filter( l -> l.getTargetChannelId() == targetChannelId &&
                      l.isAuto() == auto &&
                      java.lang.String.join( ".", l.getPath() ).equals( java.lang.String.join( ".", path ) ) )
        .collect( java.util.stream.Collectors.toList() );
    org.testng.Assert.assertEquals( matches.size(), 1, "Expected to match a link to channel " + targetChannelId + " (auto=" + auto + ", path=" + java.util.Arrays.asList( path ) + ")" + " but entity only has the outward links " + links );
  }

  @javax.annotation.Nonnull
  protected final replicant.SystemSchema schema()
  {
    return getInjector().getSystemSchema();
  }
}
