/* DO NOT EDIT: File is auto-generated */
package <%= to_package(data_module.imit.qualified_mapper_name) %>;

/**
 * Utility class to map a change to an entity ensuring that the repository is updated as required.
 *
 * NOTE: This must be in the same package as the entities otherwise you will not be able to access the setters.
 */
@javax.annotation.Generated( "Domgen" )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE" } )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc", "PMD.UnusedPrivateField", "PMD.CollapsibleIfStatements", "PMD.SingularField", "PMD.UnusedFormalParameter" } )
public final class <%= data_module.imit.mapper_name %>
{
<% data_module.entities.select{ |entity| entity.imit?  }.each do |entity|
  entity_prefix = "#{Reality::Naming.uppercase_constantize(entity.name)}_"
-%>
  private static final String <%= entity_prefix %>TYPE_KEY = "<%= entity.qualified_name %>";
<% entity.attributes.select{ |attribute| attribute.arez?  }.each do |attribute| -%>
  private static final String <%= entity_prefix %><%= Reality::Naming.uppercase_constantize( attribute.name ) %> = "<%= attribute.name %>";
<% end -%>
<% entity.referencing_attributes.select{ |attribute| attribute.arez? && !attribute.abstract? && attribute.inverse.arez? && attribute.inverse.arez.traversable?}.each do |attribute| -%>
  private static final String <%= entity_prefix %><%= Reality::Naming.uppercase_constantize(attribute.inverse.name) %> = "<%= attribute.inverse.name %>";
<% end -%>
<% end -%>

  private <%= data_module.imit.mapper_name %>()
  {
  }

<% data_module.entities.select { |entity| entity.imit? }.each do |entity| -%>
<% if entity.concrete? -%>

  @javax.annotation.Nonnull
  public static <%= entity.arez.name %> create<%= entity.name %>( @javax.annotation.Nonnull final org.realityforge.replicant.client.EntityLocator entityLocator, @javax.annotation.Nonnull final <%= entity.dao.arez.qualified_repository_name %> repository, final int <%= Reality::Naming.camelize(entity.primary_key.name) %>, @javax.annotation.Nonnull final replicant.messages.EntityChangeData data )
  {
<% entity.attributes.select{|attribute| attribute.arez? && !attribute.primary_key?}.each do |attribute|
    key = "#{Reality::Naming.uppercase_constantize(entity.name)}_#{Reality::Naming.uppercase_constantize(attribute.name)}"
    value_converter =
        if attribute.imit.transport_characteristic_type_key == :date
          "data.getStringValue( #{key} )"
        elsif attribute.imit.transport_characteristic_type_key == :datetime
          "new java.util.Date( new java.math.BigDecimal( data.getStringValue( #{key} ) ).longValueExact() )"
        elsif attribute.imit.transport_characteristic_type_key == :integer
          "data.getIntegerValue( #{key} )"
        elsif attribute.imit.transport_characteristic_type_key == :real
          "data.getIntegerValue( #{key} )"
        elsif attribute.imit.transport_characteristic_type_key == :boolean
          "data.getBooleanValue( #{key} )"
        elsif attribute.imit.transport_characteristic_type_key == :text
          "data.getStringValue( #{key} )"
        elsif attribute.imit.transport_characteristic_type_key == :enumeration && attribute.enumeration.textual_values?
          "data.getStringValue( #{key} )"
        elsif attribute.imit.transport_characteristic_type_key == :enumeration && attribute.enumeration.numeric_values?
          "data.getIntegerValue( #{key} )"
        else
          raise "Unable to convert data type #{attribute.imit.transport_characteristic_type_key} on #{attribute.qualified_name}"
        end
-%>
    final <%= attribute.imit.java_type(:transport, :assume_generated => true) %> <%= Reality::Naming.camelize(attribute.name) %> = <%= attribute.nullable? ? "( data.isNull( #{key} ) ? null : #{value_converter} )" : value_converter %>;
<% end -%>
    return repository.create( entityLocator, <%= entity.attributes.select{|attribute| attribute.arez?}.collect{|attribute| Reality::Naming.camelize(attribute.name)}.join(', ') %> );

  }
<% end -%>

  public static void update<%= entity.name %>( @javax.annotation.Nonnull final <%= entity.arez.name %> entity, @javax.annotation.Nonnull final replicant.messages.EntityChangeData data )
  {
<% if entity.extends
   other = entity.data_module.entity_by_name(entity.extends) -%>
    updateAttributes<%= other.name %>( entity, change );
<% end -%>
<% entity.declared_attributes.select{|attribute| attribute.arez? && !attribute.immutable?}.each do |attribute|
    key = "#{Reality::Naming.uppercase_constantize(entity.name)}_#{Reality::Naming.uppercase_constantize(attribute.name)}"
    value_converter =
        if attribute.imit.transport_characteristic_type_key == :date
          "data.getStringValue( #{key} )"
        elsif attribute.imit.transport_characteristic_type_key == :datetime
          "new java.util.Date( new java.math.BigDecimal( data.getStringValue( #{key} ) ).longValueExact() )"
        elsif attribute.imit.transport_characteristic_type_key == :integer
          "data.getIntegerValue( #{key} )"
        elsif attribute.imit.transport_characteristic_type_key == :real
          "data.getIntegerValue( #{key} )"
        elsif attribute.imit.transport_characteristic_type_key == :boolean
          "data.getBooleanValue( #{key} )"
        elsif attribute.imit.transport_characteristic_type_key == :text
          "data.getStringValue( #{key} )"
        elsif attribute.imit.transport_characteristic_type_key == :enumeration && attribute.enumeration.textual_values?
          "data.getStringValue( #{key} )"
        elsif attribute.imit.transport_characteristic_type_key == :enumeration && attribute.enumeration.numeric_values?
          "data.getIntegerValue( #{key} )"
        else
          raise "Unable to convert data type #{attribute.imit.transport_characteristic_type_key} on #{attribute.qualified_name}"
        end
-%>
    if( data.containsKey( <%= key %> ) )
    {
      entity.set<%= attribute.imit.name(:transport) %>( <%= attribute.nullable? ? "( data.isNull( #{key} ) ? null : #{value_converter} )" : value_converter %> );
    }
<% end -%>
  }
<% end -%>
}
