/* DO NOT EDIT: File is auto-generated */
package <%= to_package(service.imit.qualified_proxy_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc", "unchecked", "Convert2Diamond", "PMD.UnusedPrivateField", "PMD.IfStmtsMustUseBraces", "PMD.SingularField" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "WOC_WRITE_ONLY_COLLECTION_LOCAL", "PSC_PRESIZE_COLLECTIONS" } )
public class <%= service.imit.proxy_name %>
  implements <%= service.imit.qualified_name %>
{
  private final <%= service.gwt_rpc.qualified_facade_service_name %> _service;

  @javax.inject.Inject
  public <%= service.imit.proxy_name %>( @javax.annotation.Nonnull final <%= service.gwt_rpc.qualified_facade_service_name %> service )
  {
    _service = java.util.Objects.requireNonNull( service );
  }
<% service.methods.select{|method| method.imit?}.each do |method|
   method_name = Reality::Naming.camelize(method.name)
   parameters = method.parameters.select{|parameter| !parameter.imit.environmental?}
%>
  public void <%= method_name %>(<%= parameters.collect{|p| "#{annotated_type(p, :imit, :default, :final => true)} #{p.name}" }.join(', ') %>)
  {
    <%= method_name %>(<%= (parameters.collect{|p| p.name } + ['null']).join(', ') %>);
  }
  public void <%= method_name %>(<%= (parameters.collect{|p| "#{annotated_type(p, :imit, :default, :final => true)} #{p.name}" } + ["final @javax.annotation.Nullable #{service.data_module.repository.gwt.qualified_async_callback_name}<#{method.return_value.imit.non_primitive_java_type}> callback"]).join(', ') %>)
  {
    <%= method_name %>(<%= (parameters.collect{|p| p.name } + ['callback','null']).join(', ') %>);
  }

  public void <%= method_name %>(<%= (method.parameters.select{|parameter| !parameter.imit.environmental?}.collect{|p| "#{annotated_type(p, :imit, :default, :final => true)} #{p.name}" } + ["final @javax.annotation.Nullable #{service.data_module.repository.gwt.qualified_async_callback_name}<#{method.return_value.imit.non_primitive_java_type}> callback","final @javax.annotation.Nullable #{service.data_module.repository.gwt.qualified_async_error_callback_name} errorCallback"]).join(', ') %>)
  {
  <% method.parameters.select{|parameter| parameter.reference? && parameter.collection?}.each do |parameter| %>
    <%= annotated_type(parameter, :gwt_rpc, :boundary, :final => true) %> $<%= parameter.name %> = <%= parameter.nullable? ? "null == #{parameter.name} ? null : " : '' %>new java.util.<%=  parameter.collection_type == :set ? 'HashSet' : 'ArrayList' %><<%= parameter.gwt_rpc.java_component_type(:boundary) %>>();
    <% if parameter.nullable? %>if( null != <%= parameter.name %> ) {<% end %>
    for( final <%= parameter.imit.java_component_type %> entity: <%= parameter.name %> )
    {
    <%
       param_value =
       if parameter.reference?
         "entity.get#{parameter.referenced_entity.primary_key.imit.name}()"
       end
    %>
    $<%= parameter.name %>.add( <%= param_value %> );
    }
    <% if parameter.nullable? %>}<% end %>
  <% end %>
  _service.<%= method.gwt_rpc.name %>(<%= method.parameters.select{|parameter| !parameter.imit.environmental?}.collect do |parameter|
  param_value = parameter.name
  if parameter.collection? && parameter.reference?
    param_value = "$#{parameter.name}"
  elsif parameter.reference?
    param_value = "#{parameter.name}.get#{parameter.referenced_entity.primary_key.imit.name}()"
  end
  if parameter.nullable? && !parameter.collection?
    param_value = "null == #{parameter.name} ? null : #{param_value}"
  end
  param_value
end.join(', ') %><%= method.parameters.select{|parameter| !parameter.imit.environmental?}.empty? ? '' : ', ' %>new <%= service.data_module.repository.gwt.qualified_async_callback_name %><<%= method.return_value.imit.non_primitive_java_type(:boundary) %>>()
    {
      public void onSuccess( final <%= method.return_value.imit.non_primitive_java_type(:boundary) %> result )
      {
<%
   if !method.return_value.collection?
     result_string = 'result'
     if method.return_value.reference?
       result_string = "getById( #{method.return_value.referenced_entity.arez.qualified_name}.class, result )"
     end
     if method.return_value.nullable?
       result_string = "null == result ? null : #{result_string}"
     end
   elsif method.return_value.reference?
     result_string = '$result'
   else
     result_string = 'result'
   end
%>
  <% if method.return_value.collection? && method.return_value.reference? %>
        <%= annotated_type(method.return_value, :imit, :default, :final => true) %> $result = <% if method.return_value.nullable? %>null == result ? null : <% end %>new java.util.<%=  method.return_value.collection_type == :set ? 'HashSet' : 'ArrayList' %><<%= method.return_value.imit.java_component_type %>>();
        if( null != result )
        {
          for( final <%= method.return_value.gwt_rpc.java_component_type(:boundary) %> id: result )
          {
          <%
             param_value =
             if method.return_value.reference?
               "getById( #{method.return_value.referenced_entity.arez.qualified_name}.class, id )"
             end
          %>
          $result.add( <%= param_value %> );
          }
        }
<% end %>
        if( null != callback )
        {
          callback.onSuccess( <%= result_string %> );
        }
      }
  }, errorCallback );
  }
<% end -%>
<% if service.methods.any?{|m| m.imit? && m.return_value.reference? } -%>

  @javax.annotation.Nonnull
  private <T> T getById( @javax.annotation.Nonnull final java.lang.Class<T> type, @javax.annotation.Nonnull final java.lang.Object id )
  {
    final T result = arez.Arez.context().safeAction( () -> arez.Arez.context().locator().findById( type, id ) );
    if( arez.Arez.shouldCheckApiInvariants() )
    {
      org.realityforge.braincheck.Guards.apiInvariant( () -> null != result, () -> "Unable to locate entity of type " + type + " and id " + id );
    }
    assert null != result;
    return result;
  }
<% end -%>
}
