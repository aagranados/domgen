/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_abstract_schema_test_name) %>;

/**
 * An autogenerated schema test. Useful for copying and pasting into the real test (which is where the shape of the graph is actually validated)
 */
@java.lang.SuppressWarnings( { "UnusedDeclaration" } )
public final class <%= repository.imit.schema_test_name %>
  extends <%= repository.imit.qualified_abstract_schema_test_name %>
{<% repository.imit.graphs.each do |graph| -%>

  @org.testng.annotations.Test
  public void <%= Reality::Naming.camelize(graph.name) %>Channel()
  {
<% if graph.instance_root? -%>
    assertInstanceChannel( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>, <%= repository.entity_by_name(graph.instance_root).arez.qualified_name %>.class );
<% else -%>
    assertTypeChannel( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> );
<% end -%>
    assertChannelFilterType( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>, replicant.ChannelSchema.FilterType.<%= !graph.filtered? ? 'NONE' : !graph.filter_parameter? ? 'INTERNAL' : graph.filter_parameter.immutable? ? 'STATIC' : 'DYNAMIC' %> );
<% if graph.cacheable? -%>
    assertCacheableChannel( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> );
<% else -%>
    assertNotCacheableChannel( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> );
<% end -%>
<% if graph.external_visibility? -%>
    assertExternalChannel( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> );
<% else -%>
    assertInternalChannel( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> );
<% end -%>
    assertChannelEntities( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>, <%= graph.included_entities.sort.collect{|name| repository.entity_by_name(name)}.collect{|entity| "#{repository.imit.qualified_entity_type_constants_name}.#{Reality::Naming.uppercase_constantize(entity.data_module.name.to_s)}_#{Reality::Naming.uppercase_constantize(entity.name.to_s)}" }.join(', ') %> );
    assertInwardChannelLinkCount( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>, <%= graph.instance_root? ? graph.inward_graph_links.size : 0 %> );
    assertOutwardChannelLinkCount( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>, <%= graph.outward_graph_links.size %> );
<% if graph.instance_root? -%>
<% graph.inward_graph_links.each do |graph_link| -%>
    assertInwardChannelLink( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>,
                             <%= repository.imit.qualified_entity_type_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph_link.imit_attribute.attribute.entity.qualified_name.gsub('.','_')) %>,
                             <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph_link.source_graph) %>,
<% unless graph_link.auto? -%>
                             true,
<% end -%>
                             "<%= graph_link.imit_attribute.attribute.name %><%= graph_link.path.nil? ? '' : '.' + [graph_link.path].flatten.compact.collect{|p|p.to_s}.join(".") %>" );
<% end -%>
<% end -%>
<% graph.outward_graph_links.each do |graph_link| -%>
    assertOutwardChannelLink( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>,
                              <%= repository.imit.qualified_entity_type_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph_link.imit_attribute.attribute.entity.qualified_name.gsub('.','_')) %>,
                              <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph_link.target_graph) %>,
<% unless graph_link.auto? -%>
                              true,
<% end -%>
                              "<%= graph_link.imit_attribute.attribute.name %><%= graph_link.path.nil? ? '' : '.' + [graph_link.path].flatten.compact.collect{|p|p.to_s}.join(".") %>" );
<% end -%>
  }
<% end -%>
}
