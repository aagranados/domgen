/* DO NOT EDIT: File is auto-generated */
package <%= to_package(graph.qualified_react4j_subscription_component_name) %>;

@javax.annotation.Generated( "Domgen" )
@react4j.annotations.View( type = react4j.annotations.View.Type.TRACKING )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "AOM_ABSTRACT_OVERRIDDEN_METHOD" } )
public abstract class <%= graph.react4j_subscription_component_name %>
  extends replicant.react4j.ReplicantSubscription<<%= graph.instance_root? ? graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name : 'java.lang.Void' %>>
{
<% if graph.instance_root? -%>
<% unless graph.application.repository.entity_by_name(graph.instance_root).primary_key.imit.primitive?(:default, :assume_generated => true) -%>
  @javax.annotation.Nonnull
<% end -%>
  @react4j.annotations.Input
  abstract <%= graph.application.repository.entity_by_name(graph.instance_root).primary_key.imit.java_type(:default, :assume_generated => true) %> getId();

  @react4j.annotations.OnInputChange
  void onIdChange( <% unless graph.application.repository.entity_by_name(graph.instance_root).primary_key.imit.primitive?(:default, :assume_generated => true) %>@javax.annotation.Nonnull <% end %>final <%= graph.application.repository.entity_by_name(graph.instance_root).primary_key.imit.java_type(:default, :assume_generated => true) %> id )
  {
    updateAreaOfInterestOnIdChange();
  }

<% end -%>
<% if graph.filter_parameter? -%>
  @javax.annotation.Nonnull
  @react4j.annotations.Input( observable = react4j.annotations.Feature.DISABLE )
  protected abstract <%= Domgen::Java.java_type(graph.filter_parameter, :gwt, :default) %> getFilter();

  @react4j.annotations.OnInputChange
  @arez.annotations.Action( verifyRequired = false )
  void onFilterChange( @javax.annotation.Nonnull final <%= Domgen::Java.java_type(graph.filter_parameter, :gwt, :default) %> filter )
  {
    updateAreaOfInterestOnFilterChange( filter );
  }

<% end -%>
  @react4j.annotations.Input( observable = react4j.annotations.Feature.DISABLE )
  @javax.annotation.Nonnull
  abstract NoResultCallback onLoading();

  @java.lang.Override
  @javax.annotation.Nonnull
  protected NoResultCallback getOnLoading()
  {
    return onLoading();
  }

  @react4j.annotations.Input
  @javax.annotation.Nonnull
  abstract ErrorCallback onLoadFailed();

  @java.lang.Override
  @javax.annotation.Nonnull
  protected ErrorCallback getOnLoadFailed()
  {
    return onLoadFailed();
  }

  @react4j.annotations.Input
  @javax.annotation.Nonnull
  abstract <% if graph.instance_root? -%>Instance<% else -%>Type<% end -%>ResultCallback<% if graph.instance_root? -%><<%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %>><% end -%> onLoaded();

<% unless graph.instance_root? -%>
  @java.lang.Override
  @javax.annotation.Nonnull
  protected TypeResultCallback getOnTypeSubscriptionLoaded()
  {
    return onLoaded();
  }
<% else -%>
  @java.lang.Override
  @javax.annotation.Nonnull
  protected InstanceResultCallback<<%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %>> getOnInstanceSubscriptionLoaded()
  {
    return onLoaded();
  }
<% end -%>

<% if graph.filter_parameter?  && !graph.filter_parameter.immutable? -%>
<% unless graph.instance_root? -%>
  @react4j.annotations.Input
  @javax.annotation.Nonnull
  abstract TypeResultCallback onUpdating();

  @java.lang.Override
  @javax.annotation.Nonnull
  protected TypeResultCallback getOnTypeSubscriptionUpdating()
  {
    return onUpdating();
  }
<% else -%>
  @react4j.annotations.Input
  @javax.annotation.Nonnull
  abstract InstanceResultCallback<<%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %>> onUpdating();

  @java.lang.Override
  @javax.annotation.Nonnull
  protected InstanceResultCallback<<%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %>> getOnInstanceSubscriptionUpdating()
  {
    return onUpdating();
  }
<% end -%>
<% unless graph.instance_root? -%>

  @react4j.annotations.Input
  @javax.annotation.Nonnull
  abstract TypeUpdateErrorCallback onUpdateFailed();

  @java.lang.Override
  @javax.annotation.Nonnull
  protected TypeUpdateErrorCallback getOnTypeSubscriptionUpdateFailed()
  {
    return onUpdateFailed();
  }
<% else -%>

  @react4j.annotations.Input
  @javax.annotation.Nonnull
  abstract InstanceUpdateErrorCallback<<%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %>> onUpdateFailed();

  @java.lang.Override
  @javax.annotation.Nonnull
  protected InstanceUpdateErrorCallback<<%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %>> getOnInstanceSubscriptionUpdateFailed()
  {
    return onUpdateFailed();
  }
<% end -%>
<% unless graph.instance_root? -%>

  @react4j.annotations.Input
  @javax.annotation.Nonnull
  abstract TypeResultCallback onUpdated();

  @java.lang.Override
  @javax.annotation.Nonnull
  protected TypeResultCallback getOnTypeSubscriptionUpdated()
  {
    return onUpdated();
  }
<% else -%>

  @react4j.annotations.Input
  @javax.annotation.Nonnull
  abstract InstanceResultCallback<<%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %>> onUpdated();

  @java.lang.Override
  @javax.annotation.Nonnull
  protected InstanceResultCallback<<%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %>> getOnInstanceSubscriptionUpdated()
  {
    return onUpdated();
  }
<% end -%>

<% end -%>
  @react4j.annotations.Input
  @javax.annotation.Nonnull
  abstract <% if graph.instance_root? -%>Instance<% else -%>Type<% end -%>ResultCallback<% if graph.instance_root? -%><<%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %>><% end -%> onUnloading();

<% unless graph.instance_root? -%>
  @java.lang.Override
  @javax.annotation.Nonnull
  protected TypeResultCallback getOnTypeSubscriptionUnloading()
  {
    return onUnloading();
  }
<% else -%>
  @java.lang.Override
  @javax.annotation.Nonnull
  protected InstanceResultCallback<<%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %>> getOnInstanceSubscriptionUnloading()
  {
    return onUnloading();
  }
<% end -%>

  @react4j.annotations.Input
  @javax.annotation.Nonnull
  abstract NoResultCallback onUnloaded();

  @java.lang.Override
  @javax.annotation.Nonnull
  protected NoResultCallback getOnUnloaded()
  {
    return onUnloaded();
  }

<% if graph.instance_root? -%>
  @react4j.annotations.Input
  @javax.annotation.Nonnull
  abstract NoResultCallback onDeleted();

  @java.lang.Override
  @javax.annotation.Nonnull
  protected NoResultCallback getOnDeleted()
  {
    return onDeleted();
  }
<% else -%>
  @java.lang.Override
  @javax.annotation.Nonnull
  protected NoResultCallback getOnDeleted()
  {
    return () -> null;
  }
<% end -%>
  @javax.annotation.Nonnull
  @java.lang.Override
  protected replicant.ChannelAddress getAddress()
  {
    return new replicant.ChannelAddress( <%= graph.application.repository.imit.qualified_system_constants_name %>.SCHEMA_ID, <%= graph.application.repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>, <%= graph.instance_root? ? 'getId()' : 'null' -%> );
  }
}
