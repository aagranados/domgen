/* DO NOT EDIT: File is auto-generated */
package <%= to_package(graph.qualified_react4j_subscription_component_name) %>;

@javax.annotation.Generated( "Domgen" )
@react4j.annotations.ReactComponent
public abstract class <%= graph.react4j_subscription_component_name %>
  extends org.realityforge.replicant.client.react4j.ReplicantSubscription<<%= graph.instance_root? ? graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name : 'java.lang.Object' %>>
{
  @javax.annotation.Nonnull
  @java.lang.Override
  protected java.lang.Enum getChannelType()
  {
    return <%= graph.application.repository.imit.qualified_graph_enum_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>;
  }
<% if graph.filtered? && !graph.filter_parameter.immutable? -%>

  @FunctionalInterface
  public interface OnUpdateCallback
  {
    @javax.annotation.Nullable
    react4j.core.ReactNode render( @javax.annotation.Nonnull org.realityforge.replicant.client.subscription.Subscription entry<% if graph.instance_root? -%>, @javax.annotation.Nonnull <%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %> entity<% end -%> );
  }
<% end -%>

<% if graph.instance_root? -%>
  @javax.annotation.Nonnull
  @java.lang.Override
  protected Class<<%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %>> getInstanceType()
  {
    return <%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %>.class;
  }

  @javax.annotation.Nonnull
  @react4j.annotations.Prop
  protected abstract <%= graph.application.repository.entity_by_name(graph.instance_root).primary_key.imit.java_type %> getId();
<% end -%>
<% if graph.filtered? -%>

  @java.lang.Override
  protected boolean expectFilter()
  {
    return true;
  }

  @react4j.annotations.Prop
  @javax.annotation.Nonnull
  protected abstract <%= Domgen::Java.java_type(graph.filter_parameter, :gwt, :default) %> getFilter();
<% unless graph.filter_parameter.immutable? -%>

  @java.lang.Override
  protected boolean expectFilterUpdates()
  {
    return true;
  }
<% end -%>
<% end -%>
}
