/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_message_generator_name) %>;

/**
 * Utility class that encodes RPC payloads from JPA entities for the repository "<%= repository.name %>".
 */
@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc", "PMD.CollapsibleIfStatements" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings({"UCF_USELESS_CONTROL_FLOW","NP_LOAD_OF_KNOWN_NULL_VALUE"})
@javax.enterprise.context.ApplicationScoped
@javax.enterprise.inject.Typed( <%= repository.imit.qualified_message_generator_interface_name %>.class )
public class <%= repository.imit.message_generator_name %>
  implements <%= repository.imit.qualified_message_generator_interface_name %>
{
  private final <%= repository.imit.qualified_router_interface_name %> _router;

  @javax.inject.Inject
  public <%= repository.imit.message_generator_name %>( final <%= repository.imit.qualified_router_interface_name %> router )
  {
    _router = router;
  }

  @javax.annotation.Nullable
  public org.realityforge.replicant.server.EntityMessage convertToEntityMessage( final Object object, final boolean isUpdate, final boolean isInitialLoad )
  {
    <%
repository.data_modules.select { |data_module| data_module.imit? }.each do |data_module|
  data_module.entities.each do |entity|
    if entity.imit? && entity.concrete?

      links = entity.attributes.collect{|a| a.imit? ? a.imit.auto_graph_links : [] }.flatten

%>if( <%= entity.jpa.qualified_name %>.class.isInstance( object ) )
    {
      @javax.annotation.Nonnull final <%= entity.jpa.qualified_name %> entity = <%= entity.jpa.qualified_name %>.class.cast( object );
<% if entity.jpa.track_changes? -%>
      if( !isInitialLoad && isUpdate && entity.unmodified() )
      {
        return null;
      }
<% end -%>
      final int id = entity.<%= getter_for(entity.primary_key) %>;
      @javax.annotation.Nonnull final java.util.Map<String, java.io.Serializable> attributes = isUpdate <% if entity.transaction_time? -%>&& null == entity.getDeletedAt() <% end -%>? <%= entity.data_module.repository.imit.qualified_jpa_encoder_name %>.encode<%= entity.name %>( entity ) : null;
      final int transportID = <%= repository.imit.qualified_entity_type_constants_name %>.<%= Reality::Naming.uppercase_constantize(entity.data_module.name.to_s) %>_<%= Reality::Naming.uppercase_constantize(entity.name.to_s) %>;
      @javax.annotation.Nonnull final java.util.Map<String, java.io.Serializable> routingKeys = _router.route<%= entity.name %>( entity );
      @javax.annotation.Nullable final java.util.Set<org.realityforge.replicant.server.ChannelLink> links = <%= links.size == 0 ? 'null' : 'new java.util.HashSet<org.realityforge.replicant.server.ChannelLink>()' %>;
<% if links.size > 0 -%>
<%
  links.each do |graph_link|
    source_graph = repository.imit.graph_by_name(graph_link.source_graph)
    target_graph = repository.imit.graph_by_name(graph_link.target_graph)
    entity = graph_link.imit_attribute.attribute.primary_key? ? graph_link.imit_attribute.attribute.entity : graph_link.imit_attribute.attribute.referenced_entity
    attribute_getter_path = getter_for(graph_link.imit_attribute.attribute)
    getter_path = graph_link.imit_attribute.attribute.reference? ? [attribute_getter_path] : []
    if graph_link.path
      graph_link.path.to_s.split.each_with_index do |attribute_name_path_element, i|
        other = entity.attribute_by_name(attribute_name_path_element)
        getter_path << getter_for(other)
        entity = other.referenced_entity
      end
    end
-%>
<% if graph_link.imit_attribute.attribute.nullable? -%>
        if( null != attributes && null != entity.<%=getter_for(graph_link.imit_attribute.attribute)%> && null != entity.<%= getter_path.join('.') %> )
<% end -%>
        {
          links.add(new org.realityforge.replicant.server.ChannelLink(new org.realityforge.replicant.server.ChannelAddress( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(source_graph.name) %>, <% if source_graph.instance_root? -%>(java.lang.Integer) routingKeys.get( <%= repository.imit.qualified_router_impl_name %>.<%= Reality::Naming.uppercase_constantize(source_graph.name) %>_KEY )<% else -%>null<% end -%> ),new org.realityforge.replicant.server.ChannelAddress( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(target_graph.name) %>,entity.<%= (getter_path + [getter_for(entity.primary_key)]).join('.') %> )));
        }
<% end -%>
<% end -%>
      return new org.realityforge.replicant.server.EntityMessage( id, transportID, System.currentTimeMillis(), routingKeys, attributes, links );
    }
    else <%
    end
  end
end
%>
    {
      return null;
    }
  }
}
