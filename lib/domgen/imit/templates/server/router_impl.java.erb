/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_router_impl_name) %>;

@javax.annotation.Generated( "Domgen" )
@javax.enterprise.context.ApplicationScoped
@javax.enterprise.inject.Typed( <%= repository.imit.qualified_router_interface_name %>.class )
public class <%= repository.imit.router_impl_name %>
  implements <%= repository.imit.qualified_router_interface_name %>
{
<%
  repository.imit.graphs.each do |graph|
    key = "#{Domgen::Naming.uppercase_constantize(graph.name)}_KEY"
-%>
  public static final String <%= key %> = "<%= repository.name %>.<%= graph.name %>";
<% end -%>
<%
  repository.imit.graphs.select{|graph|graph.filtered?}.each do |graph|
    graph.routing_keys.each do |routing_key|
-%>
  public static final String <%= Domgen::Naming.uppercase_constantize(graph.name) %>_<%= Domgen::Naming.uppercase_constantize(routing_key.name) %>_KEY = "<%= repository.name %>.<%= graph.name %>.<%= routing_key.name %>";
<%
    end
  end
-%>
<%
  repository.imit.graphs.select{|graph|graph.filtered?}.each do |graph|
    graph.routing_keys.each do |routing_key|
-%>

  private void put_<%= graph.name %>_<%= routing_key.name %>( @javax.annotation.Nonnull final java.util.Map<String, java.io.Serializable> map, final <%= routing_key.target_attribute.jpa.non_primitive_java_type %> value )
  {
    map.put( <%= Domgen::Naming.uppercase_constantize(graph.name) %>_<%= Domgen::Naming.uppercase_constantize(routing_key.name) %>_KEY, value );
  }
<%
      unless routing_key.target_nullsafe?
        a = routing_key.imit_attribute.attribute
        routing_key.path.each_with_index do |path_element, index|
-%>

  private void route_<%= graph.name %>_<%= routing_key.name %>_<%= index %>( @javax.annotation.Nonnull final java.util.Map<String, java.io.Serializable> map, <%= nullability_annotation(a.nullable?) %> final <%= a.referenced_entity.jpa.qualified_name %> value )
  {
<% if a.nullable? -%>
    if( null != value )
    {
<% end -%>
<% if routing_key.path.size == (index - 1) -%>
    route_<%= graph.name %>_<%= routing_key.name %>_<%= index %>( map, value.<%= getter_for(a) %> );
<% else -%>
    put_<%= graph.name %>_<%= routing_key.name %>( map, value.<%= getter_for(a.referenced_entity.attribute_by_name(routing_key.attribute_name)) %> );
<% end -%>
<% if a.nullable? -%>
    }
<% end -%>
  }

<%
          a = a.referenced_entity.attribute_by_name(path_element)
        end
      end
    end
  end
-%>
<%
repository.data_modules.select { |data_module| data_module.imit? }.each do |data_module|
  data_module.entities.select { |entity| entity.imit? && !entity.abstract? }.each do |entity|
    outgoing_links = entity.attributes.select {|a| a.reference? && a.imit? && a.inverse.imit.traversable? && a.imit.client_side? && a.referenced_entity.imit?}
 -%>

  @javax.annotation.Nonnull
  public java.util.Map<String, java.io.Serializable> route<%= entity.name %>( @javax.annotation.Nonnull <%= entity.jpa.qualified_name %> entity )
  {
    final java.util.HashMap<String, java.io.Serializable> map = new java.util.HashMap<String, java.io.Serializable>();
<% entity.imit.replication_graphs.each do |graph| -%>
    _route<%= graph.name %>_<%= entity.name %>( map, entity );
<% end -%>
    return map;
  }
<% entity.imit.replication_graphs.each do |graph| -%>

  private void _route<%= graph.name %>_<%= entity.name %>( @javax.annotation.Nonnull java.util.Map<String, java.io.Serializable> map, @javax.annotation.Nonnull <%= entity.jpa.qualified_name %> entity )
  {
<% if graph.filtered? -%>
<%
  graph.routing_keys.select{|rk| rk.imit_attribute.attribute.entity.name == entity.name}.each do |routing_key|
    if !routing_key.reference?
-%>
    put_<%= graph.name %>_<%= routing_key.name %>( map, entity.<%= getter_for(routing_key.imit_attribute.attribute) %> );
<% elsif routing_key.target_nullsafe?
    a = routing_key.imit_attribute.attribute
    path = [getter_for(a)]
    routing_key.path.each do |path_element|
      a = a.referenced_entity.attribute_by_name(path_element)
      path << getter_for(a)
    end
    path << getter_for(a.referenced_entity.attribute_by_name(routing_key.attribute_name))
-%>
    put_<%= graph.name %>_<%= routing_key.name %>( map, entity.<%= path.join('.') %> );
<% else -%>
    route_<%= graph.name %>_<%= routing_key.name %>_0( map, entity.<%= getter_for(routing_key.imit_attribute.attribute) %> );
<% end -%>
<% end -%>
<% end -%>
<% if graph.instance_root? && graph.instance_root.to_s == entity.qualified_name.to_s -%>
    map.put( <%= Domgen::Naming.uppercase_constantize(graph.name) %>_KEY, entity.<%= getter_for(entity.primary_key) %> );
<% elsif graph.instance_root? -%>
<% outgoing_links.select{|a| a.referenced_entity.imit.replication_graphs.include?(graph) }.each do |outgoing_link| -%>
<% if outgoing_link.nullable? -%>
    {
      final <%= outgoing_link.jpa.java_type %> v = entity.<%= getter_for(outgoing_link) %>;
      if( null != v )
      {
        _route<%= graph.name %>_<%= outgoing_link.referenced_entity.name %>( map, v );
      }
    }
<% else -%>
    _route<%= graph.name %>_<%= outgoing_link.referenced_entity.name %>( map, entity.<%= getter_for(outgoing_link) %> );
<% end -%>
<% end -%>
<% else -%>
    map.put( <%= Domgen::Naming.uppercase_constantize(graph.name) %>_KEY, Boolean.TRUE );
<% end -%>
  }
<% end -%>
<% end -%>
<% end -%>
}
