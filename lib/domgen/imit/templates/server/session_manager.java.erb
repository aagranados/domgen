/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_session_manager_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "unchecked", "PMD.UnusedPrivateField", "PMD.CollapsibleIfStatements", "PMD.UnusedFormalParameter", "PMD.UnusedLocalVariable" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "DLS_DEAD_LOCAL_STORE", "CC_CYCLOMATIC_COMPLEXITY" } )
@javax.enterprise.context.ApplicationScoped
@javax.transaction.Transactional( javax.transaction.Transactional.TxType.REQUIRED )
@javax.enterprise.inject.Typed( { org.realityforge.replicant.server.EntityMessageEndpoint.class, org.realityforge.replicant.server.transport.ReplicantSessionManager.class, <%= repository.service_by_name(repository.imit.subscription_manager).ejb.qualified_service_name %>.class } )
public class <%= repository.imit.session_manager_name %>
  extends org.realityforge.replicant.server.transport.ReplicantSessionManagerImpl
  implements <%= repository.service_by_name(repository.imit.subscription_manager).ejb.qualified_service_name %>
{
  private static final java.util.logging.Logger LOG = java.util.logging.Logger.getLogger( <%= repository.imit.session_manager_name %>.class.getName() );
  @javax.inject.Inject
  private <%= repository.imit.qualified_graph_encoder_name %> _encoder;
<%
entities = repository.imit.graphs.select{|g| g.instance_root?}.collect{|g|repository.entity_by_name(g.instance_root)}
repository.imit.graphs.select{|g| !g.instance_root?}.each do |graph|
  graph.type_roots.each do |type_root_name|
    entities << repository.entity_by_name(type_root_name)
  end
end

entities.uniq.each do |entity| -%>
  @javax.inject.Inject
  private <%= entity.dao.jpa.qualified_dao_service_name %> _<%= Reality::Naming.camelize("#{entity.data_module.name}#{entity.name}") %>Repository;
<% end -%>
<% if repository.imit.requires_session_context? -%>
  @javax.inject.Inject
  private <%= repository.service_by_name(repository.imit.session_context_service).ejb.qualified_service_name %> _context;
<% end -%>
  @javax.annotation.Resource
  private javax.transaction.TransactionSynchronizationRegistry _registry;
  @javax.inject.Inject
  private org.realityforge.replicant.server.transport.ReplicantMessageBroker _replicantMessageBroker;

  @javax.annotation.Nonnull
  @java.lang.Override
  protected org.realityforge.replicant.server.transport.ReplicantMessageBroker getReplicantMessageBroker()
  {
    return _replicantMessageBroker;
  }

  @javax.annotation.Nonnull
  @java.lang.Override
  protected javax.transaction.TransactionSynchronizationRegistry getRegistry()
  {
    return _registry;
  }

  @javax.annotation.Nonnull
  @java.lang.Override
  public org.realityforge.replicant.server.transport.SystemMetaData getSystemMetaData()
  {
    return <%= repository.imit.qualified_system_metadata_name %>.getSystemMetaData();
  }
<% filtered_instance_graphs = repository.imit.graphs.select{|graph| graph.instance_root? && graph.filtered?} -%>
<% unless filtered_instance_graphs.empty? -%>

  @javax.annotation.Nullable
  protected org.realityforge.replicant.server.EntityMessage filterEntityMessage( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelAddress address, @javax.annotation.Nonnull final org.realityforge.replicant.server.EntityMessage message )
  {
<% repository.imit.graphs.select{|graph| graph.instance_root? && graph.filtered?}.each do |graph| -%>
    if ( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> == address.getChannelId() )
    {
<%
  extra_interest_filter = ''
  graph.routing_keys.each do |routing_key|
    var_name = Reality::Naming.camelize("#{graph.name}_#{routing_key.name}")
    extra_interest_filter << ", #{var_name}"
    param_type = routing_key.target_attribute.jpa.non_primitive_java_type
    param_type = "java.util.List<#{param_type}>" if routing_key.multivalued?
-%>
      final <%= param_type %> <%= var_name %> = (<%= param_type %>) message.getRoutingKeys().get( <%= repository.imit.qualified_server_router_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>_<%= Reality::Naming.uppercase_constantize(routing_key.name) %>_KEY );
<% end -%>
      return _context.filterMessageOfInterestIn<%= graph.name %>Graph( message, session, address.getSubChannelId()<% if graph.filter_parameter? %>, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default)%>) session.getSubscriptionEntry( address ).getFilter()<% end %><%= extra_interest_filter %> );
    }
<% end -%>
    return super.filterEntityMessage( session, address, message );
  }
<% end -%>
<% if repository.imit.graphs.any?{|graph| graph.filter_parameter? && !graph.filter_parameter.immutable? && !graph.outward_graph_links.empty? && graph.outward_graph_links.any?{|graph_link| graph_link.auto? && repository.imit.graph_by_name(graph_link.target_graph).filtered?} } -%>

  @java.lang.Override
  public void propagateSubscriptionFilterUpdate( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session,
                                                 @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelAddress address,
                                                 @javax.annotation.Nullable final java.lang.Object filter,
                                                 @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet )
  {
<% repository.imit.graphs.select{|graph| graph.filter_parameter? && !graph.filter_parameter.immutable? }.each do |graph|
  processed = []
  graph.outward_graph_links.select{|graph_link| graph_link.auto?}.each do |graph_link|
     target_graph = repository.imit.graph_by_name(graph_link.target_graph)
     next unless target_graph.filtered?
     key = "#{graph_link.source_graph}=>#{graph_link.target_graph}"
     next if processed.include?(key)
     processed << key
-%>
    if( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> == address.getChannelId() )
    {
      assert null != filter;
      propagateFilterFrom<%= graph.name %>To<%= target_graph.name %>( session, <% if graph.instance_root? %>address.getSubChannelId(), <% end %>(<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) filter, changeSet );
    }
<% end -%>
<% end -%>
  }
<% repository.imit.graphs.select{|graph| graph.filter_parameter? && !graph.filter_parameter.immutable? }.each do |graph|
  root_type = graph.instance_root? ? Domgen::Java.java_type(repository.entity_by_name(graph.instance_root).primary_key, :ee, :default) : nil
  processed = []
  graph.outward_graph_links.select{|graph_link| graph_link.auto?}.each do |graph_link|
     target_graph = repository.imit.graph_by_name(graph_link.target_graph)
     next unless target_graph.filtered?
     key = "#{graph_link.source_graph}=>#{graph_link.target_graph}"
     next if processed.include?(key)
     processed << key
     instance_root = repository.entity_by_name(target_graph.instance_root)
     entity = repository.entity_by_name(graph.instance_root)
-%>

  private void propagateFilterFrom<%= graph.name %>To<%= target_graph.name %>( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final <%= root_type %> id, @javax.annotation.Nonnull final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet )
  {
<% if graph.instance_root? -%>
    final <%= entity.jpa.qualified_name %> entity = _<%= Reality::Naming.camelize("#{entity.data_module.name}#{entity.name}") %>Repository.getBy<%= entity.primary_key.name %>( id );
<% end -%>
    //Propogate the filter from <%= graph.name %> to downstream graph <%= target_graph.name %>
    for ( final <%= instance_root.jpa.qualified_name %> downstreamEntity : _context.getLinksToUpdateFor<%= graph_link.source_graph %>To<%= target_graph.name %>( <% if graph.instance_root? -%>entity, <% end -%>filter ) )
    {
      subscribe( session, new org.realityforge.replicant.server.ChannelAddress( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(target_graph.name) %>, downstreamEntity.get<%= instance_root.primary_key.name %>() ), true, filter, changeSet );
    }
  }
<% end -%>
<% end -%>
<% end -%>
<% repository.imit.graphs.each do |graph| -%>
<% if graph.filter_parameter? && !graph.filter_parameter.immutable? -%>

  private void collectDataFor<%= graph.name %>SubscriptionUpdate( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelAddress address, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet, final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> originalFilter, final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter )
  {
<%
    if graph.instance_root?
      entity = repository.entity_by_name(graph.instance_root)
-%>
    final <%= entity.primary_key.jpa.java_type %> id = address.getSubChannelId();
    assert null != id;
    final <%= entity.jpa.qualified_name %> entity = _<%= Reality::Naming.camelize("#{entity.data_module.name}#{entity.name}") %>Repository.getBy<%= entity.primary_key.name %>( id );
<% end %>
    _context.collectForFilterChange<%= graph.name %>( session, changeSet, address, <%= graph.instance_root? ? 'entity, ' : '' %>originalFilter, filter );
  }
<% end -%>

  @javax.annotation.Nonnull
  private org.realityforge.replicant.server.transport.SubscribeResult collectDataFor<%= graph.name %>( @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelAddress address, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet<% if graph.filter_parameter? -%>, final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter<% end %>)
  {
<%
    if graph.instance_root?
      entity = repository.entity_by_name(graph.instance_root)
-%>
    final <%= entity.primary_key.jpa.java_type %> id = address.getSubChannelId();
    assert null != id;
    final <%= entity.jpa.qualified_name %> entity = _<%= Reality::Naming.camelize("#{entity.data_module.name}#{entity.name}") %>Repository.findBy<%= entity.primary_key.name %>( id );
    if ( null == entity )
    {
      return new org.realityforge.replicant.server.transport.SubscribeResult( true, null );
    }
    final org.realityforge.replicant.server.EntityMessageSet messages = new org.realityforge.replicant.server.EntityMessageSet();
    _encoder.encode<%= graph.name %>( messages, entity<%= graph.filter_parameter? ? ', filter' : '' %> );
    changeSet.merge( address, messages );
<%
    elsif !graph.external_data_load? && !graph.filtered?
-%>
    // Add to a list so that when routing we limit the number of new entities that are loaded during routing
    final java.util.LinkedList<Object> objects = new java.util.LinkedList<>();
<% graph.type_roots.each do |type_root_name|
  type = repository.entity_by_name(type_root_name)
-%>
    objects.addAll( _<%= Reality::Naming.camelize("#{type.data_module.name}#{type.name}") %>Repository.findAll() );
<% end -%>
    final org.realityforge.replicant.server.EntityMessageSet messages = new org.realityforge.replicant.server.EntityMessageSet();
    _encoder.encodeObjects( messages, objects );
    changeSet.merge( address, messages );
<%
    else
-%>
    _context.collect<%= graph.name %>( address, changeSet<%= graph.filter_parameter.nil? ? '' : ', filter' %> );
<%
    end
-%>
<% if graph.cacheable? -%>
    final String cacheKey = <% if graph.external_cache_management? -%>_context.get<%= graph.name %>CacheKey()<% else %>java.lang.String.valueOf( java.lang.System.currentTimeMillis() )<% end %>;
<% end -%>
    return new org.realityforge.replicant.server.transport.SubscribeResult( false, <%= graph.cacheable? ? 'cacheKey' : 'null' %> );
  }
<% end -%>

  @java.lang.Override
  @javax.annotation.Nonnull
  protected org.realityforge.replicant.server.transport.SubscribeResult collectDataForSubscribe( @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelAddress address, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet, @javax.annotation.Nullable final Object filter )
  {
<% repository.imit.graphs.each do |graph| -%>
    if ( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> == address.getChannelId() )
    {
      return collectDataFor<%= graph.name %>( address, changeSet<% if graph.filter_parameter -%>, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) filter<% end %> );
    }
<% end -%>
    return super.collectDataForSubscribe( address, changeSet, filter );
  }
<% bulk_subscribe_graphs = repository.imit.graphs.select{|graph| graph.instance_root? && graph.bulk_load?} -%>
<% unless bulk_subscribe_graphs.empty? -%>

  @java.lang.Override
  protected boolean bulkCollectDataForSubscribe( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final java.util.List<org.realityforge.replicant.server.ChannelAddress> addresses, @javax.annotation.Nullable final Object filter )
  {
    final org.realityforge.replicant.server.ChannelAddress address = addresses.get( 0 );
<% bulk_subscribe_graphs.each do |graph| -%>
    if ( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> == address.getChannelId() )
    {
      _context.bulkCollectDataFor<%= graph.name %>( session, addresses<% if graph.filter_parameter -%>, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) filter<% end %>, true );
      return true;
    }
<% end -%>
    return super.bulkCollectDataForSubscribe( session, addresses, filter );
  }
<% end -%>
<% bulk_subscription_update_graphs = repository.imit.graphs.select{|graph| graph.instance_root? && graph.bulk_load? && graph.filtered? && !graph.filter_parameter.immutable?} -%>
<% unless bulk_subscription_update_graphs.empty? -%>

  @java.lang.Override
  protected boolean bulkCollectDataForSubscriptionUpdate( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final java.util.List<org.realityforge.replicant.server.ChannelAddress> addresses, @javax.annotation.Nullable final Object originalFilter, @javax.annotation.Nullable final Object filter )
  {
<% bulk_subscription_update_graphs.each do |graph| -%>
    if ( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> == addresses.get( 0 ).getChannelId() )
    {
      assert null != filter;
      _context.bulkCollectDataFor<%= graph.name %>Update( session, addresses, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) originalFilter, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) filter );
<%
  processed = []
  graph.outward_graph_links.select{|graph_link| graph_link.auto?}.each do |graph_link|
     target_graph = repository.imit.graph_by_name(graph_link.target_graph)
     next unless target_graph.filtered?
     key = "#{graph_link.source_graph}=>#{graph_link.target_graph}"
     next if processed.include?(key)
     processed << key
-%>
      for ( final org.realityforge.replicant.server.ChannelAddress address : addresses )
      {
        propagateFilterFrom<%= graph.name %>To<%= target_graph.name %>( session, <% if graph.instance_root? %>address.getSubChannelId(), <% end %>(<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) filter, org.realityforge.replicant.server.ee.EntityMessageCacheUtil.getSessionChanges() );
      }
<% end -%>
      return true;
    }
<% end -%>
    return super.bulkCollectDataForSubscriptionUpdate( session, addresses, originalFilter, filter );
  }
<% end -%>
<% updateable_graphs = repository.imit.graphs.select{|graph| graph.filter_parameter && !graph.filter_parameter.immutable?} -%>
<% if !updateable_graphs.empty? -%>

  @java.lang.Override
  protected void collectDataForSubscriptionUpdate( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session,
                                                   @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelAddress address,
                                                   @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet,
                                                   @javax.annotation.Nullable final Object originalFilter,
                                                   @javax.annotation.Nullable final Object filter )
  {
<% updateable_graphs.each do |graph| -%>
    if ( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> == address.getChannelId() )
    {
      collectDataFor<%= graph.name %>SubscriptionUpdate( session, address, changeSet, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) originalFilter, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) filter );
      return;
    }
<% end -%>
    super.collectDataForSubscriptionUpdate( session, address, changeSet, originalFilter, filter );
  }
<% end -%>
<%
  auto_follow_graph_links =
    repository.imit.graphs.select{|g| g.instance_root? }.collect{|g| g.inward_graph_links.select{|graph_link| graph_link.auto?} }.flatten.select do |graph_link|
      graph = repository.imit.graph_by_name(graph_link.target_graph)
      graph.filter_parameter? && graph.instance_root? && repository.imit.graph_by_name(graph_link.source_graph).instance_root?
    end
-%>
<% if !auto_follow_graph_links.empty? -%>

  @java.lang.Override
  protected boolean shouldFollowLink( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.SubscriptionEntry sourceEntry, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelAddress target )
  {
    final org.realityforge.replicant.server.ChannelAddress source = sourceEntry.getAddress();
    final int sourceChannelId = source.getChannelId();
    final int targetChannelId = target.getChannelId();
<% auto_follow_graph_links.each do |graph_link|
         graph = repository.imit.graph_by_name(graph_link.target_graph)
         source_graph = repository.imit.graph_by_name(graph_link.source_graph)
         entity = repository.entity_by_name(graph.instance_root)
 -%>
    if ( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(source_graph.name) %> == source.getChannelId() && <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> == target.getChannelId() )
    {
      final <%= entity.jpa.qualified_name %> entity = _<%= Reality::Naming.camelize("#{entity.data_module.name}#{entity.name}") %>Repository.getBy<%= entity.primary_key.name %>( target.getSubChannelId() );
      return _context.shouldFollowLinkFrom<%= graph_link.source_graph %>To<%= graph.name %>( entity, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) sourceEntry.getFilter() );
    }
<% end -%>
    return super.shouldFollowLink( sourceEntry, target );
  }
<% end -%>
}
