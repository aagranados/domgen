/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_system_metadata_name) %>;

public final class <%= repository.imit.system_metadata_name %>
{
<% repository.imit.graphs.each do |graph| -%>
  private static final org.realityforge.replicant.server.transport.ChannelMetaData <%= Reality::Naming.uppercase_constantize(graph.name) %> = new org.realityforge.replicant.server.transport.ChannelMetaData( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>, "<%= graph.name %>", <% if graph.instance_root? %><%= repository.imit.qualified_entity_type_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.instance_root.to_s.gsub('.','_')) %><% else %>null<% end %>, org.realityforge.replicant.server.transport.ChannelMetaData.FilterType.<%= graph.filter_parameter.nil? ? 'NONE' : graph.filter_parameter.immutable? ? 'STATIC' : 'DYNAMIC' %>, <%= graph.filter_parameter.nil? ? 'null' : "#{Domgen::Java.non_primitive_java_type(graph.filter_parameter, :ee, :default)}.class" %>, org.realityforge.replicant.server.transport.ChannelMetaData.CacheType.<%= !graph.cacheable? ? 'NONE' : graph.external_cache_management? ? 'EXTERNAL' : 'INTERNAL' %>, <%= graph.bulk_load? %>, <%= graph.external_visibility? %><%= graph.required_type_graphs.empty? ? '' : ', ' %><%= graph.required_type_graphs.collect{|g|Reality::Naming.uppercase_constantize(g.name)}.join(', ') %> );
<% end -%>
  private static final org.realityforge.replicant.server.transport.SystemMetaData $SystemMetaData$ = new org.realityforge.replicant.server.transport.SystemMetaData( "<%= repository.name %>", <%= repository.imit.graphs.collect{|graph| Reality::Naming.uppercase_constantize(graph.name) }.join(', ') %> );

  private <%= repository.imit.system_metadata_name %>()
  {
  }

  public static org.realityforge.replicant.server.transport.SystemMetaData getSystemMetaData()
  {
    return $SystemMetaData$;
  }
}
