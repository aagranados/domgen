/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_jpa_encoder_name) %>;

/**
 * Utility class that encodes payloads from JPA entities for the repository "<%= repository.name %>".
 */
@javax.annotation.Generated( "Domgen" )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE", "JVR_JDBC_VENDOR_RELIANCE", "CE_CLASS_ENVY" } )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
public final class <%= repository.imit.jpa_encoder_name %>
{
  private <%= repository.imit.jpa_encoder_name %>()
  {
  }
<%
repository.data_modules.select { |data_module| data_module.imit? }.each do |data_module|
  data_module.entities.each do |entity|
    if entity.imit? && entity.concrete?
-%>

  public static void encode<%= entity.qualified_name.gsub('.','') %>( @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet, final int channelId, @javax.annotation.Nonnull final java.sql.PreparedStatement statement, @javax.annotation.Nullable final String subChannelColumn )
    throws java.sql.SQLException
  {
    try ( java.sql.ResultSet resultSet = statement.executeQuery() )
    {
      encode<%= entity.qualified_name.gsub('.','') %>( changeSet, channelId, resultSet, subChannelColumn );
    }
  }

  private static void encode<%= entity.qualified_name.gsub('.','') %>( @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet, final int channelId, @javax.annotation.Nonnull final java.sql.ResultSet resultSet, @javax.annotation.Nullable final String subChannelColumn )
    throws java.sql.SQLException
  {
    while ( resultSet.next() )
    {
      final java.util.HashMap<String, java.io.Serializable> attributeValues = new java.util.HashMap<>();
<% entity.attributes.select{|a| a.imit?}.each do |attribute|
    a = attribute.reference? ? attribute.referenced_entity.primary_key : attribute.remote_reference? ? attribute.referenced_remote_entity.primary_key : attribute
    type_suffix = 'Object'
    type_suffix = 'Int' if a.integer? && !attribute.nullable?
    type_suffix = 'Int' if a.imit.transport_characteristic_type_key == :enumeration && a.enumeration.numeric_values?
    type_suffix = 'Long' if a.long? && !attribute.nullable?
    type_suffix = 'Boolean' if a.boolean? && !attribute.nullable?
    type_suffix = 'Date' if a.date? || attribute.date?
    type_suffix = 'Timestamp' if a.datetime?
    type_suffix = 'String' if a.text?
    type_suffix = 'Double' if a.real? && !attribute.nullable?

    db_type = attribute.jpa.java_type(:boundary)

    require_cast = type_suffix == 'Object'

    value_converter =
        if attribute.imit.transport_characteristic_type_key == :datetime
          "$#{attribute.name}.getTime()"
        elsif attribute.imit.transport_characteristic_type_key == :date
          "#{repository.gwt.qualified_rdate_name}.fromDate( $#{attribute.name} ).toString()"
        elsif [:integer, :real, :boolean, :text].include?(attribute.imit.transport_characteristic_type_key)
          "$#{attribute.name}"
        elsif attribute.imit.transport_characteristic_type_key == :enumeration && attribute.enumeration.textual_values?
          db_type = 'java.lang.String'
          type_suffix = 'String'
          "$#{attribute.name}"
        elsif attribute.imit.transport_characteristic_type_key == :enumeration && attribute.enumeration.numeric_values?
          db_type = 'java.lang.Integer'
          require_cast = true
          "$#{attribute.name}"
        else
          Domgen.error("Unable to convert data type #{attribute.imit.transport_characteristic_type_key} on #{attribute.qualified_name}")
        end

-%>
      final <%= db_type %> $<%= attribute.name %> = <%= type_suffix == 'Object' ? "(#{db_type}) " : '' %>resultSet.get<%= type_suffix %>( "<%= attribute.sql.column_name %>" );
<% unless attribute.primary_key? -%>
<% if attribute.nullable? -%>
      if ( null != $<%= attribute.name %> )
      {
        attributeValues.put( "<%= attribute.name %>", <%= value_converter %> );
      }
<% else -%>
      attributeValues.put( "<%= attribute.name %>", <%= value_converter %> );
<% end -%>
<% end -%>
<% end -%>
      final org.realityforge.replicant.server.EntityMessage entityMessage =
        new org.realityforge.replicant.server.EntityMessage( $<%= entity.primary_key.name %>,
                                                             <%= repository.imit.qualified_entity_type_constants_name %>.<%= Reality::Naming.uppercase_constantize(entity.data_module.name.to_s) %>_<%= Reality::Naming.uppercase_constantize(entity.name.to_s) %>,
                                                             0,
                                                             new java.util.HashMap<>(),
                                                             attributeValues,
                                                             null );
      changeSet.merge( new org.realityforge.replicant.server.Change( entityMessage, channelId, null != subChannelColumn ? resultSet.getInt( subChannelColumn ) : null ) );
    }
  }
<%
    end
  end
end
-%>
<% repository.data_modules.select { |data_module| data_module.imit? }.each do |data_module| -%>
<% data_module.entities.select { |entity| entity.imit?  }.each do |entity| -%>
<% if entity.concrete? -%>

  public static java.util.Map<String, java.io.Serializable> encode<%= entity.name %>( final <%= entity.jpa.qualified_name %> entity )
  {
    final java.util.Map<String, java.io.Serializable> attributes = new java.util.HashMap<>();
    encode<%= entity.name %>( entity, attributes );
    return attributes;
  }
<% end -%>

  private static void encode<%= entity.name %>( final <%= entity.jpa.qualified_name %> entity, final java.util.Map<String, java.io.Serializable> attributes )
  {
<% if entity.extends
   other = entity.data_module.entity_by_name(entity.extends) -%>
    encode<%= other.name %>( entity, attributes );
<% end -%>
<% entity.declared_attributes.select{|attribute| attribute.imit? && !attribute.abstract?  && !attribute.remote_reference? }.each do |attribute|
    value_suffix = (attribute.reference? ? ".#{getter_for(attribute.referenced_entity.primary_key)}": attribute.remote_reference? ? ".#{getter_for(attribute.referenced_remote_entity.primary_key)}" : '')
    value_converter =
        if attribute.imit.transport_characteristic_type_key == :datetime
          "$#{attribute.name}.getTime()"
        elsif attribute.imit.transport_characteristic_type_key == :date
          "#{repository.gwt.qualified_rdate_name}.fromDate( $#{attribute.name} ).toString()"
        elsif [:integer, :real, :boolean, :text].include?(attribute.imit.transport_characteristic_type_key)
          "$#{attribute.name}#{value_suffix}"
        elsif attribute.imit.transport_characteristic_type_key == :enumeration && attribute.enumeration.textual_values?
          "$#{attribute.name}.name()"
        elsif attribute.imit.transport_characteristic_type_key == :enumeration && attribute.enumeration.numeric_values?
          "$#{attribute.name}.ordinal()"
        else
          Domgen.error("Unable to convert data type #{attribute.imit.transport_characteristic_type_key} on #{attribute.qualified_name}")
        end
-%>
<% unless attribute.primary_key? -%>
    final <%= nullable_annotate(attribute, attribute.jpa.java_type, false) %> $<%= attribute.name %> = entity.<%= getter_for(attribute) %>;
<% if attribute.nullable? -%>
    if ( null != $<%= attribute.name %> )
    {
      attributes.put( "<%= attribute.name %>", <%= "#{value_converter}" %> );
    }
<% else -%>
    attributes.put( "<%= attribute.name %>", <%= "#{value_converter}" %> );
<% end -%>
<% end -%>
<% end -%>
<% entity.declared_attributes.select{|attribute| attribute.arez? && !attribute.abstract? && attribute.remote_reference? }.each do |attribute| -%>
    attributes.put( "<%= attribute.name %>", entity.get<%= attribute.referencing_link_name %>() );
<% end -%>
  }
<% end -%>
<% end -%>
}
