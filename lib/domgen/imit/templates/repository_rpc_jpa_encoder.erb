/* DO NOT EDIT: File is auto-generated */
package <%= repository.imit.encoder_package %>;

import org.realityforge.imit.transport.rpc.Change;
import org.realityforge.imit.transport.rpc.ChangeSet;

/**
 * * Utility class that encodes RPC payloads from JPA entities for the repository "<%= repository.name %>".
 */
@javax.annotation.Generated( "Domgen" )
@SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
public class <%= repository.imit.rpc_jpa_encoder_name %>
{
  @javax.annotation.Resource
  private javax.transaction.TransactionSynchronizationRegistry _registry;

  @javax.persistence.PostUpdate
  @javax.persistence.PostPersist
  public void postUpdate( final Object object )
  {
    <% repository.imit.concrete_client_side_entities.each do |entity|
%>if( <%= entity.jpa.qualified_entity_name %>.class.isInstance( object ) )
    {
      final Change change = <%= entity.data_module.imit.qualified_rpc_jpa_encoder_name %>.encode<%= entity.name %>( <%= entity.jpa.qualified_entity_name %>.class.cast( object ) );
      addChange( change );
    }
    else <%
   end
%>
    {
      //Ignore
    }
  }

  @javax.persistence.PostRemove
  public void postRemove( final Object object )
  {
<% repository.imit.concrete_client_side_entities.each do |entity|
%>if( <%= entity.jpa.qualified_entity_name %>.class.isInstance( object ) )
    {
      final Change change = <%= entity.data_module.imit.qualified_rpc_jpa_encoder_name %>.encode<%= entity.name %>Remove( <%= entity.jpa.qualified_entity_name %>.class.cast( object ) );
      addChange( change );
    }
    else <%
 end
%>
    {
      //Ignore
    }
  }

  @SuppressWarnings( { "unchecked" } )
  private void addChange( final Change change )
  {
    final javax.transaction.TransactionSynchronizationRegistry registry = getRegistry();
    java.util.LinkedList<Change> changes = (java.util.LinkedList<Change>) registry.getResource( ChangeSet.KEY );
    if ( null == changes )
    {
      changes = new java.util.LinkedList<Change>();
      registry.putResource( ChangeSet.KEY, changes );
    }
    changes.add( change );
  }

  /**
   * Access registry via JNDI. Can not use @javax.annotation.Resource as JPA 2.0 does not
   * support it. However our Guice based test infrastructure uses it.
   */
  private javax.transaction.TransactionSynchronizationRegistry getRegistry()
  {
    if ( null == _registry )
    {
      try
      {
        _registry = (javax.transaction.TransactionSynchronizationRegistry)
          new javax.naming.InitialContext().lookup( "java:comp/TransactionSynchronizationRegistry" );
      }
      catch ( final javax.naming.NamingException ne )
      {
        throw new IllegalStateException( "Unable to locate TransactionSynchronizationRegistry due to " + ne, ne );
      }
    }
    return _registry;
  }
}
