/* DO NOT EDIT: File is auto-generated */
package <%= data_module.imit.imitation_package %>;

import footprints.javancss.imit.EntityChangeBroker;
import footprints.javancss.imit.EntityChangeEvent;

/**
 * Utility class that manages updates of imitations in the "<%= data_module.name %>"
 * data module. The updater ensures that the correct sequence of events are sent
 * through the broker.
 */
@javax.annotation.Generated( "Domgen" )
@SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
class <%= data_module.imit.updater_name %>
{
  private final @javax.annotation.Nonnull EntityChangeBroker _broker;

  <%= data_module.imit.updater_name %>( final @javax.annotation.Nonnull EntityChangeBroker broker )
  {
    _broker = broker;
  }

<% data_module.entities.each do |entity| %>

<% entity.declared_attributes.select{|attribute| attribute.imit.client_side?}.each do |attribute|
    attribute_name = attribute.imit.field_name
    attribute_type = attribute.imit.java_type

    if attribute.attribute_type == :reference
      attribute_name = attribute.referencing_link_name
      attribute_type = attribute.referenced_entity.primary_key.imit.java_type
    end

%>
  void set<%= attribute_name %>_On_<%= entity.name %>( final <%= entity.imit.imitation_name %> entity, final <%= attribute_type %> value )
  {
<%
   getter_text = "entity.get#{attribute_name}()"
   equal_check =
       if attribute.primary_key?
         "false"
       elsif attribute.imit.primitive?
         "#{getter_text} == value"
       elsif !attribute.nullable?
         "#{getter_text}.equals( value )"
       else
         "(null == value && null == #{getter_text}) || #{getter_text}.equals( value )"
       end
%>
    if( !( <%= equal_check %> ) )
    {
      entity.set<%= attribute_name %>( value );
      _broker.attributeChanged( new EntityChangeEvent( EntityChangeEvent.Type.ATTRIBUTE_CHANGED, entity, <%= entity.imit.imitation_name %>.<%= uppercase_constantize( attribute.name ) %>, value ) );
    }
  }
<% end %>
<% end %>
}
