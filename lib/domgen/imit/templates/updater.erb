/* DO NOT EDIT: File is auto-generated */
package <%= data_module.imit.imitation_package %>;

import org.realityforge.replicant.client.EntityChangeBroker;

/**
 * Utility class that manages updates of imitations in the "<%= data_module.name %>"
 * data module. The updater ensures that the correct sequence of events are sent
 * through the broker.
 */
@javax.annotation.Generated( "Domgen" )
@SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
class <%= data_module.imit.updater_name %>
{
  private final @javax.annotation.Nonnull EntityChangeBroker _broker;

  <%= data_module.imit.updater_name %>( final @javax.annotation.Nonnull EntityChangeBroker broker )
  {
    _broker = broker;
  }

<% data_module.entities.each do |entity| %>
  void delete<%= entity.name %>( final <%= entity.imit.imitation_name %> entity )
  {
    entity.invalidate();
    _broker.entityRemoved( entity );
  }

<% entity.declared_attributes.select{|attribute| attribute.imit.client_side?}.each do |attribute| %>
  void set<%= attribute.imit.transport_name %>_On_<%= entity.name %>( final <%= entity.imit.imitation_name %> entity, final <%= attribute.imit.transport_java_type %> value )
  {
<%
   getter_text = "entity.get#{attribute.imit.transport_name}()"
   equal_check =
       if attribute.primary_key?
         "true"
       elsif attribute.imit.transport_primitive?
         "#{getter_text} != value"
       else
         "!( (null == value && null == #{getter_text}) || (null != #{getter_text} && null != value && #{getter_text}.equals( value ) ) )"
       end
%>
    if( <%= equal_check %> )
    {
      entity.set<%= attribute.imit.transport_name %>( value );
      _broker.attributeChanged( entity, <%= entity.imit.imitation_name %>.<%= uppercase_constantize( attribute.name ) %>, value );
    }
  }
<% end %>
<% end %>
}
