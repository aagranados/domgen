/* DO NOT EDIT: File is autogenerated */
<% if !schema.sql.default_schema? %>
IF EXISTS ( SELECT * FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '<%= schema.sql.schema %>')
  DROP SCHEMA <%= q(schema.sql.schema) %>
GO
CREATE SCHEMA <%= q(schema.sql.schema) %>
GO
<% end %>
<%= banner("DDL for Schema '#{schema.name}'") %>
<% schema.object_types.select{|object_type| !object_type.abstract?}.each do |object_type| %>
CREATE TABLE <%= sql_qualify(object_type.schema, object_type.sql.table_name) %>(
<% object_type.attributes.select {|a| a.persistent?}.each do |a|
%>  <%= q(a.sql.column_name) %> <%= a.sql.sql_type %> <%= a.sql.identity? ? 'IDENTITY(1,1) ' : '' %><%= a.nullable? ? '': 'NOT '%>NULL,
<% end
%>  CONSTRAINT PK_<%= object_type.name %> PRIMARY KEY <%= (object_type.sql.indexes.select{|i| i.cluster?}.size == 0) ? '' : 'NON' %>CLUSTERED (<%= q(object_type.primary_key.sql.column_name) %> ASC)
)
GO
<% object_type.sql.indexes.each do |index| %>
CREATE <%= index.unique? ? 'UNIQUE ' : '' %><%= index.cluster? ? '' : 'NON' %>CLUSTERED INDEX [<%= index.name %>] ON <%= sql_qualify(object_type.schema, object_type.sql.table_name) %>
(<%= index.attribute_names.collect {|a| "\n  #{q(object_type.attribute_by_name(a).sql.column_name)} ASC" }.join(",") %>
)
GO
<% end %>
<% object_type.sql.foreign_keys.each do |foreign_key| %>
ALTER TABLE <%= sql_qualify(object_type.schema, object_type.sql.table_name) %>
  ADD CONSTRAINT [FK_<%= object_type.name %>_<%= foreign_key.name %>] FOREIGN KEY (<%= foreign_key.attribute_names.collect{|a| q(object_type.attribute_by_name(a).sql.column_name)}.join(', ') %>)
  REFERENCES <%= sql_qualify(foreign_key.referenced_object_type.schema, foreign_key.referenced_object_type.sql.table_name) %> (<%= foreign_key.referenced_attribute_names.collect{|a| q(foreign_key.referenced_object_type.attribute_by_name(a).sql.column_name)}.join(', ')  %>)
GO
<%
  end
  if object_type.sql.constraints.size > 0 %><%=
    banner("Constraints for #{sql_qualify(object_type.schema, object_type.sql.table_name)}")
%><%
      object_type.sql.constraints.each do |constraint|
%>
ALTER TABLE <%= sql_qualify(object_type.schema, object_type.sql.table_name) %>
  ADD CONSTRAINT CK_<%= s(object_type.name) %>_<%= s(constraint.name) %> CHECK ( <%= s(constraint.sql) %> )
GO
<%    end
    end
    if object_type.codependent_constraints.size > 0 %><%=
      banner("Codependent attribute constraints for #{sql_qualify(object_type.schema, object_type.sql.table_name)}")
%><%
      object_type.codependent_constraints.each do |c|
%>
ALTER TABLE <%= sql_qualify(object_type.schema, object_type.sql.table_name) %>
  ADD CONSTRAINT CK_<%= s(object_type.name) %>_<%= s(c.name) %>_CoDep CHECK ( (<%= c.attribute_names.collect {|name| "#{object_type.attribute_by_name(name).sql.column_name} IS NOT NULL" }.join(" AND ") %>) OR (<%= c.attribute_names.collect {|name| "#{object_type.attribute_by_name(name).sql.column_name} IS NULL" }.join(" AND ") %>) )
GO
<%    end
    end
    object_type.dependency_constraints.each do |c|
%>
ALTER TABLE <%= sql_qualify(object_type.schema, object_type.sql.table_name) %>
  ADD CONSTRAINT CK_<%= s(object_type.name) %>_<%= s(c.name) %>_Dep CHECK ( <%= object_type.attribute_by_name(c.attribute_name).sql.column_name %> IS NULL OR (<%= c.dependent_attribute_names.collect {|name| "#{object_type.attribute_by_name(name).sql.column_name} IS NOT NULL" }.join(" AND ") %>) )
GO
<%
    end
    if object_type.incompatible_constraints.size > 0 %><%=
      banner("Incompatible attribute constraints for #{sql_qualify(object_type.schema, object_type.sql.table_name)}")
%><%
      object_type.incompatible_constraints.each do |c|
%>
ALTER TABLE <%= sql_qualify(object_type.schema, object_type.sql.table_name) %>
  ADD CONSTRAINT CK_<%= s(object_type.name) %>_<%= s(c.name) %>_Incompat CHECK ( <%=
    (0..(c.attribute_names.size)).collect do |i|
      candidate = c.attribute_names[i]
      str = c.attribute_names.collect {|name| "#{object_type.attribute_by_name(name).sql.column_name} IS#{(candidate == name) ? ' NOT' : ''} NULL" }.join(' AND ')
      "(#{str})"
    end.join(" OR ")
%> )
GO
<%    end
    end
    if object_type.sql.validations.size > 0 %><%=
    banner("Validations for #{sql_qualify(object_type.schema, object_type.sql.table_name)}")
%><%
      object_type.sql.validations.each do |validation|
%>
CREATE TRIGGER <%= sql_qualify(schema,sql_name(:trigger,"#{object_type.name}#{validation.name}Validation")) %> ON <%= sql_qualify(object_type.schema, object_type.sql.table_name) %>
AFTER INSERT,UPDATE
AS
  SET NOCOUNT ON
  DECLARE @violations INT
  SELECT @violations = COUNT(*)
  FROM (<%= validation.sql %>) v
  IF (@@error = 0 AND @violations = 0) GOTO done
  ROLLBACK
  RAISERROR ('Failed to pass validation check <%= validation.name %>', 16, 1) WITH SETERROR
done:
GO
<%    end
    end
   immutable_attributes = object_type.attributes.select {|a| a.persistent? && a.immutable? }
   if immutable_attributes.size > 0
    pk = object_type.primary_key
%>
<%= banner("Immutability enforcement for #{sql_qualify(object_type.schema, object_type.sql.table_name)}") %>
CREATE TRIGGER <%= sql_qualify(schema,sql_name(:trigger,"#{object_type.name}Immuter")) %> ON <%= sql_qualify(object_type.schema, object_type.sql.table_name) %>
AFTER UPDATE
AS
   SET NOCOUNT ON
   IF <%= immutable_attributes.collect {|a| "UPDATE(#{a.sql.column_name})" }.join(" OR ") %>
   BEGIN
      DECLARE @violations INT
      SELECT @violations = COUNT(*)
      FROM inserted I, deleted D
      WHERE
        I.<%= pk.sql.column_name %> = D.<%= pk.sql.column_name %> AND
        (
          <%= immutable_attributes.collect {|a| "(I.#{a.sql.column_name} != D.#{a.sql.column_name})" }.join(" OR\n") %>
        )
      IF (@@error = 0 AND @violations = 0) GOTO done
      ROLLBACK
      RAISERROR ('Attempted to modify immutable attributes on <%= sql_qualify(object_type.schema, object_type.sql.table_name) %>', 16, 1) WITH SETERROR
done:
   END
GO
<%
    end
  end
%>
