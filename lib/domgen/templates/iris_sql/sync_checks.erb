/* DO NOT EDIT: File is autogenerated */
<% schema.object_types.select{|object_type| object_type.iris.synchronized? && !object_type.abstract?}.each do |object_type|
  persistent_column_names = object_type.attributes.select{|a| a.persistent? && !a.iris.runtime_managed?}.collect{|a| a.sql.column_name}
%>
IF EXISTS
  ( SELECT *
    FROM dbo.sysobjects
    WHERE id = OBJECT_ID(N'[Sync].[spSyncCheck<%= object_type.name %>Constraints]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
  DROP PROCEDURE Sync.spSyncCheck<%= object_type.name %>Constraints
GO

CREATE PROCEDURE Sync.spSyncCheck<%= object_type.name %>Constraints
(
   @run_id INT
)
AS
  DECLARE @ViolationCount INT
  DECLARE @ErrorMessage VARCHAR(2000)
<% object_type.sql.indexes.select{|index| index.unique?}.each do |index|
   column_names = index.attribute_names.collect {|a| object_type.attribute_by_name(a)}.select{|a|!a.iris.runtime_managed?}.collect {|a| q(a.sql.column_name) }
  check_name = index.name
%>
  SELECT @ViolationCount = COUNT(*) FROM SyncTemp.<%= object_type.sql.table_name %> GROUP BY <%= column_names.join(",") %> HAVING COUNT(*) > 1
  IF (@ViolationCount > 0)
  BEGIN
    EXEC SyncLogging.spLogMessage @run_id, 'Found duplicate rows that violate uniqueness across <%= column_names.join(",") %>'

    DECLARE errorCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR
      SELECT
        <%= persistent_column_names.collect{|c| "'#{c}=' + CONVERT(VARCHAR, T.#{c})"}.join(" + ' ' + ") %> + ' MappingID=' + CONVERT(VARCHAR, T.MappingID) + ' SecondMappingID=' + CONVERT(VARCHAR, T.SecondMappingID) + ' MappingSrc=' + CONVERT(VARCHAR, T.MappingSrc) AS RowDescription
      FROM
         SyncTemp.<%= object_type.sql.table_name %> T
      JOIN (
      SELECT <%= column_names.join(",") %> FROM SyncTemp.<%= object_type.sql.table_name %> GROUP BY <%= column_names.join(",") %> HAVING COUNT(*) > 1
      ) J ON <%= column_names.collect{|c| "J.#{c} = T.#{c}"}.join(' AND ') %>

    IF (@@error) <> 0 GOTO Fail_<%= check_name %>

    OPEN errorCursor

    IF (@@error) <> 0 GOTO FailTECursor_<%= check_name %>

FetchLoop_<%= check_name %>:
    FETCH errorCursor INTO @ErrorMessage
    IF (@@error) <> 0 GOTO FailTECursor_<%= check_name %>

    IF @@FETCH_STATUS <> 0 GOTO EndCollect_<%= check_name %>

    EXEC SyncLogging.spLogMessage @run_id, @ErrorMessage

    GOTO FetchLoop_<%= check_name %>

Fail_<%= check_name %>:
    PRINT 'Failed to open cursor to collect errors!'

    GOTO Done_<%= check_name %>

FailTECursor_<%= check_name %>:
    PRINT 'Failed while retrieving errors!'

EndCollect_<%= check_name %>:
    CLOSE errorCursor
    DEALLOCATE errorCursor

Done_<%= check_name %>:
    RAISERROR('Found duplicate rows that violate uniqueness constraints <%= column_names.join(",") %>) on <%= object_type.name %>', 16, 1) WITH SETERROR
    RETURN 42
  END
<% end %>
<% object_type.attributes.select{|a| a.immutable? && !a.primary_key?}.each do |a|
  check_name = a.name
%>
  SELECT @ViolationCount = COUNT(*) FROM <%= object_type.sql.table_name %> main JOIN SyncTemp.tbl<%= object_type.name %> mapping ON main.MappingID = mapping.MappingID AND main.SecondMappingID = mapping.SecondMappingID AND main.MappingSrc = mapping.MappingSrc AND main.ToDate IS NULL AND main.<%= q(a.sql.column_name) %> <> mapping.<%= q(a.sql.column_name) %>
  IF (@ViolationCount > 0)
  BEGIN
    EXEC SyncLogging.spLogMessage @run_id, 'Attempted to modify immutable attribute <%= object_type.name %>.<%= a.name %>'

    DECLARE errorCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR
      SELECT
        <%= persistent_column_names.collect{|c| "'#{c}=' + CONVERT(VARCHAR, T.#{c})"}.join(" + ' ' + ") %> + ' MappingID=' + CONVERT(VARCHAR, T.MappingID) + ' SecondMappingID=' + CONVERT(VARCHAR, T.SecondMappingID) + ' MappingSrc=' + CONVERT(VARCHAR, T.MappingSrc) AS RowDescription
      FROM
         SyncTemp.tbl<%= object_type.name %> T
      JOIN (
        SELECT main.ID FROM <%= object_type.sql.table_name %> main JOIN SyncTemp.tbl<%= object_type.name %> mapping ON main.MappingID = mapping.MappingID AND main.SecondMappingID = mapping.SecondMappingID AND main.MappingSrc = mapping.MappingSrc AND main.ToDate IS NULL AND main.<%= q(a.sql.column_name) %> <> mapping.<%= q(a.sql.column_name) %>
      ) J ON J.ID = T.ID

    IF (@@error) <> 0 GOTO Fail_<%= check_name %>

    OPEN errorCursor

    IF (@@error) <> 0 GOTO FailTECursor_<%= check_name %>

FetchLoop_<%= check_name %>:
    FETCH errorCursor INTO @ErrorMessage
    IF (@@error) <> 0 GOTO FailTECursor_<%= check_name %>

    IF @@FETCH_STATUS <> 0 GOTO EndCollect_<%= check_name %>

    EXEC SyncLogging.spLogMessage @run_id, @ErrorMessage

    GOTO FetchLoop_<%= check_name %>

Fail_<%= check_name %>:
    PRINT 'Failed to open cursor to collect errors!'

    GOTO Done_<%= check_name %>

FailTECursor_<%= check_name %>:
    PRINT 'Failed while retrieving errors!'

EndCollect_<%= check_name %>:
    CLOSE errorCursor
    DEALLOCATE errorCursor

Done_<%= check_name %>:
    RAISERROR('Attempted to modify immutable attribute <%= object_type.name %>.<%= a.name %>', 16, 1) WITH SETERROR
    RETURN 42
  END
<% end %>
<% object_type.sql.constraints.select{|constraint| constraint.name != "StatusWhenDeleted" }.each do |constraint|
  check_name = constraint.name
%>
  SELECT @ViolationCount = COUNT(*) FROM SyncTemp.tbl<%= object_type.name %> WHERE NOT (<%= constraint.sql %>)
  IF (@ViolationCount > 0)
  BEGIN
    EXEC SyncLogging.spLogMessage @run_id, 'Attempted to violate constraint <%= object_type.name %>.<%= constraint.name %>'

    DECLARE errorCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR
      SELECT
        <%= persistent_column_names.collect{|c| "'#{c}=' + CONVERT(VARCHAR, T.#{c})"}.join(" + ' ' + ") %> + ' MappingID=' + CONVERT(VARCHAR, T.MappingID) + ' SecondMappingID=' + CONVERT(VARCHAR, T.SecondMappingID) + ' MappingSrc=' + CONVERT(VARCHAR, T.MappingSrc) AS RowDescription
      FROM
         SyncTemp.tbl<%= object_type.name %> T
      JOIN (
        SELECT ID FROM SyncTemp.tbl<%= object_type.name %> WHERE NOT (<%= constraint.sql %>)
      ) J ON J.ID = T.ID

    IF (@@error) <> 0 GOTO Fail_<%= check_name %>

    OPEN errorCursor

    IF (@@error) <> 0 GOTO FailTECursor_<%= check_name %>

FetchLoop_<%= check_name %>:
    FETCH errorCursor INTO @ErrorMessage
    IF (@@error) <> 0 GOTO FailTECursor_<%= check_name %>

    IF @@FETCH_STATUS <> 0 GOTO EndCollect_<%= check_name %>

    EXEC SyncLogging.spLogMessage @run_id, @ErrorMessage

    GOTO FetchLoop_<%= check_name %>

Fail_<%= check_name %>:
    PRINT 'Failed to open cursor to collect errors!'

    GOTO Done_<%= check_name %>

FailTECursor_<%= check_name %>:
    PRINT 'Failed while retrieving errors!'

EndCollect_<%= check_name %>:
    CLOSE errorCursor
    DEALLOCATE errorCursor

Done_<%= check_name %>:
    RAISERROR('Attempted to violate constraint <%= object_type.name %>.<%= constraint.name %>', 16, 1) WITH SETERROR
    RETURN 42
  END
<% end %>

  RETURN 0
GO
<% end %>
