/* DO NOT EDIT: File is autogenerated */
package <%= schema.java.package %>;
<% set_iris_mode %>

@javax.annotation.Generated( "Domgen" )
@SuppressWarnings( { "UnusedDeclaration", "LocalCanBeFinal" } )
public class <%= schema.name %>Sync
{
  public static void verify( final iris.beans.AbstractBean bean )
    throws Exception
  {
      final Class<?> type = bean.getClass();
      <% schema.object_types.select{|o|!o.abstract?}.reverse.each do |object_type|
%>if( <%= j_classname(object_type.java.classname) %>.class == type )
      {
        verify<%= object_type.name %>( (<%= j_classname(object_type.java.fully_qualified_name) %>)bean );
      }
      else <% end %>
      {
        throw new IllegalStateException("Unknown type " + type );
      }
   }
<% schema.object_types.select{|o|!o.abstract?}.each do |object_type|
%>
  private static void verify<%= object_type.name %>( final <%= j_classname(object_type.java.fully_qualified_name) %> bean ) throws Exception
  {
      final boolean deleted = bean.isDeleted();
      iris.util.debug.IDebug.syncDebug( "Verifying attributes of " + bean );
<% object_type.attributes.select{|a| a.persistent? && a.reference? && !a.primary_key? && !a.iris.runtime_managed?}.each do |attribute|
     name = attribute.java.field_name
     type = attribute.java.java_type
     referrenced_type = j_classname(attribute.referenced_object.java.fully_qualified_name)
%>
      {
        final <%= attribute.referenced_object.primary_key.java.java_type %> id = bean.get<%= attribute.referencing_link_name %>();
        <% if !attribute.referenced_object.primary_key.java.primitive? %> if ( null != id )<% end %>
        {
          <%= referrenced_type %> other = null;
          try
          {
            other = iris.beans.BeanFactory.getManager().getBean( id, <%= referrenced_type %>.class, false );
          }
          catch ( final iris.beans.MissingBeanException mbe )
          {
            //Ignored
          }
          if ( null == other )
          {
             iris.util.debug.IDebug.syncDebug( "Object of type <%= object_type.name %> links to object of type <%= attribute.referenced_object.name %> via attribute <%= name %> and the other object does not exist for id " + id + ". (this='" + bean + "')" );
             iris.s2s.SyncUtil.syncDeleteBean( bean, iris.util.DateTimeUtilities.now() );
          }
          else if ( other.isDeleted() && !deleted )
          {
             iris.util.debug.IDebug.syncDebug( "Object of type <%= object_type.name %> links to object of type <%= attribute.referenced_object.name %> via attribute <%= name %> and the other object is deleted so deleting current object. (this='" + bean + "',other='" + other + "')" );
             iris.s2s.SyncUtil.syncDeleteBean( other, iris.busobj.BusObjEntry.getEntry( bean ).getToDate() );

          }
        }
      }
<% end %>
      iris.util.debug.IDebug.syncDebug( "Verifying objects linked to " + bean );

      //If current bean is deleted make sure that everyone who links to bean is also deleted
      if ( bean.isDeleted() )
      {
<% object_type.referencing_attributes.select{|a| a.persistent? && !a.iris.runtime_managed?}.each do |attribute| %>
        {
          final java.util.Map<String, Object> criteria = new java.util.HashMap<String, Object>();
          criteria.put( <%= j_classname(attribute.object_type.java.classname) %>.COLUMN_<%= uppercase_constantize(attribute.name) %>, bean.get<%= object_type.primary_key.java.field_name %>() );
          final java.util.List<<%= j_classname(attribute.object_type.java.fully_qualified_name) %>> objects = iris.persist.Transaction.restoreSet( <%= j_classname(attribute.object_type.java.fully_qualified_name) %>.class, criteria, false );
          for ( final <%= j_classname(attribute.object_type.java.fully_qualified_name) %> other : objects )
          {
             if ( !other.isDeleted() )
             {
                // It is possible that the object has changed in memory but not on the
                // DB and that the above restoreSet call should NOT have picked it up.
                // IE: we have crap persistence layer.
                if ( bean.get<%= object_type.primary_key.java.field_name %>()<%= !object_type.primary_key.java.primitive? ? ".equals" : "==" %>( other.get<%= attribute.referencing_link_name %>() ) )
                {
                  iris.util.debug.IDebug.sync( "Deleting an undeleted <%= attribute.object_type.name %> object for deleted <%= object_type.name %> " + bean );
                  iris.s2s.SyncUtil.syncDeleteBean( other, iris.busobj.BusObjEntry.getEntry( bean ).getToDate() );
                }
                else
                {
                   iris.util.debug.IDebug.sync( "Ignoring an undeleted, but unrelated, <%= attribute.object_type.name %> object (" + other + ") for deleted <%= object_type.name %> " + bean );
                }
             }
          }
        }
<% end %>
      }
  }
<% end %>

  public static java.util.Map<String, Object> processSyncData( final Class<?> type, final iris.beans.AbstractBean original, final java.util.Map newData, final boolean conflict )
  {
    <% schema.object_types.select{|o|!o.abstract?}.each do |object_type|
%>if( <%= j_classname(object_type.java.classname) %>.class == type )
      {
        return process<%= object_type.name %>SyncData( (<%= j_classname(object_type.java.classname) %>)original, newData, conflict );
      }
      else <% end %>
      {
        throw new IllegalStateException("Unknown type " + type );
      }
   }

<% schema.object_types.select{|o|!o.abstract?}.each do |object_type|
%>
  private static java.util.Map<String, Object> process<%= object_type.name %>SyncData( final <%= j_classname(object_type.java.classname) %> original, final java.util.Map newData, final boolean conflict )
  {
    final java.util.Map<String, Object> data = new java.util.HashMap<String, Object>();
<% object_type.attributes.select{|a| !a.primary_key? && !a.iris.runtime_managed? && a.persistent? }.each do |attribute|
     name = attribute.java.field_name
     if attribute.persistent?
%>
      {
        Object value = newData.get( <%= j_classname(object_type.java.classname) %>.COLUMN_<%= uppercase_constantize(name) %> );
<% if object_type.name == :PhysicalUnit && attribute.name == :IsMemberOfPool
%>        if ( conflict )
        {
          value = original.get<%= attribute.referencing_link_name %>();
        }<%
   elsif object_type.name == :PhysicalUnit && attribute.name == :Status
%>        if ( conflict )
        {
          value = original.get<%= attribute.name %>().getValue();
        }<%
   elsif object_type.name == :PhysicalUnit && attribute.name == :Notes
%>        if ( conflict )
        {
          value = original.get<%= attribute.name %>();
        }<%
   end
%>        data.put( <%= j_classname(object_type.java.classname) %>.COLUMN_<%= uppercase_constantize(name) %>, value );
      }
<%
     end
   end 
%>
    return data;
  }
<% end %>
}