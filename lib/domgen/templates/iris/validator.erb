/* DO NOT EDIT: File is autogenerated */
package <%= schema.java.package %>;

@javax.annotation.Generated( "Domgen" )
@SuppressWarnings( { "UnusedDeclaration", "PointlessBooleanExpression", "ConstantConditions" } )
public class <%= schema.name %>Validator
{
  public static void validate( final iris.beans.AbstractBean bean )
  {
    <% schema.object_types.reverse.select{|o|!o.abstract?}.each do |object_type|
   name = object_type.name
   type = object_type.iris.classname
%>if( <%= type %>.class.isInstance( bean ) )
    {
      validate<%= name %>( (<%= type %>)bean );
    }
    else <% end %>
    {
      final String message = "Unable to validate bean: " + bean;
      throw new IllegalArgumentException( message );
    }
  }

  public static void validate( final Class<?> type, final java.util.Map<String, Object> data, final boolean truncate )
  {
    <% schema.object_types.reverse.select{|o|!o.abstract?}.each do |object_type|
   name = object_type.name
   type = object_type.iris.classname
%>if( <%= type %>.class == type )
    {
      validate<%= name %>( data, truncate );
    }
    else <% end %>
    {
      final String message = "Unable to validate unknown type: " + type.getName();
      throw new IllegalArgumentException( message );
    }
  }

<% schema.object_types.select{|o|!o.abstract?}.each do |object_type|
   name = object_type.name
   type = object_type.iris.classname
%>
   private static void validate<%= name %>( final java.util.Map<String, Object> data, final boolean truncate )
   {
      if( truncate )
      {<%
object_type.attributes.select{|a|a.attribute_type == :string && !a.length.nil? && !a.iris.runtime_managed?}.each do |attribute|
%>
        {
          final String value = (String) data.get( <%= object_type.iris.classname %>.COLUMN_<%= uppercase_constantize(attribute.name) %> );
          if ( value != null && value.length() > <%= attribute.length %> )
          {
            if ( iris.util.debug.IDebug.isGeneralEnabled() )
            {
              final String message = "Attribute <%= object_type.name %>.<%= attribute.name %> exceeded (and was truncated to) maximum length of <%= attribute.length %> with value " + value;
              iris.util.debug.IDebug.general( message );
            }
            data.put( <%= object_type.iris.classname %>.COLUMN_<%= uppercase_constantize(attribute.name) %>, value.substring( 0, <%= attribute.length %> ) );
          }
        }
<% end %>        
      }
      final java.util.Map<Object, Object> testData = new java.util.HashMap<Object, Object>();
      testData.putAll( data );
      testData.remove( iris.busobj.BusObjEntry.BATCH_ID );
      testData.remove( iris.busobj.BusObjEntry.TO_DATE );
      testData.remove( iris.beans.BeanManager.NEW_MARKER );
      testData.remove( <%= schema.name %>Codec.TYPECODE );

      <%
      object_type.attributes.select{|a|a.persistent? && !a.iris.runtime_managed? && !a.primary_key?}.each do |attribute|
      %>
      {
        final Object value = testData.remove( <%= object_type.iris.classname %>.COLUMN_<%= uppercase_constantize(attribute.name) %> );
        if ( <%= attribute.persistent? ? "iris.beans.BeanFactory.isServerSide()" : "false" %> || <%= attribute.iris.client_side? ? "iris.beans.BeanFactory.isClientSide()" : "false" %> )
        {<%
  if !attribute.iris.client_side? %>
          if ( iris.beans.BeanFactory.isClientSide() && null != value )
          {
            final String message =
               "Non-null value for <%= object_type.name %>.<%= attribute.name %> on the clientside when it is not a clientside attribute.";
            throw new IllegalArgumentException( message );
          }<%
  end
  if !attribute.nullable? %>        
         if ( null == value )
         {
            final String message =
              "Null value for <%= object_type.name %>.<%= attribute.name %> for non nullable attribute.";
            throw new IllegalArgumentException( message );
         }<%
  end
  if attribute.attribute_type != :i_enum && !attribute.java.primitive?
   field_type = attribute.reference? ? attribute.referenced_object.primary_key.java.non_primitive_java_type : attribute.java.non_primitive_java_type
  %>
         if ( null != value && !<%= field_type %>.class.isInstance( value ) )
         {
            final String message =
              "Value for <%= object_type.name %>.<%= attribute.name %> was not of correct type <%= field_type %>. Value = " + value;
            throw new IllegalArgumentException( message );
         }<%
  end
  if attribute.attribute_type == :string && !attribute.length.nil? %>
         if ( value != null && ((String) value).length() > <%= attribute.length %> )
         {
            final String message =
              "Attribute <%= object_type.name %>.<%= attribute.name %> exceeded maximum length of <%= attribute.length %> with value " + value;
            throw new IllegalArgumentException( message );
         }<%
  end %>
        }
      }
<%
end %>
  }

  private static void validate<%= name %>( final <%= object_type.iris.classname %> bean )
  {<%
      object_type.attributes.select{|a|a.persistent? && !a.iris.runtime_managed?}.each do |attribute|
      name = attribute.reference? ? attribute.referencing_link_name : attribute.java.field_name
%>    {
      final Object value = bean.get<%= name %>();
      if ( <%= attribute.persistent? ? "iris.beans.BeanFactory.isServerSide()" : "false" %> || <%= attribute.iris.client_side? ? "iris.beans.BeanFactory.isClientSide()" : "false" %> )
      {<%
  if !attribute.iris.client_side? %>
        if ( iris.beans.BeanFactory.isClientSide() && null != value )
        {
          final String message =
            "Non-null value for <%= object_type.name %>.<%= attribute.name %> on the clientside when it is not a clientside attribute.";
          throw new IllegalArgumentException( message );
        }<%
  end
  if !attribute.nullable? %>
        if ( null == value )
        {
          final String message =
            "Null value for <%= object_type.name %>.<%= attribute.name %> for non nullable attribute.";
          throw new IllegalArgumentException( message );
        }<%
  end
  if attribute.attribute_type != :i_enum && !attribute.java.primitive?
   field_type = attribute.reference? ? attribute.referenced_object.primary_key.java.non_primitive_java_type : attribute.java.non_primitive_java_type
%>
        if ( null != value && !<%= field_type %>.class.isInstance( value ) )
        {
          final String message =
            "Value for <%= object_type.name %>.<%= attribute.name %> was not of correct type <%= field_type %>. Value = " + value;
          throw new IllegalArgumentException( message );
        }<%
  end
  if attribute.attribute_type == :string && !attribute.length.nil? %>
        if ( value != null && ((String) value).length() > <%= attribute.length %> )
        {
          final String message =
             "Attribute <%= object_type.name %>.<%= attribute.name %> exceeded maximum length of <%= attribute.length %> with value " + value;
          throw new IllegalArgumentException( message );
        }<%
  end %>
      }
    }
<%
end %>
  }
<% end %>
}