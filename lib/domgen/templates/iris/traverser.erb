/* DO NOT EDIT: File is autogenerated */
package <%= schema.java.package %>.visitor;

import iris.model.visitor.traversers.FilterDelegate;
import iris.model.visitor.traversers.TraversalEntry;
import iris.model.visitor.traversers.TraversalStrategy;

@javax.annotation.Generated( "Domgen" )
public class Traverser
  extends iris.model.visitor.traversers.AbstractTraverser
{
  public static Traverser createBaseTraverser()
  {
    final Traverser traverser = new Traverser();
<% schema.object_types.select{|o|!o.abstract? && !o.iris.metadata? && !o.iris.metadata_that_can_change? }.each do |object_type| %>
    {
      final TraversalStrategy strategy = new TraversalStrategy( <%= j_classname(object_type.java.fully_qualified_name) %>.class );
<% object_type.referencing_attributes.select{|a| !a.iris.runtime_managed? && !a.object_type.iris.metadata? && !a.object_type.iris.metadata_that_can_change? && a.iris.client_side?}.each do |attribute|
%>      strategy.addRelationship( <%= j_classname(object_type.java.fully_qualified_name) %>.<%= uppercase_constantize(attribute.inverse_relationship_name) %>_RELATION_ID );
<%
   end
   object_type.attributes.select{|a| !a.iris.runtime_managed? && a.reference? && !a.referenced_object.iris.metadata? && !a.referenced_object.iris.metadata_that_can_change? && a.iris.client_side?}.each do |attribute|
%>      strategy.addAttribute( <%= j_classname(attribute.object_type.java.fully_qualified_name) %>.<%= uppercase_constantize(attribute.name) %>_ATTR_ID );
<% end %>      traverser.addStrategy( strategy );
    }
<% end %>
    return traverser;
  }

  protected void doTraverseBean( final iris.beans.AbstractBean bean,
                       final String linkerAttributeID,
                       final iris.beans.AbstractBean linker,
                       final Filter filter,
                       final FilterDelegate delegate,
                       final <%= schema.java.package %>.visitor.Visitor visitor )
  {
    if( null == bean )
    {
      //No action
    }
<% schema.object_types.select{|o|!o.abstract?}.reverse.each do |object_type|
  name = object_type.name
  type = j_classname(object_type.java.fully_qualified_name)
%>    else if( bean instanceof <%= type %> )
    {
      doTraverse<%= name %>( (<%= type %>)bean, linkerAttributeID, linker, filter, delegate, visitor );
    }
<% end %>
    else if( bean instanceof iris.beans.NotDeployedNode )
    {
      doTraverseNotDeployedNode( (iris.beans.NotDeployedNode) bean, linkerAttributeID, linker, filter, delegate, visitor );
    }
    else if( bean instanceof iris.beans.DummyBean )
    {
      doTraverseDummy( (iris.beans.DummyBean) bean, linkerAttributeID, linker, filter, delegate, visitor );
    }
    else
    {
      throw new IllegalStateException( "Unknown bean type " + bean.getClass() );
    }
  }

  protected void doTraverseNotDeployedNode( final iris.beans.NotDeployedNode bean,
                        final String linkerAttributeID,
                        final iris.beans.AbstractBean linker,
                        final Filter filter,
                        final FilterDelegate delegate,
                        final <%= schema.java.package %>.visitor.Visitor visitor )
  {
    final int filterType = filter.acceptNotDeployedNode( bean, delegate, linkerAttributeID, linker );

    if( filterType == Filter.REJECT )
    {
      return;
    }

    if( null != visitor && ( (filterType & Filter.VISIT_ONLY) == Filter.VISIT_ONLY ) )
    {
      visitor.startNotDeployedNode( bean, linkerAttributeID );
    }

    if ( (filterType & Filter.TRAVERSE_ONLY) == Filter.TRAVERSE_ONLY )
    {
      for( final iris.model.DeployableUnitBean other : bean.getParent().getPoolMemberSet() )
      {
        if ( iris.model.util.DeployableUnitBeanUtil.isNotDeployed( other ) )
        {
          doTraverseBean( other, iris.model.DeployableUnitBean.COLUMN_IS_MEMBER_OF_POOL, bean, filter, delegate, visitor );
        }
      }
    }

    if( null != visitor && ( (filterType & Filter.VISIT_ONLY) == Filter.VISIT_ONLY ) )
    {
      visitor.endNotDeployedNode( bean, linkerAttributeID );
    }
  }

  protected void doTraverseDummy( final iris.beans.DummyBean dummy,
                        final String linkerAttributeID,
                        final iris.beans.AbstractBean linker,
                        final Filter filter,
                        final FilterDelegate delegate,
                        final <%= schema.java.package %>.visitor.Visitor visitor )
  {
    if( (filter.acceptDummy( dummy, delegate, linkerAttributeID, linker ) & Filter.VISIT_ONLY) == Filter.VISIT_ONLY )
    {
      visitor.startDummy( dummy, linkerAttributeID );
      visitor.endDummy( dummy, linkerAttributeID );
    }
  }
<% schema.object_types.select{|o|!o.abstract?}.each do |object_type|
  name = object_type.name
  type = j_classname(object_type.java.fully_qualified_name)
%>

  @SuppressWarnings( { "LoopStatementThatDoesntLoop" } )
  protected void doTraverse<%= name %>( final <%= type %> value,
                                final String linkerAttributeID,
                                final iris.beans.AbstractBean linker,
                                final Filter filter,
                                final FilterDelegate delegate,
                                final <%= schema.java.package %>.visitor.Visitor visitor )
  {
    final int filterType = filter.accept<%= name %>( value, delegate, linkerAttributeID, linker );

    if( filterType == Filter.REJECT )
    {
      return;
    }

    if( null != visitor && ( (filterType & Filter.VISIT_ONLY) == Filter.VISIT_ONLY ) )
    {
      visitor.start<%= name %>( value, linkerAttributeID );
    }

    if ( (filterType & Filter.TRAVERSE_ONLY) == Filter.TRAVERSE_ONLY )
    {
      for ( final TraversalEntry entry : getStrategy( value.getClass() ) )
      {
        if( entry.isAttribute() )
        {
          switch( entry.getElementID() )
          {
<% object_type.attributes.select{|a|a.reference? && !a.iris.runtime_managed?}.each do |attribute|
  ref_type = j_classname(attribute.object_type.java.fully_qualified_name)
%>            case <%= ref_type %>.<%= uppercase_constantize(attribute.java.field_name) %>_ATTR_ID:
              doTraverseBean( value.get<%= attribute.java.field_name %>(), <%= ref_type %>.COLUMN_<%= uppercase_constantize(attribute.java.field_name) %>, value, filter, delegate, visitor );
              break;
<% end %>
            default:
              throw unknownLink( entry );
          }
        }
        else
        {
          switch( entry.getElementID() )
          {
<% object_type.referencing_attributes.select{|a| a.inverse_relationship_type != :none}.each do |attribute|
  ref_type = j_classname(attribute.object_type.java.fully_qualified_name)
%>            case <%= type %>.<%= uppercase_constantize(attribute.inverse_relationship_name) %>_RELATION_ID:
              doTraverseRelationship<%= name %><%= attribute.inverse_relationship_name %>( value, filter, delegate, visitor );
              break;
<% end %>
            default:
              throw unknownLink( entry );
          }
        }
      }
    }

    if( null != visitor && ( (filterType & Filter.VISIT_ONLY) == Filter.VISIT_ONLY ) )
    {
      visitor.end<%= name %>( value, linkerAttributeID );
    }
  }
<% object_type.referencing_attributes.select{|a| a.inverse_relationship_type != :none}.each do |attribute|
  ref_type = j_classname(attribute.object_type.java.fully_qualified_name)
   is_many = attribute.inverse_relationship_type == :has_many
   other = is_many ? 'other' : "value.get#{attribute.inverse_relationship_name}()"
%>
  protected void doTraverseRelationship<%= name %><%= attribute.inverse_relationship_name %>( final <%= type %> value,
                                final Filter filter,
                                final FilterDelegate delegate,
                                final <%= schema.java.package %>.visitor.Visitor visitor )
  {<% if is_many
%>
    for( final <%= ref_type %> other : value.get<%= attribute.inverse_relationship_name %>Set() )
    {<% end %>
      doTraverseBean( <%= other %>, <%= ref_type %>.COLUMN_<%= uppercase_constantize(attribute.java.field_name) %>, value, filter, delegate, visitor );
<% if is_many %>    }
<% end %>  }
   
<% end %>
<% end %>
  private RuntimeException unknownLink( final TraversalEntry entry )
  {
    final String message = "Unknown " + ( entry.isAttribute() ? "Attribute" : "Relationship" ) + " :" + entry; 
    return new IllegalStateException( message );
  }
}
