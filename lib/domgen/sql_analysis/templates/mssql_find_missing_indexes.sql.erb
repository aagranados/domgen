/* DO NOT EDIT: File is auto-generated */

/*
  Return a list of indexes that may be needed.

  A human should still inspect the results.

  This works off stats collected since the last database restart so
  may not be relevant if the database server has been restarted.
*/
CREATE PROCEDURE <%= repository.sql_analysis.analysis_data_module.sql.quoted_schema %>.spFindMissingIndexes
AS
SELECT S.name                                                              AS [Schema],
       T.name                                                              AS TableName,
       (avg_total_user_cost * avg_user_impact) * (user_seeks + user_scans) AS Impact,
       mid.equality_columns                                                AS EqualityColumns,
       mid.inequality_columns                                              AS InequalityColumns,
       mid.included_columns                                                AS IncludedColumns,
       'CREATE NONCLUSTERED INDEX IX_' + T.name COLLATE DATABASE_DEFAULT + '_' +
       REPLACE(
         REPLACE(REPLACE(ISNULL(mid.equality_columns, '') + ISNULL(mid.inequality_columns, ''), '[', ''),
                 ']', ''),
         ', ', '_') +
       ' ON ' + QUOTENAME(S.name) + '.' + QUOTENAME(T.name) COLLATE DATABASE_DEFAULT +
       ' ( ' + IsNull(mid.equality_columns, '') +
       CASE
         WHEN mid.inequality_columns IS NULL THEN ''
         ELSE
             CASE WHEN mid.equality_columns IS NULL THEN '' ELSE ',' END + mid.inequality_columns
       END + ' ) ' +
       CASE
         WHEN mid.included_columns IS NULL THEN ''
         ELSE 'INCLUDE (' + mid.included_columns + ')'
       END + ';'
                                                                           AS CreateIndexStatement
FROM sys.dm_db_missing_index_group_stats AS migs
JOIN sys.dm_db_missing_index_groups AS mig ON migs.group_handle = mig.index_group_handle
JOIN sys.dm_db_missing_index_details AS mid ON mig.index_handle = mid.index_handle AND mid.database_id = DB_ID()
JOIN sys.objects T WITH (NOLOCK) ON mid.OBJECT_ID = T.OBJECT_ID
JOIN sys.schemas S ON T.schema_id = S.schema_id
WHERE (migs.group_handle IN
       (
         SELECT TOP (500) group_handle
         FROM sys.dm_db_missing_index_group_stats WITH (NOLOCK)
         ORDER BY (avg_total_user_cost * avg_user_impact) * (user_seeks + user_scans) DESC )) AND
      OBJECTPROPERTY(T.OBJECT_ID, 'isusertable') = 1
ORDER BY Impact DESC
