/* DO NOT EDIT: File is autogenerated */
<%
corruption_check_entity = repository.sql_analysis.corruption_check_entity
data_issue_entity = repository.sql_analysis.data_issue_entity
analysis_data_module = repository.sql_analysis.analysis_data_module
-%>

CREATE PROCEDURE <%= analysis_data_module.sql.quoted_schema %>.[spCheckCorruptions]
(
  @PrintProgress INT = 0
)
AS
  SET NOCOUNT ON

  DECLARE @IssueCount INT
  DECLARE @Id INT
  DECLARE @Sql VARCHAR(MAX)
  DECLARE @FullSql VARCHAR(MAX)
  DECLARE @Description VARCHAR(MAX)

  SELECT @IssueCount = COUNT(*) FROM <%= data_issue_entity.sql.qualified_table_name %>

  DECLARE checkCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR
	SELECT [Id], [Description], [Sql] FROM <%= corruption_check_entity.sql.qualified_table_name %>

  IF (@@error) <> 0 GOTO cfail

  OPEN checkCursor
  IF (@@error) <> 0 GOTO cfailTECursor

cfetchLoop:

  FETCH checkCursor INTO @Id, @Description, @Sql
  IF (@@error) <> 0 GOTO cfailTECursor

  IF @@FETCH_STATUS <> 0 GOTO cendCollect

  IF @PrintProgress = 1 PRINT 'Checking for corruption: ' + @Description

  SET @FullSql =
    'INSERT INTO <%= data_issue_entity.sql.qualified_table_name %>([Category], [Description], [ViewSql])
      SELECT
        CC.[Category], CC.[Description], CC.[Sql]
      FROM
        <%= corruption_check_entity.sql.qualified_table_name %> CC
      WHERE CC.[Id] = ' + CONVERT(VARCHAR,@Id) + ' AND 0 != (SELECT COUNT(*) FROM (' + @Sql + ') f)'

  EXEC( @FullSql )

  IF @@ERROR <> 0
  BEGIN
    IF @PrintProgress = 1 PRINT 'Error running corruption check: ' + @Description
    RETURN -1
  END

  IF @PrintProgress = 1 PRINT 'Completed corruption check: ' + @Description

  GOTO cfetchLoop

cfail:
  PRINT 'Failed to open cursor!'

  GOTO cdone

cfailTECursor:
  PRINT 'Failed while fetching from cursor!'

cendCollect:

  CLOSE checkCursor
  DEALLOCATE checkCursor

cdone:

  DECLARE @Result INT
  SELECT @Result = COUNT(*) FROM <%= data_issue_entity.sql.qualified_table_name %>
  SET @Result = @Result - @IssueCount
  RETURN @Result
