/* DO NOT EDIT: File is auto-generated */

/*
  Return a list of indexes that may not be needed.

  A human should still inspect the results.

  This works off stats collected since the last database restart so
  may not be relevant if the database server has been restarted.
*/
CREATE PROCEDURE <%= repository.sql_analysis.analysis_data_module.sql.quoted_schema %>.spFindIndexesNotInUse
AS
SELECT S.name                                                                 AS [Schema],
       T.name                                                                 AS TableName,
       I.name                                                                 AS IndexName,
       U.user_seeks + U.user_scans + U.user_lookups                           AS Reads,
       U.user_updates                                                         AS Writes,
       ( SELECT SUM(P.rows)
         FROM sys.partitions P
         WHERE P.index_id = U.index_id AND U.object_id = P.object_id )        AS Rows,
       CASE
         WHEN U.user_updates < 1 THEN 100
         ELSE (U.user_seeks + U.user_scans + U.user_lookups) / CONVERT(FLOAT, U.user_updates, 2)
       END                                                                    AS ReadsPerWrite,
       'DROP INDEX ' + QUOTENAME(I.name) +
       ' ON ' + QUOTENAME(S.name) + '.' + QUOTENAME(OBJECT_NAME(U.object_id)) AS DropStatement
FROM sys.dm_db_index_usage_stats U
JOIN sys.indexes I ON I.index_id = U.index_id AND U.object_id = I.object_id
JOIN sys.objects T ON U.object_id = T.object_id
JOIN sys.schemas S ON T.schema_id = S.schema_id
WHERE OBJECTPROPERTY(U.object_id, 'IsUserTable') = 1 AND
      U.database_id = DB_ID() AND
      I.type_desc = 'nonclustered' AND
      I.is_primary_key = 0 AND
      I.is_unique_constraint = 0 AND
      I.is_unique = 0 AND
      ( SELECT SUM(P.rows) FROM sys.partitions P WHERE P.index_id = U.index_id AND U.object_id = P.object_id ) > 10000
ORDER BY ReadsPerWrite

