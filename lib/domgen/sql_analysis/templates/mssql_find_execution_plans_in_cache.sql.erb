/* DO NOT EDIT: File is auto-generated */

/*
  Return a list of query plans, and associated execution stats so as to identify bottlenecks.
  The cache
*/
CREATE PROCEDURE <%= repository.sql_analysis.analysis_data_module.sql.quoted_schema %>.spFindExecutionPlansInCache
AS
SELECT QS.total_worker_time / QS.execution_count                               AS AvgCPU,
       QS.total_elapsed_time / QS.execution_count                              AS AvgDuration,
       (QS.total_logical_reads + QS.total_physical_reads) / QS.execution_count AS AvgReads,
       QS.total_logical_writes / QS.execution_count                            AS AvgWrites,
       QS.execution_count                                                      AS ExecutionCount,
       SUBSTRING(SQLText.text,
                 (QS.statement_start_offset / 2) + 1,
                 (
                     (CASE QS.statement_end_offset
                        WHEN -1 THEN datalength(SQLText.text)
                        ELSE QS.statement_end_offset
                      END - QS.statement_start_offset) / 2) +
                 1)                                                            AS SQL,
       QueryPlan.query_plan                                                    AS QueryPlan
FROM sys.dm_exec_query_stats AS QS
CROSS APPLY sys.dm_exec_sql_text(QS.sql_handle) AS SQLText
CROSS APPLY sys.dm_exec_query_plan(QS.plan_handle) AS QueryPlan
WHERE SQLText.dbid = DB_ID()
ORDER BY AvgCPU DESC
