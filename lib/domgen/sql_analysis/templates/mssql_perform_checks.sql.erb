/* DO NOT EDIT: File is autogenerated */
<%
data_issue_entity = repository.sql_analysis.data_issue_entity
analysis_data_module = repository.sql_analysis.analysis_data_module
-%>

CREATE PROCEDURE <%= analysis_data_module.sql.quoted_schema %>.[spPerformChecks]
(
  @ShowErrors INT = 1,
  @PrintProgress INT = 0,
  @ReadUncommitted INT = 1
)
AS
  SET NOCOUNT ON

  -- This stops the checks from clashing with the rest of server, but note that this procedure resets the isolation
  -- to READ COMMITTED at the end as that's the best guess and not necessarily right
  IF @ReadUncommitted = 1 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

  DELETE FROM <%= data_issue_entity.sql.qualified_table_name %>

  IF @PrintProgress = 1 PRINT CONVERT(VARCHAR, GETDATE(), 25) + ' - Performing Corruption Checks'
  EXEC <%= analysis_data_module.sql.quoted_schema %>.[spCheckCorruptions] @PrintProgress = @PrintProgress
  IF @PrintProgress = 1 PRINT CONVERT(VARCHAR, GETDATE(), 25) + ' - Corruption Checks Completed'

  DECLARE @ConstraintViolations TABLE (
    SchemaName VARCHAR(500),
    TableName VARCHAR(500),
    ConstraintName VARCHAR(500),
    ViewSql VARCHAR(MAX)
  );

  IF @PrintProgress = 1 PRINT CONVERT(VARCHAR, GETDATE(), 25) + ' - Performing Constraint Checks'
<% repository.data_modules.select{|data_module| data_module.sql?}.each do |data_module| -%>
  IF @PrintProgress = 1 PRINT CONVERT(VARCHAR, GETDATE(), 25) + ' - Checking constraints in <%= data_module.sql.quoted_schema %>'
  INSERT INTO @ConstraintViolations(SchemaName, TableName, ConstraintName, ViewSql) EXEC <%= data_module.sql.quoted_schema %>.[spCheckConstraints] @ShowErrors = @ShowErrors, @PrintProgress = @PrintProgress
<% end -%>
  IF @PrintProgress = 1 PRINT CONVERT(VARCHAR, GETDATE(), 25) + ' - Constraint Checks Completed'

  INSERT INTO <%= data_issue_entity.sql.qualified_table_name %>([Category], [Description], [ViewSql])
    SELECT 'Constraints', COALESCE(SchemaName,'') + '.' + COALESCE(TableName,'') + '.' + COALESCE(ConstraintName,''), ViewSql FROM @ConstraintViolations

  IF @ShowErrors = 1 SELECT * FROM <%= data_issue_entity.sql.qualified_table_name %>

  DECLARE @Results INT
  SELECT @Results = COUNT(*) FROM <%= data_issue_entity.sql.qualified_table_name %>

  -- Best guess and not necessarily right, safest to not run this proc in a session with anything else
  IF @ReadUncommitted = 1 SET TRANSACTION ISOLATION LEVEL READ COMMITTED

  IF @PrintProgress = 1 PRINT CONVERT(VARCHAR, GETDATE(), 25) + ' - spPerformChecks Completed'

  RETURN @Results
