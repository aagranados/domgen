/* DO NOT EDIT: File is auto-generated */
package <%= service.data_module.ejb.service_package %>;

@SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
<% if service.jws.cxf_annotations? && service.tags[:Description] -%>
@org.apache.cxf.annotations.WSDLDocumentationCollection({
  @org.apache.cxf.annotations.WSDLDocumentation("<%= service.tags[:Description] %>")
})
<% end -%>
@javax.jws.WebService( name= "<%= service.jws.web_service_name %>", serviceName = "<%= service.jws.web_service_name %>", portName = "<%= service.jws.port_name %>" )
@javax.jws.soap.SOAPBinding( style = javax.jws.soap.SOAPBinding.Style.RPC,
                             use = javax.jws.soap.SOAPBinding.Use.ENCODED,
                             parameterStyle = javax.jws.soap.SOAPBinding.ParameterStyle.WRAPPED )
public class <%= service.jws.boundary_implementation_name %>
{
  @javax.ejb.EJB
  private <%= service.ejb.qualified_boundary_interface_name %> _service;

<% service.methods.each do |method|
%>  @javax.jws.WebMethod( operationName = "<%= method.name %>" )
  <%= service.jws.cxf_annotations? && method.tags[:Description] ? "@org.apache.cxf.annotations.WSDLDocumentation(\"#{method.tags[:Description]}\")" : "" %>
  public <%= annotated_type(method.return_value, :jws, :boundary) %> <%= Domgen::Naming.camelize(method.name) %>(<%= method.parameters.collect{|p| "final @javax.jws.WebParam( name = \"#{p.name}\", mode = javax.jws.WebParam.Mode.IN, header = false ) #{annotated_type(p, :jws, :boundary)} #{p.name}" }.join(', ') %>)<%=
    method.exceptions.empty? ? '' : "\n    throws #{method.exceptions.collect{|e| e.ee.qualified_name}.join(', ')}"
%><%
if method.return_value.return_type == :void
  return_prefix = ''
  return_suffix = ''
elsif :none == method.return_value.collection_type
  return_prefix = 'return '
  return_suffix = ''
else
  return_prefix = "#{annotated_type(method.return_value, :jws, :boundary) }$result = "
  if :sequence == method.return_value.collection_type
    return_suffix = "return java.util.Arrays.asList( $result );"
  else #:set == parameter.collection_type
    return_suffix = "return new java.util.HashSet<#{method.return_value.jws.java_type(:boundary)}>( java.util.Arrays.asList( $result ) );"
  end
end

  parameters = method.parameters.collect do |parameter|
    if :none == parameter.collection_type
      parameter.name
    elsif :sequence == parameter.collection_type
      "java.util.Arrays.asList( #{parameter.name} )"
    else #:set == parameter.collection_type
      "new java.util.HashSet<#{parameter.jws.java_type(:boundary)}>( java.util.Arrays.asList( #{parameter.name} ) )"
    end
  end
%>
  {
    <%= return_prefix  %>_service.<%= Domgen::Naming.camelize(method.name) %>(<%= parameters.join(', ') %>);
  }

<% end %>}
