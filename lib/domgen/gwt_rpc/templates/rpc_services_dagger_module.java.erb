/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.gwt_rpc.qualified_rpc_services_dagger_module_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc", "PMD.FieldDeclarationsShouldBeAtStartOfClass", "PMD.UseUtilityClass" } )
@dagger.Module
public class <%= repository.gwt_rpc.rpc_services_dagger_module_name %>
{
<% if repository.keycloak? -%>
  private static final int MIN_TOKEN_VALIDITY_SECONDS = 15;
  @javax.annotation.Nullable
  private static org.realityforge.gwt.keycloak.Keycloak c_keycloak;
  @javax.annotation.Nonnull
  private static java.util.List<java.lang.Runnable> c_actions = new java.util.ArrayList<>();
<% end -%>
  private static String c_baseURL;
<% if repository.imit? -%>
  private static replicant.Request c_request;
<% end -%>
<% if repository.keycloak? -%>

  @javax.annotation.Nonnull
  public static org.realityforge.gwt.keycloak.Keycloak getKeycloak()
  {
    if ( org.realityforge.braincheck.BrainCheckConfig.checkInvariants() )
    {
      org.realityforge.braincheck.Guards.invariant( () -> null != c_keycloak,
                                                    () -> "Keycloak not configured when calling <%= repository.gwt_rpc.rpc_services_dagger_module_name %>.getKeycloak()" );
    }
    assert null != c_keycloak;
    return c_keycloak;
  }

  public static void setKeycloak( @javax.annotation.Nonnull final org.realityforge.gwt.keycloak.Keycloak keycloak )
  {
    c_keycloak = keycloak;
  }

  public static void updateTokenAndExecute( @javax.annotation.Nonnull final java.lang.Runnable action )
  {
    if ( null == c_keycloak )
    {
      action.run();
    }
    else
    {
      c_actions.add( action );
      c_keycloak.updateToken( MIN_TOKEN_VALIDITY_SECONDS, () -> {
        c_actions.forEach( java.lang.Runnable::run );
        c_actions.clear();
      } );
    }
  }

<% end -%>
<% if repository.imit? -%>
  public static void setRequest( @javax.annotation.Nullable final replicant.Request request )
  {
    c_request = request;
  }

  @javax.annotation.Nullable
  public static replicant.Request getRequest()
  {
    return c_request;
  }

  @javax.annotation.Nonnull
  public static replicant.WebSocketConfig newWebSocketConfig()
  {
    return new replicant.WebSocketConfig( getBaseURL().replace( "https://", "wss://" ).replace( "http://", "ws://" ) + "api" + org.realityforge.replicant.shared.SharedConstants.REPLICANT_URL_FRAGMENT, <%= repository.gwt_rpc.rpc_services_dagger_module_name %>::updateTokenAndExecute, () -> <%= repository.gwt_rpc.rpc_services_dagger_module_name %>.getKeycloak().getToken() );
  }
<% end -%>

  public static void setBaseURL( @javax.annotation.Nonnull final String baseURL )
  {
    c_baseURL = baseURL;
  }

  public static String getBaseURL()
  {
    return c_baseURL;
  }

<%
  needs_xsrf =
    repository.data_modules.select{|data_module| data_module.gwt_rpc?}.any? do |data_module|
      data_module.services.select{|service| service.gwt_rpc?}.any? do |service|
        service.gwt_rpc.xsrf_protected?
      end
    end
  if needs_xsrf
%>
  private static com.google.gwt.user.client.rpc.XsrfToken c_xsrfToken;

  public static com.google.gwt.user.client.rpc.XsrfToken getXsrfToken()
  {
    if( null == c_xsrfToken )
    {
      throw new IllegalStateException( "Attempting to construct service requiring XsrfToken without specifying token." );
    }
    return c_xsrfToken;
  }

  public static void setXsrfToken( @javax.annotation.Nonnull final com.google.gwt.user.client.rpc.XsrfToken xsrfToken )
  {
    c_xsrfToken = java.util.Objects.requireNonNull( xsrfToken );
  }

<%
  end
-%>
<%
  repository.data_modules.select{|data_module| data_module.gwt_rpc?}.each do |data_module|
    data_module.services.select{|service| service.gwt_rpc?}.each do |service|
%>
  @javax.annotation.Nonnull
  @dagger.Provides
  @javax.inject.Singleton
  public static <%= service.gwt_rpc.qualified_async_rpc_service_name %> get<%= data_module.name %><%= service.name %>()
  {
    final <%= service.gwt_rpc.qualified_async_rpc_service_name %> service = com.google.gwt.core.client.GWT.create( <%= service.gwt_rpc.qualified_rpc_service_name %>.class );
<% if service.gwt_rpc.xsrf_protected? %>
    ( (com.google.gwt.user.client.rpc.HasRpcToken) service ).setRpcToken( getXsrfToken() );
<% end %>
<% if service.imit? -%>
    ( (com.google.gwt.user.client.rpc.ServiceDefTarget) service ).setRpcRequestBuilder( new <%= repository.imit.qualified_rpc_request_builder_name %>() );
<% elsif service.keycloak? -%>
    ( (com.google.gwt.user.client.rpc.ServiceDefTarget) service ).setRpcRequestBuilder( new <%= repository.gwt_rpc.qualified_keycloak_rpc_request_builder_name %>() );
<% end -%>
    final java.lang.String baseURL = getBaseURL();
    if ( org.realityforge.braincheck.BrainCheckConfig.checkInvariants() )
    {
      org.realityforge.braincheck.Guards.invariant( () -> null != baseURL,
                                                    () -> "<%= repository.gwt_rpc.rpc_services_dagger_module_name %>.initialize() not invoked prior to using dagger module" );
    }
    assert null != baseURL;
    ( (com.google.gwt.user.client.rpc.ServiceDefTarget) service ).setServiceEntryPoint( baseURL + "<%= service.gwt_rpc.api_url %>" );
    return service;
  }
<%
    end
  end
%>}
