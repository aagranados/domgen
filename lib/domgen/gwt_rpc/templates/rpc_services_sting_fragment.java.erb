/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.gwt_rpc.qualified_rpc_services_sting_fragment_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc", "PMD.FieldDeclarationsShouldBeAtStartOfClass", "PMD.UseUtilityClass" } )
@sting.Fragment
public interface <%= repository.gwt_rpc.rpc_services_sting_fragment_name %>
{
<%
  repository.data_modules.select{|data_module| data_module.gwt_rpc?}.each do |data_module|
    data_module.services.select{|service| service.gwt_rpc?}.each do |service|
-%>

  @javax.annotation.Nonnull
  default <%= service.gwt_rpc.qualified_async_rpc_service_name %> get<%= data_module.name %><%= service.name %>( @sting.Named( "<%= repository.name %>.BaseURL") @javax.annotation.Nonnull final String baseUrl<% if service.keycloak? -%>, @javax.annotation.Nonnull final org.realityforge.gwt.keycloak.Keycloak keycloak<% end -%> )
  {
    final <%= service.gwt_rpc.qualified_async_rpc_service_name %> service = com.google.gwt.core.client.GWT.create( <%= service.gwt_rpc.qualified_rpc_service_name %>.class );
<% if service.imit? && service.keycloak? -%>
    ( (com.google.gwt.user.client.rpc.ServiceDefTarget) service ).setRpcRequestBuilder( new org.realityforge.replicant.client.gwt.SecuredReplicantRpcRequestBuilder( baseUrl, <%= repository.imit.qualified_system_constants_name %>.SCHEMA_ID, keycloak ) );
<% elsif service.imit? -%>
    ( (com.google.gwt.user.client.rpc.ServiceDefTarget) service ).setRpcRequestBuilder( new org.realityforge.replicant.client.gwt.ReplicantRpcRequestBuilder( baseUrl, <%= repository.imit.qualified_system_constants_name %>.SCHEMA_ID ) );
<% else -%>
    ( (com.google.gwt.user.client.rpc.ServiceDefTarget) service ).setRpcRequestBuilder( new <%= repository.gwt_rpc.qualified_rpc_request_builder_name %>( baseUrl, keycloak ) );
<% end -%>
    ( (com.google.gwt.user.client.rpc.ServiceDefTarget) service ).setServiceEntryPoint( baseUrl + "<%= service.gwt_rpc.api_url %>" );
    return service;
  }
<%
    end
  end
-%>
}
