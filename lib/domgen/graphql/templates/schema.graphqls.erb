# DO NOT EDIT: File is auto-generated

<% if repository.graphql.query_type? || repository.graphql.mutation_type? || repository.graphql.subscription_type? -%>
schema {
<% if repository.graphql.query_type? -%>
  query: Query
<% end -%>
<% if repository.graphql.mutation_type? -%>
  mutation: Mutation
<% end -%>
<% if repository.graphql.subscription_type? -%>
  subscription: Subscription
<% end -%>
}
<% end -%>

<% if repository.graphql.query_type? -%>
<%= description_string(repository.graphql.query_description, 0) -%>
type Query {
}

<% end -%>
<% if repository.graphql.mutation_type? -%>
<%= description_string(repository.graphql.mutation_description, 0) -%>
type Mutation {
}

<% end -%>
<% if repository.graphql.subscription_type? -%>
<%= description_string(repository.graphql.subscription_description, 0) -%>
type Subscription {
}

<% end -%>
<% if repository.graphql.requires_fetch? -%>
directive @fetch(from:String!) on FIELD_DEFINITION

<% end -%>
<% repository.graphql.non_standard_scalars.sort.each do |scalar| -%>
scalar <%= scalar %>
<% end -%>
<% repository.data_modules.select(&:graphql?).each do |data_module| -%>
<% data_module.enumerations.select(&:graphql?).each do |enumeration| -%>

<%= description_as_string(enumeration, 0) -%>
enum <%= enumeration.graphql.name %> {
<% enumeration.values.select(&:graphql?).each do |value| -%>
<%= description_as_string(value, 2) -%>
  <%= value.graphql.name %><%= deprecate_directive(value) %>
<% end -%>
}
<% end -%>
<% end -%>
<% repository.data_modules.select(&:graphql?).each do |data_module| -%>
<% data_module.structs.select(&:graphql?).each do |struct| -%>
<% if struct.graphql.input? -%>

<%= description_as_string(struct, 0) -%>
input <%= struct.graphql.input_name %> {
<% struct.fields.select(&:graphql?).each do |field| -%>
<%= description_as_string(field, 2) -%>
<%
  field_type =
    if field.struct?
      field.referenced_struct.graphql.input_name
    elsif field.enumeration?
      field.enumeration.graphql.name
    else
      field.graphql.scalar_type
    end
-%>
  <%= field.graphql.name %>: <%= field_type %><%= field.nullable? ? '' : "!" -%><%= deprecate_directive(field) %><%= field.graphql.custom_name? ? " @fetch(from:\"#{Reality::Naming.camelize(field.name)}\")" : "" %>
<% end -%>
}
<% end -%>
<% if struct.graphql.output? -%>

<%= description_as_string(struct, 0) -%>
input <%= struct.graphql.output_name %> {
<%= description_as_string(field, 2) -%>
<% struct.fields.select(&:graphql?).each do |field| -%>
<%
  field_type =
    if field.struct?
      field.referenced_struct.graphql.output_name
    elsif field.enumeration?
      field.enumeration.graphql.name
    else
      field.graphql.scalar_type
    end
-%>
  <%= field.graphql.name %>: <%= field_type %><%= field.nullable? ? '' : "!" -%><%= deprecate_directive(field) %><%= field.graphql.custom_name? ? " @fetch(from:\"#{Reality::Naming.camelize(field.name)}\")" : "" %>
<% end -%>
}
<% end -%>
<% end -%>
<% end -%>
<% repository.data_modules.select(&:graphql?).each do |data_module| -%>
<% data_module.entities.select(&:graphql?).each do |entity| -%>

<%= description_as_string(entity, 0) -%>
<% if entity.abstract? -%>
interface <%= entity.graphql.name %> {
<% else -%>
<% implements = entity.supertypes.select{|type| type.graphql? && type.abstract? } -%>
type <%= entity.graphql.name %><%= implements.empty? ? '' : " implements #{implements.collect{|type|type.graphql.name}.join(' & ')}" %> {
<% end -%>
<% entity.attributes.select(&:graphql?).each do |attribute| -%>
<%= description_as_string(attribute, 2) -%>
<%
  attribute_type =
    if attribute.primary_key?
      'ID'
    elsif attribute.reference?
      attribute.referenced_entity.graphql.name
    elsif attribute.enumeration?
      attribute.enumeration.graphql.name
    else
      attribute.graphql.scalar_type
    end
-%>
  <%= attribute.graphql.name %>: <%= attribute_type %><%= attribute.nullable? ? '' : "!" -%><%= deprecate_directive(attribute) %><%= attribute.graphql.custom_name? ? " @fetch(from:\"#{Reality::Naming.camelize(attribute.name)}\")" : "" %>
<% end -%>
<% entity.referencing_attributes.
  select { |attribute| !(attribute.abstract? || attribute.inherited?) && attribute.inverse.graphql? && attribute.inverse.graphql.traversable? }.each do |attribute|

  attribute_type = attribute.inverse.multiplicity == :many ? "[#{attribute.entity.graphql.name}!]" : attribute.entity.graphql.name
-%>
<%= description_as_string(attribute.inverse, 2) -%>
  <%= attribute.inverse.graphql.name %>: <%= attribute_type %><%= attribute.inverse.multiplicity == :zero_or_one ? '' : "!" -%><%= deprecate_directive(attribute) %><%= attribute.inverse.graphql.custom_name?  ? " @fetch(from:\"#{Reality::Naming.camelize(attribute.inverse.name)}\")" : "" %>
<% end -%>
}
<% end -%>
<% end -%>
