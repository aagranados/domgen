/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.graphql.qualified_abstract_schema_builder_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
public abstract class <%= repository.graphql.abstract_schema_builder_name %>
  extends org.realityforge.graphql.domgen.AbstractGraphQLSchemaProvider
{
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.daos.select{|dao| dao.graphql? }.each do |dao| -%>
  @javax.inject.Inject
  private <%= dao.jpa.qualified_dao_service_name %> _<%= Reality::Naming.camelize(dao.qualified_name.gsub('.','')) %>;
<% end -%>
<% end -%>
  @javax.annotation.Resource( lookup = "java:appserver/TransactionManager" )
  private javax.transaction.TransactionManager _transactionManager;
  @javax.annotation.Resource( lookup = "<%= repository.graphql.context_service_jndi_name %>" )
  private javax.enterprise.concurrent.ContextService _contextService;
<% if repository.imit? -%>
  @javax.inject.Inject
  private org.realityforge.replicant.server.EntityMessageEndpoint _endpoint;
  @javax.persistence.PersistenceContext( unitName = <%= repository.jpa.qualified_unit_descriptor_name %>.NAME )
  private javax.persistence.EntityManager _entityManager;
  @javax.annotation.Resource
  private javax.transaction.TransactionSynchronizationRegistry _registry;

  @javax.annotation.Nonnull
  protected javax.transaction.TransactionSynchronizationRegistry getRegistry()
  {
    return _registry;
  }

  protected org.realityforge.replicant.server.EntityMessageEndpoint getEndpoint()
  {
    return _endpoint;
  }

  protected javax.persistence.EntityManager getEntityManager()
  {
    return _entityManager;
  }
<% end -%>

  @javax.annotation.Nonnull
  protected javax.transaction.TransactionManager getTransactionManager()
  {
    return _transactionManager;
  }

  @java.lang.Override
  protected void populateGraphQLSchema()
  {
    registerScalarTypes();
    registerEnumTypes();
    registerObjectTypes();
    resolveInterfaceTypeResolvers();
  }

  protected void registerScalarTypes()
  {
<% repository.graphql.non_standard_scalars.each do |scalar| -%>
    registerScalarTypeUnlessNull( defineScalar_<%= scalar %>() );
<% end -%>
    registerStandardScalarTypes();
  }

  protected void registerEnumTypes()
  {
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.enumerations.select{|enumeration| enumeration.graphql? }.each do |enumeration| -%>
    registerEnumTypeUnlessNull( defineEnumType_<%= data_module.name %>_<%= enumeration.name %>() );
<% end -%>
<% end -%>
  }

  protected void registerObjectTypes()
  {
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.entities.select{|entity| entity.graphql? }.each do |entity| -%>
<% if entity.abstract? -%>
    registerInterfaceTypeUnlessNull( defineInterfaceType_<%= data_module.name %>_<%= entity.name %>() );
<% else -%>
    registerObjectTypeUnlessNull( defineObjectType_<%= data_module.name %>_<%= entity.name %>() );
<% end -%>
<% end -%>
<% end -%>
    registerObjectType( defineQueryObjectType() );
  }

  protected void resolveInterfaceTypeResolvers()
  {
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.entities.select{|entity| entity.graphql? }.each do |entity| -%>
<% if entity.abstract? -%>
    {
      final graphql.schema.TypeResolver resolver =
        new org.realityforge.graphql.domgen.SimpleTypeResolver.Builder().
<% entity.subtypes.select{|st|st.concrete? && st.jpa?}.each do |st| -%>
        add( <%= st.jpa.qualified_name %>.class, objectType( "<%= st.graphql.name %>" ) ).
<% end -%>
        build();
      ( (graphql.schema.TypeResolverProxy) interfaceType( "<%= entity.graphql.name %>" ).getTypeResolver() ).setTypeResolver( resolver );
    }
<% end -%>
<% end -%>
<% end -%>
  }
<% repository.graphql.non_standard_scalars.each do |scalar| -%>

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLScalarType defineScalar_<%= scalar %>()
  {
    return org.realityforge.graphql.domgen.Scalars.<%= Reality::Naming.uppercase_constantize(scalar) %>;
  }
<% end -%>
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.enumerations.select{|enumeration| enumeration.graphql? }.each do |enumeration| -%>

  protected void customizeEnumType_<%= data_module.name %>_<%= enumeration.name %>( @javax.annotation.Nonnull final graphql.schema.GraphQLEnumType.Builder objectType )
  {
  }

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLEnumType defineEnumType_<%= data_module.name %>_<%= enumeration.graphql.name %>()
  {
    final graphql.schema.GraphQLEnumType.Builder enumType = graphql.schema.GraphQLEnumType.newEnum();
    enumType.name( "<%= enumeration.graphql.name %>" );
<% if has_description?(enumeration) -%>
    enumType.description( "<%= description_to_string(enumeration) %>" );
<% end -%>
<% enumeration.values.select{|value| value.graphql?}.each do |value| -%>
    enumType.value( "<%= value.graphql.name %>", "<%= enumeration.graphql.name %>", "<%= description_to_string(value) %>", <%= value.graphql.deprecation_reason ? "\"#{value.graphql.deprecation_reason}\"" : 'null' %> );
<% end -%>
    customizeEnumType_<%= data_module.name %>_<%= enumeration.name %>( enumType );
    return enumType.build();
  }
<% end -%>
<% end -%>
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.entities.select{|entity| entity.graphql? }.each do |entity| -%>
<% entity.attributes.select{|attribute| attribute.graphql?}.each do |attribute| -%>
<% if attribute.abstract? -%>

  private static Object get<%= data_module.name %>_<%= entity.name %>_<%= attribute.name %>( final graphql.schema.DataFetchingEnvironment e )
  {
    final Object source = e.getSource();
    <% attribute.entity.subtypes.select{|st|st.concrete? && st.jpa?}.each do |st| -%>if( source instanceof <%= st.jpa.qualified_name %> )
    {
      return ( (<%= st.jpa.qualified_name %>) source ).<%= getter_for(attribute) %>;
    }
    else <% end %>
    {
      throw new IllegalStateException( "Unable to resolve source object " + source + " to field <%= data_module.name %>_<%= entity.name %>_<%= attribute.name %>" );
    }
  }

  @javax.annotation.Nonnull
  protected graphql.schema.DataFetcher defineDataFetcher_<%= data_module.name %>_<%= entity.name %>_<%= attribute.name %>()
  {
    return <%= repository.graphql.abstract_schema_builder_name %>::get<%= data_module.name %>_<%= entity.name %>_<%= attribute.name %>;
  }
<% else -%>

  @javax.annotation.Nonnull
  protected graphql.schema.DataFetcher defineDataFetcher_<%= data_module.name %>_<%= entity.name %>_<%= attribute.name %>()
  {
    return e -> e.<<%= entity.jpa.qualified_name %>>getSource().<%= getter_for(attribute) %>;
  }
<% end -%>

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLFieldDefinition defineField_<%= data_module.name %>_<%= entity.name %>_<%= attribute.name %>()
  {
    final graphql.schema.GraphQLFieldDefinition.Builder field = graphql.schema.GraphQLFieldDefinition.newFieldDefinition();
    field.name( "<%= attribute.graphql.name %>" );
<% if has_description?(attribute) -%>
    field.description( "<%= description_to_string(attribute) %>" );
<% end -%>
<% if attribute.graphql.deprecation_reason -%>
    field.deprecate( "<%= attribute.graphql.deprecation_reason -%>" );
<% end -%>
<%
  accessor =
    if attribute.reference? && attribute.referenced_entity.qualified_name.to_s == attribute.entity.qualified_name.to_s
      "new graphql.schema.GraphQLTypeReference( \"#{attribute.referenced_entity.graphql.name}\" )"
    elsif attribute.reference? && attribute.referenced_entity.abstract?
      "interfaceType( \"#{attribute.referenced_entity.graphql.name}\" )"
    elsif attribute.reference?
      "objectType( \"#{attribute.referenced_entity.graphql.name}\" )"
    elsif attribute.enumeration?
      "enumType( \"#{attribute.enumeration.graphql.name}\" )"
    else
      "scalarType( \"#{attribute.graphql.scalar_type}\" )"
    end
-%>
    field.type( <% unless attribute.nullable? -%>new graphql.schema.GraphQLNonNull( <% end -%><% if attribute.collection? -%>new graphql.schema.GraphQLList( new graphql.schema.GraphQLNonNull( <% end -%><%= accessor %><% if attribute.collection? -%> ) )<% end %><% unless attribute.nullable? -%> )<% end -%> );
    field.dataFetcher( defineDataFetcher_<%= data_module.name %>_<%= entity.name %>_<%= attribute.name %>() );
    return field.build();
  }
<% end -%>
<% if entity.abstract? -%>

  protected void customizeInterfaceType_<%= data_module.name %>_<%= entity.name %>( @javax.annotation.Nonnull final graphql.schema.GraphQLInterfaceType.Builder interfaceType )
  {
  }

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLInterfaceType defineInterfaceType_<%= data_module.name %>_<%= entity.name %>()
  {
    final graphql.schema.GraphQLInterfaceType.Builder interfaceType = graphql.schema.GraphQLInterfaceType.newInterface();
    interfaceType.name( "<%= entity.graphql.name %>" );
<% if has_description?(entity) -%>
    interfaceType.description( "<%= description_to_string(entity) %>" );
<% end -%>
<% entity.attributes.select{|attribute| attribute.graphql?}.each do |attribute| -%>
    {
      final graphql.schema.GraphQLFieldDefinition field = defineField_<%= data_module.name %>_<%= entity.name %>_<%= attribute.name %>();
      if( null != field )
      {
        interfaceType.field( field );
      }
    }
<% end -%>
    interfaceType.typeResolver( new graphql.schema.TypeResolverProxy() );
    customizeInterfaceType_<%= data_module.name %>_<%= entity.name %>( interfaceType );
    return interfaceType.build();
  }
<% else -%>

  protected void customizeObjectType_<%= data_module.name %>_<%= entity.name %>( @javax.annotation.Nonnull final graphql.schema.GraphQLObjectType.Builder objectType )
  {
  }

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLObjectType defineObjectType_<%= data_module.name %>_<%= entity.name %>()
  {
    final graphql.schema.GraphQLObjectType.Builder objectType = graphql.schema.GraphQLObjectType.newObject();
    objectType.name( "<%= entity.graphql.name %>" );
<% entity.supertypes.select{|type| type.graphql? && type.abstract? }.each do |type| -%>
    objectType.withInterface( interfaceType( "<%= type.graphql.name %>" ) );
<% end -%>
<% if has_description?(entity) -%>
    objectType.description( "<%= description_to_string(entity) %>" );
<% end -%>
<% entity.attributes.select{|attribute| attribute.graphql?}.each do |attribute| -%>
    {
      final graphql.schema.GraphQLFieldDefinition field = defineField_<%= data_module.name %>_<%= entity.name %>_<%= attribute.name %>();
      if( null != field )
      {
        objectType.field( field );
      }
    }
<% end -%>
    customizeObjectType_<%= data_module.name %>_<%= entity.name %>( objectType );
    return objectType.build();
  }
<% end -%>
<% end -%>
<% end -%>

  @javax.annotation.Nonnull
  protected graphql.schema.DataFetcher wrapTopLevelDataFetcher( @javax.annotation.Nonnull final String key, final boolean wrapInTransaction, @javax.annotation.Nonnull final graphql.schema.DataFetcher base )
  {
    graphql.schema.DataFetcher fetcher = base;
    if ( wrapInTransaction )
    {
<% if repository.imit? -%>
      fetcher = new org.realityforge.graphql.domgen.ReplicantEnabledDataFetcher( getEndpoint(), getEntityManager(), getRegistry(), key, fetcher );
<% end -%>
      fetcher = new org.realityforge.graphql.domgen.TransactionEnabledDataFetcher( getTransactionManager(), fetcher );
    }
    return _contextService.createContextualProxy( fetcher, graphql.schema.DataFetcher.class );
  }
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.daos.select{|dao| dao.graphql? }.each do |dao| -%>
<% dao.queries.select{|query| query.graphql? && query.query_type == :select }.each do |query| -%>

  @javax.annotation.Nonnull
  protected graphql.schema.DataFetcher defineDataFetcher_<%= data_module.name %>_<%= dao.name %>_<%= query.name %>()
  {
    return wrapTopLevelDataFetcher( "<%= query.graphql.name %>", <%= :requires_new != dao.jpa.transaction_type -%>, e -> _<%= Reality::Naming.camelize(dao.qualified_name.gsub('.','')) %>.<%= Reality::Naming.camelize(query.name) %>() );
  }

  protected void customizeQuery_<%= data_module.name %>_<%= dao.name %>_<%= query.name %>( @javax.annotation.Nonnull final graphql.schema.GraphQLFieldDefinition.Builder query )
  {
  }

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLFieldDefinition defineQuery_<%= data_module.name %>_<%= dao.name %>_<%= query.name %>()
  {
    final graphql.schema.GraphQLFieldDefinition.Builder query = graphql.schema.GraphQLFieldDefinition.newFieldDefinition();
    query.name( "<%= query.graphql.name %>" );
<% if has_description?(query) -%>
    query.description( "<%= description_to_string(query) %>" );
<% end -%>
<% if query.graphql.deprecation_reason -%>
    query.deprecate( "<%= query.graphql.deprecation_reason -%>" );
<% end -%>
<%
  accessor =
    if query.result_entity? && query.entity.abstract?
      "interfaceType( \"#{query.entity.graphql.name}\" )"
    elsif query.result_entity?
      "objectType( \"#{query.entity.graphql.name}\" )"
     elsif query.result_struct?
      "objectType( \"#{query.struct.graphql.name}\" )"
     else
       raise "Unhandled result type"
     end
-%>
    query.type( <%= query.multiplicity == :one ? "new graphql.schema.GraphQLNonNull( " : query.multiplicity == :many ? "new graphql.schema.GraphQLList( new graphql.schema.GraphQLNonNull( " : '' -%><%= accessor %><%= query.multiplicity == :one ? ' )' : query.multiplicity == :many ? " ) )" : '' -%> );
    query.dataFetcher( defineDataFetcher_<%= data_module.name %>_<%= dao.name %>_<%= query.name %>() );
    customizeQuery_<%= data_module.name %>_<%= dao.name %>_<%= query.name %>( query );
    return query.build();
  }
<% end -%>
<% end -%>
<% end -%>

  protected void customizeQueryObjectType( @javax.annotation.Nonnull final graphql.schema.GraphQLObjectType.Builder objectType )
  {
  }

  @javax.annotation.Nonnull
  protected graphql.schema.GraphQLObjectType defineQueryObjectType()
  {
    final graphql.schema.GraphQLObjectType.Builder objectType = graphql.schema.GraphQLObjectType.newObject();
    objectType.name( com.coxautodev.graphql.tools.RootTypeInfo.DEFAULT_QUERY_NAME );
<% if repository.graphql.query_description.to_s.strip != '' -%>
    objectType.description( "<%= escape_description_to_string(repository.graphql.query_description) %>" );
<% end -%>
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.daos.select{|dao| dao.graphql? }.each do |dao| -%>
<% dao.queries.select{|query| query.graphql? && query.query_type == :select }.each do |query| -%>
    {
      final graphql.schema.GraphQLFieldDefinition field = defineQuery_<%= data_module.name %>_<%= dao.name %>_<%= query.name %>();
      if( null != field )
      {
        objectType.field( field );
      }
    }
<% end -%>
<% end -%>
<% end -%>
    customizeQueryObjectType( objectType );
    return objectType.build();
  }
}
