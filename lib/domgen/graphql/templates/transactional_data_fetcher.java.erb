/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.graphql.qualified_transactional_data_fetcher_name) %>;

/**
 * This fetcher sets up transactional context.
 * It should be used for top-level fetchers where the nested fetcher is not called across a boundary
 * and thus will not have transaction context initialized.
 */
public class <%= repository.graphql.transactional_data_fetcher_name %><T>
  implements graphql.schema.DataFetcher<T>
{
  @javax.annotation.Nonnull
  private final javax.transaction.TransactionManager _transactionManager;
  @javax.annotation.Nonnull
  private final graphql.schema.DataFetcher<T> _fetcher;

  public <%= repository.graphql.transactional_data_fetcher_name %>( @javax.annotation.Nonnull final javax.transaction.TransactionManager transactionManager, @javax.annotation.Nonnull final graphql.schema.DataFetcher<T> fetcher )
  {
    _transactionManager = java.util.Objects.requireNonNull( transactionManager );
    _fetcher = java.util.Objects.requireNonNull( fetcher );
  }

  @java.lang.Override
  public T get( @javax.annotation.Nonnull final graphql.schema.DataFetchingEnvironment environment )
    throws Exception
  {
    _transactionManager.begin();
    try
    {
      return _fetcher.get( environment );
    }
    catch ( final Exception e )
    {
      _transactionManager.setRollbackOnly();
      throw e;
    }
    finally
    {
      if ( javax.transaction.Status.STATUS_ACTIVE == _transactionManager.getStatus() )
      {
        _transactionManager.commit();
      }
      else
      {
        _transactionManager.rollback();
      }
    }
  }
}
