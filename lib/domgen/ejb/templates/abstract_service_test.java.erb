/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.ejb.qualified_abstract_service_test_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration", "PMD.LocalVariableNamingConventions" } )
@javax.annotation.Generated( "Domgen" )
public abstract class <%= repository.ejb.abstract_service_test_name %>
  extends <%= repository.jpa? ? repository.jpa.qualified_base_entity_test_name : 'org.realityforge.guiceyloops.server.AbstractServerTest' %>
{
  @java.lang.Override
  protected com.google.inject.Module[] getModules()
  {
    final java.util.ArrayList<com.google.inject.Module> modules = new java.util.ArrayList<>();
    java.util.Collections.addAll( modules, super.getModules() );
<% repository.ejb.test_modules.keys.each do |name| -%>
    addModule( modules, new<%= name %>() );
<% end -%>
<% repository.ejb.flushable_test_modules.keys.each do |name| -%>
    addModule( modules, new<%= name %>() );
<% end -%>
    return modules.toArray( new com.google.inject.Module[ modules.size() ] );
  }
<% repository.ejb.test_modules.each_pair do |name, classname| -%>
<% if classname -%>

  @javax.annotation.Nullable
  protected com.google.inject.Module new<%= name %>()
  {
    return new <%= classname %>();
  }
<% end -%>
<% end -%>
<% repository.ejb.flushable_test_modules.each_pair do |name, classname| -%>
<% if classname -%>

  @javax.annotation.Nullable
  protected com.google.inject.Module new<%= name %>()
  {
    return new <%= classname %>( this );
  }
<% end -%>
<% end -%>
<% repository.ejb.test_class_contents.each do |content| -%>
<%= content -%>
<% end -%>
<% unless repository.jpa? -%>

  @Override
  public void flush()
  {
    //No default persistence unit so no need to flush
  }
<% end -%>
<% repository.data_modules.select{|data_module| data_module.ee?}.each do |data_module| -%>
<% data_module.messages.select{|message| message.ee?}.each do |message| -%>

  protected final void ensure<%= message.ee.name %>Event( @javax.annotation.Nonnull final java.util.function.Predicate<<%= message.ee.qualified_name %>> predicate )
  {
    get<%= message.ee.name %>Events().stream().filter( predicate ).findAny().orElseThrow( AssertionError::new );
  }

  @javax.annotation.Nonnull
  protected final java.util.List<<%= message.ee.qualified_name %>> get<%= message.ee.name %>Events()
  {
    return getEvents( <%= message.ee.qualified_message_literal_name %>.INSTANCE );
  }

  @javax.annotation.Nonnull
  protected final java.util.List<<%= message.ee.qualified_name %>> get<%= message.ee.name %>Events( final int messageCount )
  {
    return getEvents( <%= message.ee.qualified_message_literal_name %>.INSTANCE, messageCount );
  }

  @javax.annotation.Nonnull
  protected final <%= message.ee.qualified_name %> get<%= message.ee.name %>Event( final int index )
  {
    return getEvent( <%= message.ee.qualified_message_literal_name %>.INSTANCE, index );
  }

  protected final void assert<%= message.ee.name %>EventCount( final int messageCount )
  {
    assertEventCount( <%= message.ee.qualified_message_literal_name %>.INSTANCE, messageCount );
  }
<% unless message.parameters.empty? -%>

  protected void assert<%= message.ee.name %>Event( final int index<%= message.parameters.empty? ? '' : ', ' %><%= message.parameters.collect{|parameter| "#{annotated_type(parameter, :ee, :default, :final => true)} #{Reality::Naming.camelize(parameter.name)}" }.join(', ') -%> )
  {
    final <%= message.ee.qualified_name %> $event$ = get<%= message.ee.name %>Event( index );
<% message.parameters.each do |parameter| -%>
    org.testng.Assert.assertEquals( $event$.<%= getter_for(parameter) %>, <%= Reality::Naming.camelize(parameter.name) %> );
<% end -%>
  }
<% end -%>
<% end -%>
<% end -%>
}
